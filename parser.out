Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> translation_unit_or_empty
Rule 1     abstract_declarator_opt -> empty
Rule 2     abstract_declarator_opt -> abstract_declarator
Rule 3     assignment_expression_opt -> empty
Rule 4     assignment_expression_opt -> assignment_expression
Rule 5     block_item_list_opt -> empty
Rule 6     block_item_list_opt -> block_item_list
Rule 7     declaration_list_opt -> empty
Rule 8     declaration_list_opt -> declaration_list
Rule 9     declaration_specifiers_no_type_opt -> empty
Rule 10    declaration_specifiers_no_type_opt -> declaration_specifiers_no_type
Rule 11    designation_opt -> empty
Rule 12    designation_opt -> designation
Rule 13    expression_opt -> empty
Rule 14    expression_opt -> expression
Rule 15    id_init_declarator_list_opt -> empty
Rule 16    id_init_declarator_list_opt -> id_init_declarator_list
Rule 17    identifier_list_opt -> empty
Rule 18    identifier_list_opt -> identifier_list
Rule 19    init_declarator_list_opt -> empty
Rule 20    init_declarator_list_opt -> init_declarator_list
Rule 21    initializer_list_opt -> empty
Rule 22    initializer_list_opt -> initializer_list
Rule 23    parameter_type_list_opt -> empty
Rule 24    parameter_type_list_opt -> parameter_type_list
Rule 25    struct_declarator_list_opt -> empty
Rule 26    struct_declarator_list_opt -> struct_declarator_list
Rule 27    type_qualifier_list_opt -> empty
Rule 28    type_qualifier_list_opt -> type_qualifier_list
Rule 29    direct_id_declarator -> ID
Rule 30    direct_id_declarator -> LPAREN id_declarator RPAREN
Rule 31    direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
Rule 32    direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
Rule 33    direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
Rule 34    direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
Rule 35    direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN
Rule 36    direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN
Rule 37    direct_typeid_declarator -> TYPEID
Rule 38    direct_typeid_declarator -> LPAREN typeid_declarator RPAREN
Rule 39    direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
Rule 40    direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
Rule 41    direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
Rule 42    direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
Rule 43    direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN
Rule 44    direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN
Rule 45    direct_typeid_noparen_declarator -> TYPEID
Rule 46    direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
Rule 47    direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
Rule 48    direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
Rule 49    direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
Rule 50    direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN parameter_type_list RPAREN
Rule 51    direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN identifier_list_opt RPAREN
Rule 52    id_declarator -> direct_id_declarator
Rule 53    id_declarator -> pointer direct_id_declarator
Rule 54    typeid_declarator -> direct_typeid_declarator
Rule 55    typeid_declarator -> pointer direct_typeid_declarator
Rule 56    typeid_noparen_declarator -> direct_typeid_noparen_declarator
Rule 57    typeid_noparen_declarator -> pointer direct_typeid_noparen_declarator
Rule 58    translation_unit_or_empty -> translation_unit
Rule 59    translation_unit_or_empty -> empty
Rule 60    translation_unit -> external_declaration
Rule 61    translation_unit -> translation_unit external_declaration
Rule 62    external_declaration -> function_definition
Rule 63    external_declaration -> declaration
Rule 64    external_declaration -> pp_directive
Rule 65    external_declaration -> pppragma_directive
Rule 66    external_declaration -> SEMI
Rule 67    external_declaration -> static_assert
Rule 68    static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN
Rule 69    static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN
Rule 70    pp_directive -> PPHASH
Rule 71    pppragma_directive -> PPPRAGMA
Rule 72    pppragma_directive -> PPPRAGMA PPPRAGMASTR
Rule 73    pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN
Rule 74    pppragma_directive_list -> pppragma_directive
Rule 75    pppragma_directive_list -> pppragma_directive_list pppragma_directive
Rule 76    function_definition -> id_declarator declaration_list_opt compound_statement
Rule 77    function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement
Rule 78    statement -> labeled_statement
Rule 79    statement -> expression_statement
Rule 80    statement -> compound_statement
Rule 81    statement -> selection_statement
Rule 82    statement -> iteration_statement
Rule 83    statement -> jump_statement
Rule 84    statement -> pppragma_directive
Rule 85    statement -> static_assert
Rule 86    pragmacomp_or_statement -> pppragma_directive_list statement
Rule 87    pragmacomp_or_statement -> statement
Rule 88    decl_body -> declaration_specifiers init_declarator_list_opt
Rule 89    decl_body -> declaration_specifiers_no_type id_init_declarator_list_opt
Rule 90    declaration -> decl_body SEMI
Rule 91    declaration_list -> declaration
Rule 92    declaration_list -> declaration_list declaration
Rule 93    declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt
Rule 94    declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt
Rule 95    declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt
Rule 96    declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt
Rule 97    declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt
Rule 98    declaration_specifiers -> declaration_specifiers type_qualifier
Rule 99    declaration_specifiers -> declaration_specifiers storage_class_specifier
Rule 100   declaration_specifiers -> declaration_specifiers function_specifier
Rule 101   declaration_specifiers -> declaration_specifiers type_specifier_no_typeid
Rule 102   declaration_specifiers -> type_specifier
Rule 103   declaration_specifiers -> declaration_specifiers_no_type type_specifier
Rule 104   declaration_specifiers -> declaration_specifiers alignment_specifier
Rule 105   storage_class_specifier -> AUTO
Rule 106   storage_class_specifier -> REGISTER
Rule 107   storage_class_specifier -> STATIC
Rule 108   storage_class_specifier -> EXTERN
Rule 109   storage_class_specifier -> TYPEDEF
Rule 110   storage_class_specifier -> _THREAD_LOCAL
Rule 111   function_specifier -> INLINE
Rule 112   function_specifier -> _NORETURN
Rule 113   type_specifier_no_typeid -> VOID
Rule 114   type_specifier_no_typeid -> _BOOL
Rule 115   type_specifier_no_typeid -> CHAR
Rule 116   type_specifier_no_typeid -> SHORT
Rule 117   type_specifier_no_typeid -> INT
Rule 118   type_specifier_no_typeid -> LONG
Rule 119   type_specifier_no_typeid -> FLOAT
Rule 120   type_specifier_no_typeid -> DOUBLE
Rule 121   type_specifier_no_typeid -> _COMPLEX
Rule 122   type_specifier_no_typeid -> SIGNED
Rule 123   type_specifier_no_typeid -> UNSIGNED
Rule 124   type_specifier_no_typeid -> __INT128
Rule 125   type_specifier -> typedef_name
Rule 126   type_specifier -> enum_specifier
Rule 127   type_specifier -> struct_or_union_specifier
Rule 128   type_specifier -> type_specifier_no_typeid
Rule 129   type_specifier -> atomic_specifier
Rule 130   atomic_specifier -> _ATOMIC LPAREN type_name RPAREN
Rule 131   type_qualifier -> CONST
Rule 132   type_qualifier -> RESTRICT
Rule 133   type_qualifier -> VOLATILE
Rule 134   type_qualifier -> _ATOMIC
Rule 135   init_declarator_list -> init_declarator
Rule 136   init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 137   init_declarator -> declarator
Rule 138   init_declarator -> declarator EQUALS initializer
Rule 139   id_init_declarator_list -> id_init_declarator
Rule 140   id_init_declarator_list -> id_init_declarator_list COMMA init_declarator
Rule 141   id_init_declarator -> id_declarator
Rule 142   id_init_declarator -> id_declarator EQUALS initializer
Rule 143   specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid
Rule 144   specifier_qualifier_list -> specifier_qualifier_list type_qualifier
Rule 145   specifier_qualifier_list -> type_specifier
Rule 146   specifier_qualifier_list -> type_qualifier_list type_specifier
Rule 147   specifier_qualifier_list -> alignment_specifier
Rule 148   specifier_qualifier_list -> specifier_qualifier_list alignment_specifier
Rule 149   struct_or_union_specifier -> struct_or_union ID
Rule 150   struct_or_union_specifier -> struct_or_union TYPEID
Rule 151   struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close
Rule 152   struct_or_union_specifier -> struct_or_union brace_open brace_close
Rule 153   struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close
Rule 154   struct_or_union_specifier -> struct_or_union ID brace_open brace_close
Rule 155   struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close
Rule 156   struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close
Rule 157   struct_or_union -> STRUCT
Rule 158   struct_or_union -> UNION
Rule 159   struct_declaration_list -> struct_declaration
Rule 160   struct_declaration_list -> struct_declaration_list struct_declaration
Rule 161   struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI
Rule 162   struct_declaration -> SEMI
Rule 163   struct_declaration -> pppragma_directive
Rule 164   struct_declarator_list -> struct_declarator
Rule 165   struct_declarator_list -> struct_declarator_list COMMA struct_declarator
Rule 166   struct_declarator -> declarator
Rule 167   struct_declarator -> declarator COLON constant_expression
Rule 168   struct_declarator -> COLON constant_expression
Rule 169   enum_specifier -> ENUM ID
Rule 170   enum_specifier -> ENUM TYPEID
Rule 171   enum_specifier -> ENUM brace_open enumerator_list brace_close
Rule 172   enum_specifier -> ENUM ID brace_open enumerator_list brace_close
Rule 173   enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close
Rule 174   enumerator_list -> enumerator
Rule 175   enumerator_list -> enumerator_list COMMA
Rule 176   enumerator_list -> enumerator_list COMMA enumerator
Rule 177   alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN
Rule 178   alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN
Rule 179   enumerator -> ID
Rule 180   enumerator -> ID EQUALS constant_expression
Rule 181   declarator -> id_declarator
Rule 182   declarator -> typeid_declarator
Rule 183   pointer -> TIMES type_qualifier_list_opt
Rule 184   pointer -> TIMES type_qualifier_list_opt pointer
Rule 185   type_qualifier_list -> type_qualifier
Rule 186   type_qualifier_list -> type_qualifier_list type_qualifier
Rule 187   parameter_type_list -> parameter_list
Rule 188   parameter_type_list -> parameter_list COMMA ELLIPSIS
Rule 189   parameter_list -> parameter_declaration
Rule 190   parameter_list -> parameter_list COMMA parameter_declaration
Rule 191   parameter_declaration -> declaration_specifiers id_declarator
Rule 192   parameter_declaration -> declaration_specifiers typeid_noparen_declarator
Rule 193   parameter_declaration -> declaration_specifiers abstract_declarator_opt
Rule 194   identifier_list -> identifier
Rule 195   identifier_list -> identifier_list COMMA identifier
Rule 196   initializer -> assignment_expression
Rule 197   initializer -> brace_open initializer_list_opt brace_close
Rule 198   initializer -> brace_open initializer_list COMMA brace_close
Rule 199   initializer_list -> designation_opt initializer
Rule 200   initializer_list -> initializer_list COMMA designation_opt initializer
Rule 201   designation -> designator_list EQUALS
Rule 202   designator_list -> designator
Rule 203   designator_list -> designator_list designator
Rule 204   designator -> LBRACKET constant_expression RBRACKET
Rule 205   designator -> PERIOD identifier
Rule 206   type_name -> specifier_qualifier_list abstract_declarator_opt
Rule 207   abstract_declarator -> pointer
Rule 208   abstract_declarator -> pointer direct_abstract_declarator
Rule 209   abstract_declarator -> direct_abstract_declarator
Rule 210   direct_abstract_declarator -> LPAREN abstract_declarator RPAREN
Rule 211   direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
Rule 212   direct_abstract_declarator -> LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
Rule 213   direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET
Rule 214   direct_abstract_declarator -> LBRACKET TIMES RBRACKET
Rule 215   direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
Rule 216   direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN
Rule 217   block_item -> declaration
Rule 218   block_item -> statement
Rule 219   block_item_list -> block_item
Rule 220   block_item_list -> block_item_list block_item
Rule 221   compound_statement -> brace_open block_item_list_opt brace_close
Rule 222   labeled_statement -> ID COLON pragmacomp_or_statement
Rule 223   labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement
Rule 224   labeled_statement -> DEFAULT COLON pragmacomp_or_statement
Rule 225   selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement
Rule 226   selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
Rule 227   selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement
Rule 228   iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement
Rule 229   iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
Rule 230   iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
Rule 231   iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
Rule 232   jump_statement -> GOTO ID SEMI
Rule 233   jump_statement -> BREAK SEMI
Rule 234   jump_statement -> CONTINUE SEMI
Rule 235   jump_statement -> RETURN expression SEMI
Rule 236   jump_statement -> RETURN SEMI
Rule 237   expression_statement -> expression_opt SEMI
Rule 238   expression -> assignment_expression
Rule 239   expression -> expression COMMA assignment_expression
Rule 240   assignment_expression -> LPAREN compound_statement RPAREN
Rule 241   typedef_name -> TYPEID
Rule 242   assignment_expression -> conditional_expression
Rule 243   assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 244   assignment_operator -> EQUALS
Rule 245   assignment_operator -> XOREQUAL
Rule 246   assignment_operator -> TIMESEQUAL
Rule 247   assignment_operator -> DIVEQUAL
Rule 248   assignment_operator -> MODEQUAL
Rule 249   assignment_operator -> PLUSEQUAL
Rule 250   assignment_operator -> MINUSEQUAL
Rule 251   assignment_operator -> LSHIFTEQUAL
Rule 252   assignment_operator -> RSHIFTEQUAL
Rule 253   assignment_operator -> ANDEQUAL
Rule 254   assignment_operator -> OREQUAL
Rule 255   constant_expression -> conditional_expression
Rule 256   conditional_expression -> binary_expression
Rule 257   conditional_expression -> binary_expression CONDOP expression COLON conditional_expression
Rule 258   binary_expression -> cast_expression
Rule 259   binary_expression -> binary_expression TIMES binary_expression
Rule 260   binary_expression -> binary_expression DIVIDE binary_expression
Rule 261   binary_expression -> binary_expression MOD binary_expression
Rule 262   binary_expression -> binary_expression PLUS binary_expression
Rule 263   binary_expression -> binary_expression MINUS binary_expression
Rule 264   binary_expression -> binary_expression RSHIFT binary_expression
Rule 265   binary_expression -> binary_expression LSHIFT binary_expression
Rule 266   binary_expression -> binary_expression LT binary_expression
Rule 267   binary_expression -> binary_expression LE binary_expression
Rule 268   binary_expression -> binary_expression GE binary_expression
Rule 269   binary_expression -> binary_expression GT binary_expression
Rule 270   binary_expression -> binary_expression EQ binary_expression
Rule 271   binary_expression -> binary_expression NE binary_expression
Rule 272   binary_expression -> binary_expression AND binary_expression
Rule 273   binary_expression -> binary_expression OR binary_expression
Rule 274   binary_expression -> binary_expression XOR binary_expression
Rule 275   binary_expression -> binary_expression LAND binary_expression
Rule 276   binary_expression -> binary_expression LOR binary_expression
Rule 277   cast_expression -> unary_expression
Rule 278   cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 279   unary_expression -> postfix_expression
Rule 280   unary_expression -> PLUSPLUS unary_expression
Rule 281   unary_expression -> MINUSMINUS unary_expression
Rule 282   unary_expression -> unary_operator cast_expression
Rule 283   unary_expression -> SIZEOF unary_expression
Rule 284   unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 285   unary_expression -> _ALIGNOF LPAREN type_name RPAREN
Rule 286   unary_operator -> AND
Rule 287   unary_operator -> TIMES
Rule 288   unary_operator -> PLUS
Rule 289   unary_operator -> MINUS
Rule 290   unary_operator -> NOT
Rule 291   unary_operator -> LNOT
Rule 292   postfix_expression -> primary_expression
Rule 293   postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 294   postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 295   postfix_expression -> postfix_expression LPAREN RPAREN
Rule 296   postfix_expression -> postfix_expression PERIOD ID
Rule 297   postfix_expression -> postfix_expression PERIOD TYPEID
Rule 298   postfix_expression -> postfix_expression ARROW ID
Rule 299   postfix_expression -> postfix_expression ARROW TYPEID
Rule 300   postfix_expression -> postfix_expression PLUSPLUS
Rule 301   postfix_expression -> postfix_expression MINUSMINUS
Rule 302   postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close
Rule 303   postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
Rule 304   primary_expression -> identifier
Rule 305   primary_expression -> constant
Rule 306   primary_expression -> unified_string_literal
Rule 307   primary_expression -> unified_wstring_literal
Rule 308   primary_expression -> LPAREN expression RPAREN
Rule 309   primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
Rule 310   offsetof_member_designator -> identifier
Rule 311   offsetof_member_designator -> offsetof_member_designator PERIOD identifier
Rule 312   offsetof_member_designator -> offsetof_member_designator LBRACKET expression RBRACKET
Rule 313   argument_expression_list -> assignment_expression
Rule 314   argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 315   identifier -> ID
Rule 316   constant -> INT_CONST_DEC
Rule 317   constant -> INT_CONST_OCT
Rule 318   constant -> INT_CONST_HEX
Rule 319   constant -> INT_CONST_BIN
Rule 320   constant -> INT_CONST_CHAR
Rule 321   constant -> FLOAT_CONST
Rule 322   constant -> HEX_FLOAT_CONST
Rule 323   constant -> CHAR_CONST
Rule 324   constant -> WCHAR_CONST
Rule 325   constant -> U8CHAR_CONST
Rule 326   constant -> U16CHAR_CONST
Rule 327   constant -> U32CHAR_CONST
Rule 328   unified_string_literal -> STRING_LITERAL
Rule 329   unified_string_literal -> unified_string_literal STRING_LITERAL
Rule 330   unified_wstring_literal -> WSTRING_LITERAL
Rule 331   unified_wstring_literal -> U8STRING_LITERAL
Rule 332   unified_wstring_literal -> U16STRING_LITERAL
Rule 333   unified_wstring_literal -> U32STRING_LITERAL
Rule 334   unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL
Rule 335   unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL
Rule 336   unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL
Rule 337   unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL
Rule 338   brace_open -> LBRACE
Rule 339   brace_close -> RBRACE
Rule 340   empty -> <empty>

Terminals, with rules where they appear

AND                  : 272 286
ANDEQUAL             : 253
ARROW                : 298 299
AUTO                 : 105
BREAK                : 233
CASE                 : 223
CHAR                 : 115
CHAR_CONST           : 323
COLON                : 167 168 222 223 224 257
COMMA                : 68 136 140 165 175 176 188 190 195 198 200 239 303 309 314
CONDOP               : 257
CONST                : 131
CONTINUE             : 234
DEFAULT              : 224
DIVEQUAL             : 247
DIVIDE               : 260
DO                   : 229
DOUBLE               : 120
ELLIPSIS             : 188
ELSE                 : 226
ENUM                 : 169 170 171 172 173
EQ                   : 270
EQUALS               : 138 142 180 201 244
EXTERN               : 108
FLOAT                : 119
FLOAT_CONST          : 321
FOR                  : 230 231
GE                   : 268
GOTO                 : 232
GT                   : 269
HEX_FLOAT_CONST      : 322
ID                   : 29 149 153 154 169 172 179 180 222 232 296 298 315
IF                   : 225 226
INLINE               : 111
INT                  : 117
INT_CONST_BIN        : 319
INT_CONST_CHAR       : 320
INT_CONST_DEC        : 316
INT_CONST_HEX        : 318
INT_CONST_OCT        : 317
LAND                 : 275
LBRACE               : 338
LBRACKET             : 31 32 33 34 39 40 41 42 46 47 48 49 204 211 212 213 214 293 312
LE                   : 267
LNOT                 : 291
LONG                 : 118
LOR                  : 276
LPAREN               : 30 35 36 38 43 44 50 51 68 69 73 130 177 178 210 215 216 225 226 227 228 229 230 231 240 278 284 285 294 295 302 303 308 309
LSHIFT               : 265
LSHIFTEQUAL          : 251
LT                   : 266
MINUS                : 263 289
MINUSEQUAL           : 250
MINUSMINUS           : 281 301
MOD                  : 261
MODEQUAL             : 248
NE                   : 271
NOT                  : 290
OFFSETOF             : 309
OR                   : 273
OREQUAL              : 254
PERIOD               : 205 296 297 311
PLUS                 : 262 288
PLUSEQUAL            : 249
PLUSPLUS             : 280 300
PPHASH               : 70
PPPRAGMA             : 71 72
PPPRAGMASTR          : 72
RBRACE               : 339
RBRACKET             : 31 32 33 34 39 40 41 42 46 47 48 49 204 211 212 213 214 293 312
REGISTER             : 106
RESTRICT             : 132
RETURN               : 235 236
RPAREN               : 30 35 36 38 43 44 50 51 68 69 73 130 177 178 210 215 216 225 226 227 228 229 230 231 240 278 284 285 294 295 302 303 308 309
RSHIFT               : 264
RSHIFTEQUAL          : 252
SEMI                 : 66 90 161 162 229 230 230 231 232 233 234 235 236 237
SHORT                : 116
SIGNED               : 122
SIZEOF               : 283 284
STATIC               : 32 33 40 41 47 48 107
STRING_LITERAL       : 328 329
STRUCT               : 157
SWITCH               : 227
TIMES                : 34 42 49 183 184 213 214 259 287
TIMESEQUAL           : 246
TYPEDEF              : 109
TYPEID               : 37 45 150 155 156 170 173 241 297 299
U16CHAR_CONST        : 326
U16STRING_LITERAL    : 332 336
U32CHAR_CONST        : 327
U32STRING_LITERAL    : 333 337
U8CHAR_CONST         : 325
U8STRING_LITERAL     : 331 335
UNION                : 158
UNSIGNED             : 123
VOID                 : 113
VOLATILE             : 133
WCHAR_CONST          : 324
WHILE                : 228 229
WSTRING_LITERAL      : 330 334
XOR                  : 274
XOREQUAL             : 245
_ALIGNAS             : 177 178
_ALIGNOF             : 285
_ATOMIC              : 130 134
_BOOL                : 114
_COMPLEX             : 121
_NORETURN            : 112
_PRAGMA              : 73
_STATIC_ASSERT       : 68 69
_THREAD_LOCAL        : 110
__INT128             : 124
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 2 210
abstract_declarator_opt : 193 206
alignment_specifier  : 97 104 147 148
argument_expression_list : 294 314
assignment_expression : 4 32 33 40 41 47 48 196 238 239 243 313 314
assignment_expression_opt : 31 39 46 211 212
assignment_operator  : 243
atomic_specifier     : 96 129
binary_expression    : 256 257 259 259 260 260 261 261 262 262 263 263 264 264 265 265 266 266 267 267 268 268 269 269 270 270 271 271 272 272 273 273 274 274 275 275 276 276
block_item           : 219 220
block_item_list      : 6 220
block_item_list_opt  : 221
brace_close          : 151 152 153 154 155 156 171 172 173 197 198 221 302 303
brace_open           : 151 152 153 154 155 156 171 172 173 197 198 221 302 303
cast_expression      : 258 278 282
compound_statement   : 76 77 80 240
conditional_expression : 242 255 257
constant             : 305
constant_expression  : 68 69 167 168 178 180 204 223
decl_body            : 90
declaration          : 63 91 92 217 231
declaration_list     : 8 92
declaration_list_opt : 76 77
declaration_specifiers : 77 88 98 99 100 101 104 191 192 193
declaration_specifiers_no_type : 10 89 103
declaration_specifiers_no_type_opt : 93 94 95 96 97
declarator           : 137 138 166 167
designation          : 12
designation_opt      : 199 200
designator           : 202 203
designator_list      : 201 203
direct_abstract_declarator : 208 209 211 213 215
direct_id_declarator : 31 32 33 34 35 36 52 53
direct_typeid_declarator : 39 40 41 42 43 44 54 55
direct_typeid_noparen_declarator : 46 47 48 49 50 51 56 57
empty                : 1 3 5 7 9 11 13 15 17 19 21 23 25 27 59
enum_specifier       : 126
enumerator           : 174 176
enumerator_list      : 171 172 173 175 176
expression           : 14 225 226 227 228 229 235 239 257 293 308 312
expression_opt       : 230 230 230 231 231 237
expression_statement : 79
external_declaration : 60 61
function_definition  : 62
function_specifier   : 95 100
id_declarator        : 30 76 77 141 142 181 191
id_init_declarator   : 139
id_init_declarator_list : 16 140
id_init_declarator_list_opt : 89
identifier           : 194 195 205 304 310 311
identifier_list      : 18 195
identifier_list_opt  : 36 44 51
init_declarator      : 135 136 140
init_declarator_list : 20 136
init_declarator_list_opt : 88
initializer          : 138 142 199 200
initializer_list     : 22 198 200 302 303
initializer_list_opt : 197
iteration_statement  : 82
jump_statement       : 83
labeled_statement    : 78
offsetof_member_designator : 309 311 312
parameter_declaration : 189 190
parameter_list       : 187 188 190
parameter_type_list  : 24 35 43 50
parameter_type_list_opt : 215 216
pointer              : 53 55 57 184 207 208
postfix_expression   : 279 293 294 295 296 297 298 299 300 301
pp_directive         : 64
pppragma_directive   : 65 74 75 84 163
pppragma_directive_list : 75 86
pragmacomp_or_statement : 222 223 224 225 226 227 228 229 230 231
primary_expression   : 292
selection_statement  : 81
specifier_qualifier_list : 143 144 148 161 206
statement            : 86 87 218 226
static_assert        : 67 85
storage_class_specifier : 94 99
struct_declaration   : 159 160
struct_declaration_list : 151 153 155 160
struct_declarator    : 164 165
struct_declarator_list : 26 165
struct_declarator_list_opt : 161
struct_or_union      : 149 150 151 152 153 154 155 156
struct_or_union_specifier : 127
translation_unit     : 58 61
translation_unit_or_empty : 0
type_name            : 130 177 278 284 285 302 303 309
type_qualifier       : 93 98 144 185 186
type_qualifier_list  : 28 33 41 48 146 186
type_qualifier_list_opt : 31 32 34 39 40 42 46 47 49 183 184 212
type_specifier       : 102 103 145 146
type_specifier_no_typeid : 101 128 143
typedef_name         : 125
typeid_declarator    : 38 182
typeid_noparen_declarator : 192
unary_expression     : 243 277 280 281 283
unary_operator       : 282
unified_string_literal : 68 73 306 329
unified_wstring_literal : 307 334 335 336 337

Parsing method: LALR

state 0

    (0) S' -> . translation_unit_or_empty
    (58) translation_unit_or_empty -> . translation_unit
    (59) translation_unit_or_empty -> . empty
    (60) translation_unit -> . external_declaration
    (61) translation_unit -> . translation_unit external_declaration
    (340) empty -> .
    (62) external_declaration -> . function_definition
    (63) external_declaration -> . declaration
    (64) external_declaration -> . pp_directive
    (65) external_declaration -> . pppragma_directive
    (66) external_declaration -> . SEMI
    (67) external_declaration -> . static_assert
    (76) function_definition -> . id_declarator declaration_list_opt compound_statement
    (77) function_definition -> . declaration_specifiers id_declarator declaration_list_opt compound_statement
    (90) declaration -> . decl_body SEMI
    (70) pp_directive -> . PPHASH
    (71) pppragma_directive -> . PPPRAGMA
    (72) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (73) pppragma_directive -> . _PRAGMA LPAREN unified_string_literal RPAREN
    (68) static_assert -> . _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN
    (69) static_assert -> . _STATIC_ASSERT LPAREN constant_expression RPAREN
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (98) declaration_specifiers -> . declaration_specifiers type_qualifier
    (99) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (100) declaration_specifiers -> . declaration_specifiers function_specifier
    (101) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (102) declaration_specifiers -> . type_specifier
    (103) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (104) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (88) decl_body -> . declaration_specifiers init_declarator_list_opt
    (89) decl_body -> . declaration_specifiers_no_type id_init_declarator_list_opt
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (183) pointer -> . TIMES type_qualifier_list_opt
    (184) pointer -> . TIMES type_qualifier_list_opt pointer
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (93) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (94) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (95) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (96) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (97) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) storage_class_specifier -> . STATIC
    (108) storage_class_specifier -> . EXTERN
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . _THREAD_LOCAL
    (111) function_specifier -> . INLINE
    (112) function_specifier -> . _NORETURN
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION

    $end            reduce using rule 340 (empty -> .)
    SEMI            shift and go to state 9
    PPHASH          shift and go to state 14
    PPPRAGMA        shift and go to state 15
    _PRAGMA         shift and go to state 16
    _STATIC_ASSERT  shift and go to state 18
    ID              shift and go to state 28
    LPAREN          shift and go to state 17
    TIMES           shift and go to state 30
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ATOMIC         shift and go to state 50
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    AUTO            shift and go to state 54
    REGISTER        shift and go to state 55
    STATIC          shift and go to state 29
    EXTERN          shift and go to state 56
    TYPEDEF         shift and go to state 57
    _THREAD_LOCAL   shift and go to state 58
    INLINE          shift and go to state 59
    _NORETURN       shift and go to state 60
    _ALIGNAS        shift and go to state 61
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63

    translation_unit_or_empty      shift and go to state 1
    translation_unit               shift and go to state 2
    empty                          shift and go to state 3
    external_declaration           shift and go to state 4
    function_definition            shift and go to state 5
    declaration                    shift and go to state 6
    pp_directive                   shift and go to state 7
    pppragma_directive             shift and go to state 8
    static_assert                  shift and go to state 10
    id_declarator                  shift and go to state 11
    declaration_specifiers         shift and go to state 12
    decl_body                      shift and go to state 13
    direct_id_declarator           shift and go to state 19
    pointer                        shift and go to state 20
    type_qualifier                 shift and go to state 21
    storage_class_specifier        shift and go to state 22
    function_specifier             shift and go to state 23
    type_specifier_no_typeid       shift and go to state 24
    type_specifier                 shift and go to state 25
    declaration_specifiers_no_type shift and go to state 26
    alignment_specifier            shift and go to state 27
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    atomic_specifier               shift and go to state 34
    struct_or_union                shift and go to state 37

state 1

    (0) S' -> translation_unit_or_empty .



state 2

    (58) translation_unit_or_empty -> translation_unit .
    (61) translation_unit -> translation_unit . external_declaration
    (62) external_declaration -> . function_definition
    (63) external_declaration -> . declaration
    (64) external_declaration -> . pp_directive
    (65) external_declaration -> . pppragma_directive
    (66) external_declaration -> . SEMI
    (67) external_declaration -> . static_assert
    (76) function_definition -> . id_declarator declaration_list_opt compound_statement
    (77) function_definition -> . declaration_specifiers id_declarator declaration_list_opt compound_statement
    (90) declaration -> . decl_body SEMI
    (70) pp_directive -> . PPHASH
    (71) pppragma_directive -> . PPPRAGMA
    (72) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (73) pppragma_directive -> . _PRAGMA LPAREN unified_string_literal RPAREN
    (68) static_assert -> . _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN
    (69) static_assert -> . _STATIC_ASSERT LPAREN constant_expression RPAREN
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (98) declaration_specifiers -> . declaration_specifiers type_qualifier
    (99) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (100) declaration_specifiers -> . declaration_specifiers function_specifier
    (101) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (102) declaration_specifiers -> . type_specifier
    (103) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (104) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (88) decl_body -> . declaration_specifiers init_declarator_list_opt
    (89) decl_body -> . declaration_specifiers_no_type id_init_declarator_list_opt
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (183) pointer -> . TIMES type_qualifier_list_opt
    (184) pointer -> . TIMES type_qualifier_list_opt pointer
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (93) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (94) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (95) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (96) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (97) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) storage_class_specifier -> . STATIC
    (108) storage_class_specifier -> . EXTERN
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . _THREAD_LOCAL
    (111) function_specifier -> . INLINE
    (112) function_specifier -> . _NORETURN
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION

    $end            reduce using rule 58 (translation_unit_or_empty -> translation_unit .)
    SEMI            shift and go to state 9
    PPHASH          shift and go to state 14
    PPPRAGMA        shift and go to state 15
    _PRAGMA         shift and go to state 16
    _STATIC_ASSERT  shift and go to state 18
    ID              shift and go to state 28
    LPAREN          shift and go to state 17
    TIMES           shift and go to state 30
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ATOMIC         shift and go to state 50
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    AUTO            shift and go to state 54
    REGISTER        shift and go to state 55
    STATIC          shift and go to state 29
    EXTERN          shift and go to state 56
    TYPEDEF         shift and go to state 57
    _THREAD_LOCAL   shift and go to state 58
    INLINE          shift and go to state 59
    _NORETURN       shift and go to state 60
    _ALIGNAS        shift and go to state 61
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63

    external_declaration           shift and go to state 64
    function_definition            shift and go to state 5
    declaration                    shift and go to state 6
    pp_directive                   shift and go to state 7
    pppragma_directive             shift and go to state 8
    static_assert                  shift and go to state 10
    id_declarator                  shift and go to state 11
    declaration_specifiers         shift and go to state 12
    decl_body                      shift and go to state 13
    direct_id_declarator           shift and go to state 19
    pointer                        shift and go to state 20
    type_qualifier                 shift and go to state 21
    storage_class_specifier        shift and go to state 22
    function_specifier             shift and go to state 23
    type_specifier_no_typeid       shift and go to state 24
    type_specifier                 shift and go to state 25
    declaration_specifiers_no_type shift and go to state 26
    alignment_specifier            shift and go to state 27
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    atomic_specifier               shift and go to state 34
    struct_or_union                shift and go to state 37

state 3

    (59) translation_unit_or_empty -> empty .

    $end            reduce using rule 59 (translation_unit_or_empty -> empty .)


state 4

    (60) translation_unit -> external_declaration .

    SEMI            reduce using rule 60 (translation_unit -> external_declaration .)
    PPHASH          reduce using rule 60 (translation_unit -> external_declaration .)
    PPPRAGMA        reduce using rule 60 (translation_unit -> external_declaration .)
    _PRAGMA         reduce using rule 60 (translation_unit -> external_declaration .)
    _STATIC_ASSERT  reduce using rule 60 (translation_unit -> external_declaration .)
    ID              reduce using rule 60 (translation_unit -> external_declaration .)
    LPAREN          reduce using rule 60 (translation_unit -> external_declaration .)
    TIMES           reduce using rule 60 (translation_unit -> external_declaration .)
    TYPEID          reduce using rule 60 (translation_unit -> external_declaration .)
    ENUM            reduce using rule 60 (translation_unit -> external_declaration .)
    VOID            reduce using rule 60 (translation_unit -> external_declaration .)
    _BOOL           reduce using rule 60 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 60 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 60 (translation_unit -> external_declaration .)
    INT             reduce using rule 60 (translation_unit -> external_declaration .)
    LONG            reduce using rule 60 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 60 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 60 (translation_unit -> external_declaration .)
    _COMPLEX        reduce using rule 60 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 60 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 60 (translation_unit -> external_declaration .)
    __INT128        reduce using rule 60 (translation_unit -> external_declaration .)
    _ATOMIC         reduce using rule 60 (translation_unit -> external_declaration .)
    CONST           reduce using rule 60 (translation_unit -> external_declaration .)
    RESTRICT        reduce using rule 60 (translation_unit -> external_declaration .)
    VOLATILE        reduce using rule 60 (translation_unit -> external_declaration .)
    AUTO            reduce using rule 60 (translation_unit -> external_declaration .)
    REGISTER        reduce using rule 60 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 60 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 60 (translation_unit -> external_declaration .)
    TYPEDEF         reduce using rule 60 (translation_unit -> external_declaration .)
    _THREAD_LOCAL   reduce using rule 60 (translation_unit -> external_declaration .)
    INLINE          reduce using rule 60 (translation_unit -> external_declaration .)
    _NORETURN       reduce using rule 60 (translation_unit -> external_declaration .)
    _ALIGNAS        reduce using rule 60 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 60 (translation_unit -> external_declaration .)
    UNION           reduce using rule 60 (translation_unit -> external_declaration .)
    $end            reduce using rule 60 (translation_unit -> external_declaration .)


state 5

    (62) external_declaration -> function_definition .

    SEMI            reduce using rule 62 (external_declaration -> function_definition .)
    PPHASH          reduce using rule 62 (external_declaration -> function_definition .)
    PPPRAGMA        reduce using rule 62 (external_declaration -> function_definition .)
    _PRAGMA         reduce using rule 62 (external_declaration -> function_definition .)
    _STATIC_ASSERT  reduce using rule 62 (external_declaration -> function_definition .)
    ID              reduce using rule 62 (external_declaration -> function_definition .)
    LPAREN          reduce using rule 62 (external_declaration -> function_definition .)
    TIMES           reduce using rule 62 (external_declaration -> function_definition .)
    TYPEID          reduce using rule 62 (external_declaration -> function_definition .)
    ENUM            reduce using rule 62 (external_declaration -> function_definition .)
    VOID            reduce using rule 62 (external_declaration -> function_definition .)
    _BOOL           reduce using rule 62 (external_declaration -> function_definition .)
    CHAR            reduce using rule 62 (external_declaration -> function_definition .)
    SHORT           reduce using rule 62 (external_declaration -> function_definition .)
    INT             reduce using rule 62 (external_declaration -> function_definition .)
    LONG            reduce using rule 62 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 62 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 62 (external_declaration -> function_definition .)
    _COMPLEX        reduce using rule 62 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 62 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 62 (external_declaration -> function_definition .)
    __INT128        reduce using rule 62 (external_declaration -> function_definition .)
    _ATOMIC         reduce using rule 62 (external_declaration -> function_definition .)
    CONST           reduce using rule 62 (external_declaration -> function_definition .)
    RESTRICT        reduce using rule 62 (external_declaration -> function_definition .)
    VOLATILE        reduce using rule 62 (external_declaration -> function_definition .)
    AUTO            reduce using rule 62 (external_declaration -> function_definition .)
    REGISTER        reduce using rule 62 (external_declaration -> function_definition .)
    STATIC          reduce using rule 62 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 62 (external_declaration -> function_definition .)
    TYPEDEF         reduce using rule 62 (external_declaration -> function_definition .)
    _THREAD_LOCAL   reduce using rule 62 (external_declaration -> function_definition .)
    INLINE          reduce using rule 62 (external_declaration -> function_definition .)
    _NORETURN       reduce using rule 62 (external_declaration -> function_definition .)
    _ALIGNAS        reduce using rule 62 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 62 (external_declaration -> function_definition .)
    UNION           reduce using rule 62 (external_declaration -> function_definition .)
    $end            reduce using rule 62 (external_declaration -> function_definition .)


state 6

    (63) external_declaration -> declaration .

    SEMI            reduce using rule 63 (external_declaration -> declaration .)
    PPHASH          reduce using rule 63 (external_declaration -> declaration .)
    PPPRAGMA        reduce using rule 63 (external_declaration -> declaration .)
    _PRAGMA         reduce using rule 63 (external_declaration -> declaration .)
    _STATIC_ASSERT  reduce using rule 63 (external_declaration -> declaration .)
    ID              reduce using rule 63 (external_declaration -> declaration .)
    LPAREN          reduce using rule 63 (external_declaration -> declaration .)
    TIMES           reduce using rule 63 (external_declaration -> declaration .)
    TYPEID          reduce using rule 63 (external_declaration -> declaration .)
    ENUM            reduce using rule 63 (external_declaration -> declaration .)
    VOID            reduce using rule 63 (external_declaration -> declaration .)
    _BOOL           reduce using rule 63 (external_declaration -> declaration .)
    CHAR            reduce using rule 63 (external_declaration -> declaration .)
    SHORT           reduce using rule 63 (external_declaration -> declaration .)
    INT             reduce using rule 63 (external_declaration -> declaration .)
    LONG            reduce using rule 63 (external_declaration -> declaration .)
    FLOAT           reduce using rule 63 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 63 (external_declaration -> declaration .)
    _COMPLEX        reduce using rule 63 (external_declaration -> declaration .)
    SIGNED          reduce using rule 63 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 63 (external_declaration -> declaration .)
    __INT128        reduce using rule 63 (external_declaration -> declaration .)
    _ATOMIC         reduce using rule 63 (external_declaration -> declaration .)
    CONST           reduce using rule 63 (external_declaration -> declaration .)
    RESTRICT        reduce using rule 63 (external_declaration -> declaration .)
    VOLATILE        reduce using rule 63 (external_declaration -> declaration .)
    AUTO            reduce using rule 63 (external_declaration -> declaration .)
    REGISTER        reduce using rule 63 (external_declaration -> declaration .)
    STATIC          reduce using rule 63 (external_declaration -> declaration .)
    EXTERN          reduce using rule 63 (external_declaration -> declaration .)
    TYPEDEF         reduce using rule 63 (external_declaration -> declaration .)
    _THREAD_LOCAL   reduce using rule 63 (external_declaration -> declaration .)
    INLINE          reduce using rule 63 (external_declaration -> declaration .)
    _NORETURN       reduce using rule 63 (external_declaration -> declaration .)
    _ALIGNAS        reduce using rule 63 (external_declaration -> declaration .)
    STRUCT          reduce using rule 63 (external_declaration -> declaration .)
    UNION           reduce using rule 63 (external_declaration -> declaration .)
    $end            reduce using rule 63 (external_declaration -> declaration .)


state 7

    (64) external_declaration -> pp_directive .

    SEMI            reduce using rule 64 (external_declaration -> pp_directive .)
    PPHASH          reduce using rule 64 (external_declaration -> pp_directive .)
    PPPRAGMA        reduce using rule 64 (external_declaration -> pp_directive .)
    _PRAGMA         reduce using rule 64 (external_declaration -> pp_directive .)
    _STATIC_ASSERT  reduce using rule 64 (external_declaration -> pp_directive .)
    ID              reduce using rule 64 (external_declaration -> pp_directive .)
    LPAREN          reduce using rule 64 (external_declaration -> pp_directive .)
    TIMES           reduce using rule 64 (external_declaration -> pp_directive .)
    TYPEID          reduce using rule 64 (external_declaration -> pp_directive .)
    ENUM            reduce using rule 64 (external_declaration -> pp_directive .)
    VOID            reduce using rule 64 (external_declaration -> pp_directive .)
    _BOOL           reduce using rule 64 (external_declaration -> pp_directive .)
    CHAR            reduce using rule 64 (external_declaration -> pp_directive .)
    SHORT           reduce using rule 64 (external_declaration -> pp_directive .)
    INT             reduce using rule 64 (external_declaration -> pp_directive .)
    LONG            reduce using rule 64 (external_declaration -> pp_directive .)
    FLOAT           reduce using rule 64 (external_declaration -> pp_directive .)
    DOUBLE          reduce using rule 64 (external_declaration -> pp_directive .)
    _COMPLEX        reduce using rule 64 (external_declaration -> pp_directive .)
    SIGNED          reduce using rule 64 (external_declaration -> pp_directive .)
    UNSIGNED        reduce using rule 64 (external_declaration -> pp_directive .)
    __INT128        reduce using rule 64 (external_declaration -> pp_directive .)
    _ATOMIC         reduce using rule 64 (external_declaration -> pp_directive .)
    CONST           reduce using rule 64 (external_declaration -> pp_directive .)
    RESTRICT        reduce using rule 64 (external_declaration -> pp_directive .)
    VOLATILE        reduce using rule 64 (external_declaration -> pp_directive .)
    AUTO            reduce using rule 64 (external_declaration -> pp_directive .)
    REGISTER        reduce using rule 64 (external_declaration -> pp_directive .)
    STATIC          reduce using rule 64 (external_declaration -> pp_directive .)
    EXTERN          reduce using rule 64 (external_declaration -> pp_directive .)
    TYPEDEF         reduce using rule 64 (external_declaration -> pp_directive .)
    _THREAD_LOCAL   reduce using rule 64 (external_declaration -> pp_directive .)
    INLINE          reduce using rule 64 (external_declaration -> pp_directive .)
    _NORETURN       reduce using rule 64 (external_declaration -> pp_directive .)
    _ALIGNAS        reduce using rule 64 (external_declaration -> pp_directive .)
    STRUCT          reduce using rule 64 (external_declaration -> pp_directive .)
    UNION           reduce using rule 64 (external_declaration -> pp_directive .)
    $end            reduce using rule 64 (external_declaration -> pp_directive .)


state 8

    (65) external_declaration -> pppragma_directive .

    SEMI            reduce using rule 65 (external_declaration -> pppragma_directive .)
    PPHASH          reduce using rule 65 (external_declaration -> pppragma_directive .)
    PPPRAGMA        reduce using rule 65 (external_declaration -> pppragma_directive .)
    _PRAGMA         reduce using rule 65 (external_declaration -> pppragma_directive .)
    _STATIC_ASSERT  reduce using rule 65 (external_declaration -> pppragma_directive .)
    ID              reduce using rule 65 (external_declaration -> pppragma_directive .)
    LPAREN          reduce using rule 65 (external_declaration -> pppragma_directive .)
    TIMES           reduce using rule 65 (external_declaration -> pppragma_directive .)
    TYPEID          reduce using rule 65 (external_declaration -> pppragma_directive .)
    ENUM            reduce using rule 65 (external_declaration -> pppragma_directive .)
    VOID            reduce using rule 65 (external_declaration -> pppragma_directive .)
    _BOOL           reduce using rule 65 (external_declaration -> pppragma_directive .)
    CHAR            reduce using rule 65 (external_declaration -> pppragma_directive .)
    SHORT           reduce using rule 65 (external_declaration -> pppragma_directive .)
    INT             reduce using rule 65 (external_declaration -> pppragma_directive .)
    LONG            reduce using rule 65 (external_declaration -> pppragma_directive .)
    FLOAT           reduce using rule 65 (external_declaration -> pppragma_directive .)
    DOUBLE          reduce using rule 65 (external_declaration -> pppragma_directive .)
    _COMPLEX        reduce using rule 65 (external_declaration -> pppragma_directive .)
    SIGNED          reduce using rule 65 (external_declaration -> pppragma_directive .)
    UNSIGNED        reduce using rule 65 (external_declaration -> pppragma_directive .)
    __INT128        reduce using rule 65 (external_declaration -> pppragma_directive .)
    _ATOMIC         reduce using rule 65 (external_declaration -> pppragma_directive .)
    CONST           reduce using rule 65 (external_declaration -> pppragma_directive .)
    RESTRICT        reduce using rule 65 (external_declaration -> pppragma_directive .)
    VOLATILE        reduce using rule 65 (external_declaration -> pppragma_directive .)
    AUTO            reduce using rule 65 (external_declaration -> pppragma_directive .)
    REGISTER        reduce using rule 65 (external_declaration -> pppragma_directive .)
    STATIC          reduce using rule 65 (external_declaration -> pppragma_directive .)
    EXTERN          reduce using rule 65 (external_declaration -> pppragma_directive .)
    TYPEDEF         reduce using rule 65 (external_declaration -> pppragma_directive .)
    _THREAD_LOCAL   reduce using rule 65 (external_declaration -> pppragma_directive .)
    INLINE          reduce using rule 65 (external_declaration -> pppragma_directive .)
    _NORETURN       reduce using rule 65 (external_declaration -> pppragma_directive .)
    _ALIGNAS        reduce using rule 65 (external_declaration -> pppragma_directive .)
    STRUCT          reduce using rule 65 (external_declaration -> pppragma_directive .)
    UNION           reduce using rule 65 (external_declaration -> pppragma_directive .)
    $end            reduce using rule 65 (external_declaration -> pppragma_directive .)


state 9

    (66) external_declaration -> SEMI .

    SEMI            reduce using rule 66 (external_declaration -> SEMI .)
    PPHASH          reduce using rule 66 (external_declaration -> SEMI .)
    PPPRAGMA        reduce using rule 66 (external_declaration -> SEMI .)
    _PRAGMA         reduce using rule 66 (external_declaration -> SEMI .)
    _STATIC_ASSERT  reduce using rule 66 (external_declaration -> SEMI .)
    ID              reduce using rule 66 (external_declaration -> SEMI .)
    LPAREN          reduce using rule 66 (external_declaration -> SEMI .)
    TIMES           reduce using rule 66 (external_declaration -> SEMI .)
    TYPEID          reduce using rule 66 (external_declaration -> SEMI .)
    ENUM            reduce using rule 66 (external_declaration -> SEMI .)
    VOID            reduce using rule 66 (external_declaration -> SEMI .)
    _BOOL           reduce using rule 66 (external_declaration -> SEMI .)
    CHAR            reduce using rule 66 (external_declaration -> SEMI .)
    SHORT           reduce using rule 66 (external_declaration -> SEMI .)
    INT             reduce using rule 66 (external_declaration -> SEMI .)
    LONG            reduce using rule 66 (external_declaration -> SEMI .)
    FLOAT           reduce using rule 66 (external_declaration -> SEMI .)
    DOUBLE          reduce using rule 66 (external_declaration -> SEMI .)
    _COMPLEX        reduce using rule 66 (external_declaration -> SEMI .)
    SIGNED          reduce using rule 66 (external_declaration -> SEMI .)
    UNSIGNED        reduce using rule 66 (external_declaration -> SEMI .)
    __INT128        reduce using rule 66 (external_declaration -> SEMI .)
    _ATOMIC         reduce using rule 66 (external_declaration -> SEMI .)
    CONST           reduce using rule 66 (external_declaration -> SEMI .)
    RESTRICT        reduce using rule 66 (external_declaration -> SEMI .)
    VOLATILE        reduce using rule 66 (external_declaration -> SEMI .)
    AUTO            reduce using rule 66 (external_declaration -> SEMI .)
    REGISTER        reduce using rule 66 (external_declaration -> SEMI .)
    STATIC          reduce using rule 66 (external_declaration -> SEMI .)
    EXTERN          reduce using rule 66 (external_declaration -> SEMI .)
    TYPEDEF         reduce using rule 66 (external_declaration -> SEMI .)
    _THREAD_LOCAL   reduce using rule 66 (external_declaration -> SEMI .)
    INLINE          reduce using rule 66 (external_declaration -> SEMI .)
    _NORETURN       reduce using rule 66 (external_declaration -> SEMI .)
    _ALIGNAS        reduce using rule 66 (external_declaration -> SEMI .)
    STRUCT          reduce using rule 66 (external_declaration -> SEMI .)
    UNION           reduce using rule 66 (external_declaration -> SEMI .)
    $end            reduce using rule 66 (external_declaration -> SEMI .)


state 10

    (67) external_declaration -> static_assert .

    SEMI            reduce using rule 67 (external_declaration -> static_assert .)
    PPHASH          reduce using rule 67 (external_declaration -> static_assert .)
    PPPRAGMA        reduce using rule 67 (external_declaration -> static_assert .)
    _PRAGMA         reduce using rule 67 (external_declaration -> static_assert .)
    _STATIC_ASSERT  reduce using rule 67 (external_declaration -> static_assert .)
    ID              reduce using rule 67 (external_declaration -> static_assert .)
    LPAREN          reduce using rule 67 (external_declaration -> static_assert .)
    TIMES           reduce using rule 67 (external_declaration -> static_assert .)
    TYPEID          reduce using rule 67 (external_declaration -> static_assert .)
    ENUM            reduce using rule 67 (external_declaration -> static_assert .)
    VOID            reduce using rule 67 (external_declaration -> static_assert .)
    _BOOL           reduce using rule 67 (external_declaration -> static_assert .)
    CHAR            reduce using rule 67 (external_declaration -> static_assert .)
    SHORT           reduce using rule 67 (external_declaration -> static_assert .)
    INT             reduce using rule 67 (external_declaration -> static_assert .)
    LONG            reduce using rule 67 (external_declaration -> static_assert .)
    FLOAT           reduce using rule 67 (external_declaration -> static_assert .)
    DOUBLE          reduce using rule 67 (external_declaration -> static_assert .)
    _COMPLEX        reduce using rule 67 (external_declaration -> static_assert .)
    SIGNED          reduce using rule 67 (external_declaration -> static_assert .)
    UNSIGNED        reduce using rule 67 (external_declaration -> static_assert .)
    __INT128        reduce using rule 67 (external_declaration -> static_assert .)
    _ATOMIC         reduce using rule 67 (external_declaration -> static_assert .)
    CONST           reduce using rule 67 (external_declaration -> static_assert .)
    RESTRICT        reduce using rule 67 (external_declaration -> static_assert .)
    VOLATILE        reduce using rule 67 (external_declaration -> static_assert .)
    AUTO            reduce using rule 67 (external_declaration -> static_assert .)
    REGISTER        reduce using rule 67 (external_declaration -> static_assert .)
    STATIC          reduce using rule 67 (external_declaration -> static_assert .)
    EXTERN          reduce using rule 67 (external_declaration -> static_assert .)
    TYPEDEF         reduce using rule 67 (external_declaration -> static_assert .)
    _THREAD_LOCAL   reduce using rule 67 (external_declaration -> static_assert .)
    INLINE          reduce using rule 67 (external_declaration -> static_assert .)
    _NORETURN       reduce using rule 67 (external_declaration -> static_assert .)
    _ALIGNAS        reduce using rule 67 (external_declaration -> static_assert .)
    STRUCT          reduce using rule 67 (external_declaration -> static_assert .)
    UNION           reduce using rule 67 (external_declaration -> static_assert .)
    $end            reduce using rule 67 (external_declaration -> static_assert .)


state 11

    (76) function_definition -> id_declarator . declaration_list_opt compound_statement
    (7) declaration_list_opt -> . empty
    (8) declaration_list_opt -> . declaration_list
    (340) empty -> .
    (91) declaration_list -> . declaration
    (92) declaration_list -> . declaration_list declaration
    (90) declaration -> . decl_body SEMI
    (88) decl_body -> . declaration_specifiers init_declarator_list_opt
    (89) decl_body -> . declaration_specifiers_no_type id_init_declarator_list_opt
    (98) declaration_specifiers -> . declaration_specifiers type_qualifier
    (99) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (100) declaration_specifiers -> . declaration_specifiers function_specifier
    (101) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (102) declaration_specifiers -> . type_specifier
    (103) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (104) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (93) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (94) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (95) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (96) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (97) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) storage_class_specifier -> . STATIC
    (108) storage_class_specifier -> . EXTERN
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . _THREAD_LOCAL
    (111) function_specifier -> . INLINE
    (112) function_specifier -> . _NORETURN
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION

    LBRACE          reduce using rule 340 (empty -> .)
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 72
    AUTO            shift and go to state 54
    REGISTER        shift and go to state 55
    STATIC          shift and go to state 29
    EXTERN          shift and go to state 56
    TYPEDEF         shift and go to state 57
    _THREAD_LOCAL   shift and go to state 58
    INLINE          shift and go to state 59
    _NORETURN       shift and go to state 60
    _ALIGNAS        shift and go to state 61
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63

    declaration_list_opt           shift and go to state 65
    empty                          shift and go to state 66
    declaration_list               shift and go to state 67
    declaration                    shift and go to state 68
    decl_body                      shift and go to state 13
    declaration_specifiers         shift and go to state 69
    declaration_specifiers_no_type shift and go to state 70
    type_qualifier                 shift and go to state 21
    storage_class_specifier        shift and go to state 22
    function_specifier             shift and go to state 23
    type_specifier_no_typeid       shift and go to state 24
    type_specifier                 shift and go to state 25
    alignment_specifier            shift and go to state 27
    atomic_specifier               shift and go to state 71
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    struct_or_union                shift and go to state 37

state 12

    (77) function_definition -> declaration_specifiers . id_declarator declaration_list_opt compound_statement
    (98) declaration_specifiers -> declaration_specifiers . type_qualifier
    (99) declaration_specifiers -> declaration_specifiers . storage_class_specifier
    (100) declaration_specifiers -> declaration_specifiers . function_specifier
    (101) declaration_specifiers -> declaration_specifiers . type_specifier_no_typeid
    (104) declaration_specifiers -> declaration_specifiers . alignment_specifier
    (88) decl_body -> declaration_specifiers . init_declarator_list_opt
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) storage_class_specifier -> . STATIC
    (108) storage_class_specifier -> . EXTERN
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . _THREAD_LOCAL
    (111) function_specifier -> . INLINE
    (112) function_specifier -> . _NORETURN
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (19) init_declarator_list_opt -> . empty
    (20) init_declarator_list_opt -> . init_declarator_list
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (183) pointer -> . TIMES type_qualifier_list_opt
    (184) pointer -> . TIMES type_qualifier_list_opt pointer
    (340) empty -> .
    (135) init_declarator_list -> . init_declarator
    (136) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (137) init_declarator -> . declarator
    (138) init_declarator -> . declarator EQUALS initializer
    (181) declarator -> . id_declarator
    (182) declarator -> . typeid_declarator
    (54) typeid_declarator -> . direct_typeid_declarator
    (55) typeid_declarator -> . pointer direct_typeid_declarator
    (37) direct_typeid_declarator -> . TYPEID
    (38) direct_typeid_declarator -> . LPAREN typeid_declarator RPAREN
    (39) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (40) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (41) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (42) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (43) direct_typeid_declarator -> . direct_typeid_declarator LPAREN parameter_type_list RPAREN
    (44) direct_typeid_declarator -> . direct_typeid_declarator LPAREN identifier_list_opt RPAREN

    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 81
    AUTO            shift and go to state 54
    REGISTER        shift and go to state 55
    STATIC          shift and go to state 29
    EXTERN          shift and go to state 56
    TYPEDEF         shift and go to state 57
    _THREAD_LOCAL   shift and go to state 58
    INLINE          shift and go to state 59
    _NORETURN       shift and go to state 60
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ALIGNAS        shift and go to state 61
    ID              shift and go to state 28
    LPAREN          shift and go to state 82
    TIMES           shift and go to state 30
    SEMI            reduce using rule 340 (empty -> .)
    TYPEID          shift and go to state 89

    id_declarator                  shift and go to state 73
    type_qualifier                 shift and go to state 74
    storage_class_specifier        shift and go to state 75
    function_specifier             shift and go to state 76
    type_specifier_no_typeid       shift and go to state 77
    alignment_specifier            shift and go to state 78
    init_declarator_list_opt       shift and go to state 79
    direct_id_declarator           shift and go to state 19
    pointer                        shift and go to state 80
    empty                          shift and go to state 83
    init_declarator_list           shift and go to state 84
    init_declarator                shift and go to state 85
    declarator                     shift and go to state 86
    typeid_declarator              shift and go to state 87
    direct_typeid_declarator       shift and go to state 88

state 13

    (90) declaration -> decl_body . SEMI

    SEMI            shift and go to state 90


state 14

    (70) pp_directive -> PPHASH .

    SEMI            reduce using rule 70 (pp_directive -> PPHASH .)
    PPHASH          reduce using rule 70 (pp_directive -> PPHASH .)
    PPPRAGMA        reduce using rule 70 (pp_directive -> PPHASH .)
    _PRAGMA         reduce using rule 70 (pp_directive -> PPHASH .)
    _STATIC_ASSERT  reduce using rule 70 (pp_directive -> PPHASH .)
    ID              reduce using rule 70 (pp_directive -> PPHASH .)
    LPAREN          reduce using rule 70 (pp_directive -> PPHASH .)
    TIMES           reduce using rule 70 (pp_directive -> PPHASH .)
    TYPEID          reduce using rule 70 (pp_directive -> PPHASH .)
    ENUM            reduce using rule 70 (pp_directive -> PPHASH .)
    VOID            reduce using rule 70 (pp_directive -> PPHASH .)
    _BOOL           reduce using rule 70 (pp_directive -> PPHASH .)
    CHAR            reduce using rule 70 (pp_directive -> PPHASH .)
    SHORT           reduce using rule 70 (pp_directive -> PPHASH .)
    INT             reduce using rule 70 (pp_directive -> PPHASH .)
    LONG            reduce using rule 70 (pp_directive -> PPHASH .)
    FLOAT           reduce using rule 70 (pp_directive -> PPHASH .)
    DOUBLE          reduce using rule 70 (pp_directive -> PPHASH .)
    _COMPLEX        reduce using rule 70 (pp_directive -> PPHASH .)
    SIGNED          reduce using rule 70 (pp_directive -> PPHASH .)
    UNSIGNED        reduce using rule 70 (pp_directive -> PPHASH .)
    __INT128        reduce using rule 70 (pp_directive -> PPHASH .)
    _ATOMIC         reduce using rule 70 (pp_directive -> PPHASH .)
    CONST           reduce using rule 70 (pp_directive -> PPHASH .)
    RESTRICT        reduce using rule 70 (pp_directive -> PPHASH .)
    VOLATILE        reduce using rule 70 (pp_directive -> PPHASH .)
    AUTO            reduce using rule 70 (pp_directive -> PPHASH .)
    REGISTER        reduce using rule 70 (pp_directive -> PPHASH .)
    STATIC          reduce using rule 70 (pp_directive -> PPHASH .)
    EXTERN          reduce using rule 70 (pp_directive -> PPHASH .)
    TYPEDEF         reduce using rule 70 (pp_directive -> PPHASH .)
    _THREAD_LOCAL   reduce using rule 70 (pp_directive -> PPHASH .)
    INLINE          reduce using rule 70 (pp_directive -> PPHASH .)
    _NORETURN       reduce using rule 70 (pp_directive -> PPHASH .)
    _ALIGNAS        reduce using rule 70 (pp_directive -> PPHASH .)
    STRUCT          reduce using rule 70 (pp_directive -> PPHASH .)
    UNION           reduce using rule 70 (pp_directive -> PPHASH .)
    $end            reduce using rule 70 (pp_directive -> PPHASH .)


state 15

    (71) pppragma_directive -> PPPRAGMA .
    (72) pppragma_directive -> PPPRAGMA . PPPRAGMASTR

    SEMI            reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    PPHASH          reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    PPPRAGMA        reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    _PRAGMA         reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    _STATIC_ASSERT  reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    ID              reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    LPAREN          reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    TIMES           reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    TYPEID          reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    ENUM            reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    VOID            reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    _BOOL           reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    CHAR            reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    SHORT           reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    INT             reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    LONG            reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    FLOAT           reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    DOUBLE          reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    _COMPLEX        reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    SIGNED          reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    UNSIGNED        reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    __INT128        reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    _ATOMIC         reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    CONST           reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    RESTRICT        reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    VOLATILE        reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    AUTO            reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    REGISTER        reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    STATIC          reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    EXTERN          reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    TYPEDEF         reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    _THREAD_LOCAL   reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    INLINE          reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    _NORETURN       reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    _ALIGNAS        reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    STRUCT          reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    UNION           reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    $end            reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    RBRACE          reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    CASE            reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    DEFAULT         reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    IF              reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    SWITCH          reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    WHILE           reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    DO              reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    FOR             reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    GOTO            reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    BREAK           reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    CONTINUE        reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    RETURN          reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    LBRACE          reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    PLUSPLUS        reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    MINUSMINUS      reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    SIZEOF          reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    _ALIGNOF        reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    AND             reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    PLUS            reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    MINUS           reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    NOT             reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    LNOT            reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    OFFSETOF        reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    INT_CONST_DEC   reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    INT_CONST_OCT   reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    INT_CONST_HEX   reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    INT_CONST_BIN   reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    INT_CONST_CHAR  reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    FLOAT_CONST     reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    HEX_FLOAT_CONST reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    CHAR_CONST      reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    WCHAR_CONST     reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    U8CHAR_CONST    reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    U16CHAR_CONST   reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    U32CHAR_CONST   reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    STRING_LITERAL  reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    WSTRING_LITERAL reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    U8STRING_LITERAL reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    U16STRING_LITERAL reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    U32STRING_LITERAL reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    ELSE            reduce using rule 71 (pppragma_directive -> PPPRAGMA .)
    PPPRAGMASTR     shift and go to state 91


state 16

    (73) pppragma_directive -> _PRAGMA . LPAREN unified_string_literal RPAREN

    LPAREN          shift and go to state 92


state 17

    (30) direct_id_declarator -> LPAREN . id_declarator RPAREN
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (183) pointer -> . TIMES type_qualifier_list_opt
    (184) pointer -> . TIMES type_qualifier_list_opt pointer

    ID              shift and go to state 28
    LPAREN          shift and go to state 17
    TIMES           shift and go to state 30

    id_declarator                  shift and go to state 93
    direct_id_declarator           shift and go to state 19
    pointer                        shift and go to state 20

state 18

    (68) static_assert -> _STATIC_ASSERT . LPAREN constant_expression COMMA unified_string_literal RPAREN
    (69) static_assert -> _STATIC_ASSERT . LPAREN constant_expression RPAREN

    LPAREN          shift and go to state 94


state 19

    (52) id_declarator -> direct_id_declarator .
    (31) direct_id_declarator -> direct_id_declarator . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> direct_id_declarator . LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> direct_id_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> direct_id_declarator . LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> direct_id_declarator . LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> direct_id_declarator . LPAREN identifier_list_opt RPAREN

    CONST           reduce using rule 52 (id_declarator -> direct_id_declarator .)
    RESTRICT        reduce using rule 52 (id_declarator -> direct_id_declarator .)
    VOLATILE        reduce using rule 52 (id_declarator -> direct_id_declarator .)
    _ATOMIC         reduce using rule 52 (id_declarator -> direct_id_declarator .)
    AUTO            reduce using rule 52 (id_declarator -> direct_id_declarator .)
    REGISTER        reduce using rule 52 (id_declarator -> direct_id_declarator .)
    STATIC          reduce using rule 52 (id_declarator -> direct_id_declarator .)
    EXTERN          reduce using rule 52 (id_declarator -> direct_id_declarator .)
    TYPEDEF         reduce using rule 52 (id_declarator -> direct_id_declarator .)
    _THREAD_LOCAL   reduce using rule 52 (id_declarator -> direct_id_declarator .)
    INLINE          reduce using rule 52 (id_declarator -> direct_id_declarator .)
    _NORETURN       reduce using rule 52 (id_declarator -> direct_id_declarator .)
    _ALIGNAS        reduce using rule 52 (id_declarator -> direct_id_declarator .)
    TYPEID          reduce using rule 52 (id_declarator -> direct_id_declarator .)
    ENUM            reduce using rule 52 (id_declarator -> direct_id_declarator .)
    VOID            reduce using rule 52 (id_declarator -> direct_id_declarator .)
    _BOOL           reduce using rule 52 (id_declarator -> direct_id_declarator .)
    CHAR            reduce using rule 52 (id_declarator -> direct_id_declarator .)
    SHORT           reduce using rule 52 (id_declarator -> direct_id_declarator .)
    INT             reduce using rule 52 (id_declarator -> direct_id_declarator .)
    LONG            reduce using rule 52 (id_declarator -> direct_id_declarator .)
    FLOAT           reduce using rule 52 (id_declarator -> direct_id_declarator .)
    DOUBLE          reduce using rule 52 (id_declarator -> direct_id_declarator .)
    _COMPLEX        reduce using rule 52 (id_declarator -> direct_id_declarator .)
    SIGNED          reduce using rule 52 (id_declarator -> direct_id_declarator .)
    UNSIGNED        reduce using rule 52 (id_declarator -> direct_id_declarator .)
    __INT128        reduce using rule 52 (id_declarator -> direct_id_declarator .)
    STRUCT          reduce using rule 52 (id_declarator -> direct_id_declarator .)
    UNION           reduce using rule 52 (id_declarator -> direct_id_declarator .)
    LBRACE          reduce using rule 52 (id_declarator -> direct_id_declarator .)
    EQUALS          reduce using rule 52 (id_declarator -> direct_id_declarator .)
    COMMA           reduce using rule 52 (id_declarator -> direct_id_declarator .)
    SEMI            reduce using rule 52 (id_declarator -> direct_id_declarator .)
    RPAREN          reduce using rule 52 (id_declarator -> direct_id_declarator .)
    COLON           reduce using rule 52 (id_declarator -> direct_id_declarator .)
    LBRACKET        shift and go to state 95
    LPAREN          shift and go to state 96


state 20

    (53) id_declarator -> pointer . direct_id_declarator
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN

    ID              shift and go to state 28
    LPAREN          shift and go to state 17

    direct_id_declarator           shift and go to state 97

state 21

    (93) declaration_specifiers_no_type -> type_qualifier . declaration_specifiers_no_type_opt
    (9) declaration_specifiers_no_type_opt -> . empty
    (10) declaration_specifiers_no_type_opt -> . declaration_specifiers_no_type
    (340) empty -> .
    (93) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (94) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (95) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (96) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (97) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) storage_class_specifier -> . STATIC
    (108) storage_class_specifier -> . EXTERN
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . _THREAD_LOCAL
    (111) function_specifier -> . INLINE
    (112) function_specifier -> . _NORETURN
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN

  ! shift/reduce conflict for _ATOMIC resolved as shift
    TYPEID          reduce using rule 340 (empty -> .)
    ENUM            reduce using rule 340 (empty -> .)
    VOID            reduce using rule 340 (empty -> .)
    _BOOL           reduce using rule 340 (empty -> .)
    CHAR            reduce using rule 340 (empty -> .)
    SHORT           reduce using rule 340 (empty -> .)
    INT             reduce using rule 340 (empty -> .)
    LONG            reduce using rule 340 (empty -> .)
    FLOAT           reduce using rule 340 (empty -> .)
    DOUBLE          reduce using rule 340 (empty -> .)
    _COMPLEX        reduce using rule 340 (empty -> .)
    SIGNED          reduce using rule 340 (empty -> .)
    UNSIGNED        reduce using rule 340 (empty -> .)
    __INT128        reduce using rule 340 (empty -> .)
    STRUCT          reduce using rule 340 (empty -> .)
    UNION           reduce using rule 340 (empty -> .)
    ID              reduce using rule 340 (empty -> .)
    LPAREN          reduce using rule 340 (empty -> .)
    TIMES           reduce using rule 340 (empty -> .)
    SEMI            reduce using rule 340 (empty -> .)
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 72
    AUTO            shift and go to state 54
    REGISTER        shift and go to state 55
    STATIC          shift and go to state 29
    EXTERN          shift and go to state 56
    TYPEDEF         shift and go to state 57
    _THREAD_LOCAL   shift and go to state 58
    INLINE          shift and go to state 59
    _NORETURN       shift and go to state 60
    _ALIGNAS        shift and go to state 61

  ! _ATOMIC         [ reduce using rule 340 (empty -> .) ]

    type_qualifier                 shift and go to state 21
    declaration_specifiers_no_type_opt shift and go to state 98
    empty                          shift and go to state 99
    declaration_specifiers_no_type shift and go to state 100
    storage_class_specifier        shift and go to state 22
    function_specifier             shift and go to state 23
    atomic_specifier               shift and go to state 101
    alignment_specifier            shift and go to state 27

state 22

    (94) declaration_specifiers_no_type -> storage_class_specifier . declaration_specifiers_no_type_opt
    (9) declaration_specifiers_no_type_opt -> . empty
    (10) declaration_specifiers_no_type_opt -> . declaration_specifiers_no_type
    (340) empty -> .
    (93) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (94) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (95) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (96) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (97) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) storage_class_specifier -> . STATIC
    (108) storage_class_specifier -> . EXTERN
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . _THREAD_LOCAL
    (111) function_specifier -> . INLINE
    (112) function_specifier -> . _NORETURN
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN

  ! shift/reduce conflict for _ATOMIC resolved as shift
    TYPEID          reduce using rule 340 (empty -> .)
    ENUM            reduce using rule 340 (empty -> .)
    VOID            reduce using rule 340 (empty -> .)
    _BOOL           reduce using rule 340 (empty -> .)
    CHAR            reduce using rule 340 (empty -> .)
    SHORT           reduce using rule 340 (empty -> .)
    INT             reduce using rule 340 (empty -> .)
    LONG            reduce using rule 340 (empty -> .)
    FLOAT           reduce using rule 340 (empty -> .)
    DOUBLE          reduce using rule 340 (empty -> .)
    _COMPLEX        reduce using rule 340 (empty -> .)
    SIGNED          reduce using rule 340 (empty -> .)
    UNSIGNED        reduce using rule 340 (empty -> .)
    __INT128        reduce using rule 340 (empty -> .)
    STRUCT          reduce using rule 340 (empty -> .)
    UNION           reduce using rule 340 (empty -> .)
    ID              reduce using rule 340 (empty -> .)
    LPAREN          reduce using rule 340 (empty -> .)
    TIMES           reduce using rule 340 (empty -> .)
    SEMI            reduce using rule 340 (empty -> .)
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 72
    AUTO            shift and go to state 54
    REGISTER        shift and go to state 55
    STATIC          shift and go to state 29
    EXTERN          shift and go to state 56
    TYPEDEF         shift and go to state 57
    _THREAD_LOCAL   shift and go to state 58
    INLINE          shift and go to state 59
    _NORETURN       shift and go to state 60
    _ALIGNAS        shift and go to state 61

  ! _ATOMIC         [ reduce using rule 340 (empty -> .) ]

    storage_class_specifier        shift and go to state 22
    declaration_specifiers_no_type_opt shift and go to state 102
    empty                          shift and go to state 99
    declaration_specifiers_no_type shift and go to state 100
    type_qualifier                 shift and go to state 21
    function_specifier             shift and go to state 23
    atomic_specifier               shift and go to state 101
    alignment_specifier            shift and go to state 27

state 23

    (95) declaration_specifiers_no_type -> function_specifier . declaration_specifiers_no_type_opt
    (9) declaration_specifiers_no_type_opt -> . empty
    (10) declaration_specifiers_no_type_opt -> . declaration_specifiers_no_type
    (340) empty -> .
    (93) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (94) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (95) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (96) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (97) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) storage_class_specifier -> . STATIC
    (108) storage_class_specifier -> . EXTERN
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . _THREAD_LOCAL
    (111) function_specifier -> . INLINE
    (112) function_specifier -> . _NORETURN
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN

  ! shift/reduce conflict for _ATOMIC resolved as shift
    TYPEID          reduce using rule 340 (empty -> .)
    ENUM            reduce using rule 340 (empty -> .)
    VOID            reduce using rule 340 (empty -> .)
    _BOOL           reduce using rule 340 (empty -> .)
    CHAR            reduce using rule 340 (empty -> .)
    SHORT           reduce using rule 340 (empty -> .)
    INT             reduce using rule 340 (empty -> .)
    LONG            reduce using rule 340 (empty -> .)
    FLOAT           reduce using rule 340 (empty -> .)
    DOUBLE          reduce using rule 340 (empty -> .)
    _COMPLEX        reduce using rule 340 (empty -> .)
    SIGNED          reduce using rule 340 (empty -> .)
    UNSIGNED        reduce using rule 340 (empty -> .)
    __INT128        reduce using rule 340 (empty -> .)
    STRUCT          reduce using rule 340 (empty -> .)
    UNION           reduce using rule 340 (empty -> .)
    ID              reduce using rule 340 (empty -> .)
    LPAREN          reduce using rule 340 (empty -> .)
    TIMES           reduce using rule 340 (empty -> .)
    SEMI            reduce using rule 340 (empty -> .)
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 72
    AUTO            shift and go to state 54
    REGISTER        shift and go to state 55
    STATIC          shift and go to state 29
    EXTERN          shift and go to state 56
    TYPEDEF         shift and go to state 57
    _THREAD_LOCAL   shift and go to state 58
    INLINE          shift and go to state 59
    _NORETURN       shift and go to state 60
    _ALIGNAS        shift and go to state 61

  ! _ATOMIC         [ reduce using rule 340 (empty -> .) ]

    function_specifier             shift and go to state 23
    declaration_specifiers_no_type_opt shift and go to state 103
    empty                          shift and go to state 99
    declaration_specifiers_no_type shift and go to state 100
    type_qualifier                 shift and go to state 21
    storage_class_specifier        shift and go to state 22
    atomic_specifier               shift and go to state 101
    alignment_specifier            shift and go to state 27

state 24

    (128) type_specifier -> type_specifier_no_typeid .

    CONST           reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    RESTRICT        reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    VOLATILE        reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    _ATOMIC         reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    AUTO            reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    REGISTER        reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    STATIC          reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    EXTERN          reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    TYPEDEF         reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    _THREAD_LOCAL   reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    INLINE          reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    _NORETURN       reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    VOID            reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    _BOOL           reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    CHAR            reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    SHORT           reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    INT             reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    LONG            reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    FLOAT           reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    DOUBLE          reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    _COMPLEX        reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    SIGNED          reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    UNSIGNED        reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    __INT128        reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    _ALIGNAS        reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    ID              reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    LPAREN          reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    TIMES           reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    TYPEID          reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    SEMI            reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    LBRACKET        reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    COMMA           reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    RPAREN          reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)
    COLON           reduce using rule 128 (type_specifier -> type_specifier_no_typeid .)


state 25

    (102) declaration_specifiers -> type_specifier .

    CONST           reduce using rule 102 (declaration_specifiers -> type_specifier .)
    RESTRICT        reduce using rule 102 (declaration_specifiers -> type_specifier .)
    VOLATILE        reduce using rule 102 (declaration_specifiers -> type_specifier .)
    _ATOMIC         reduce using rule 102 (declaration_specifiers -> type_specifier .)
    AUTO            reduce using rule 102 (declaration_specifiers -> type_specifier .)
    REGISTER        reduce using rule 102 (declaration_specifiers -> type_specifier .)
    STATIC          reduce using rule 102 (declaration_specifiers -> type_specifier .)
    EXTERN          reduce using rule 102 (declaration_specifiers -> type_specifier .)
    TYPEDEF         reduce using rule 102 (declaration_specifiers -> type_specifier .)
    _THREAD_LOCAL   reduce using rule 102 (declaration_specifiers -> type_specifier .)
    INLINE          reduce using rule 102 (declaration_specifiers -> type_specifier .)
    _NORETURN       reduce using rule 102 (declaration_specifiers -> type_specifier .)
    VOID            reduce using rule 102 (declaration_specifiers -> type_specifier .)
    _BOOL           reduce using rule 102 (declaration_specifiers -> type_specifier .)
    CHAR            reduce using rule 102 (declaration_specifiers -> type_specifier .)
    SHORT           reduce using rule 102 (declaration_specifiers -> type_specifier .)
    INT             reduce using rule 102 (declaration_specifiers -> type_specifier .)
    LONG            reduce using rule 102 (declaration_specifiers -> type_specifier .)
    FLOAT           reduce using rule 102 (declaration_specifiers -> type_specifier .)
    DOUBLE          reduce using rule 102 (declaration_specifiers -> type_specifier .)
    _COMPLEX        reduce using rule 102 (declaration_specifiers -> type_specifier .)
    SIGNED          reduce using rule 102 (declaration_specifiers -> type_specifier .)
    UNSIGNED        reduce using rule 102 (declaration_specifiers -> type_specifier .)
    __INT128        reduce using rule 102 (declaration_specifiers -> type_specifier .)
    _ALIGNAS        reduce using rule 102 (declaration_specifiers -> type_specifier .)
    ID              reduce using rule 102 (declaration_specifiers -> type_specifier .)
    LPAREN          reduce using rule 102 (declaration_specifiers -> type_specifier .)
    TIMES           reduce using rule 102 (declaration_specifiers -> type_specifier .)
    TYPEID          reduce using rule 102 (declaration_specifiers -> type_specifier .)
    SEMI            reduce using rule 102 (declaration_specifiers -> type_specifier .)
    LBRACKET        reduce using rule 102 (declaration_specifiers -> type_specifier .)
    COMMA           reduce using rule 102 (declaration_specifiers -> type_specifier .)
    RPAREN          reduce using rule 102 (declaration_specifiers -> type_specifier .)


state 26

    (103) declaration_specifiers -> declaration_specifiers_no_type . type_specifier
    (89) decl_body -> declaration_specifiers_no_type . id_init_declarator_list_opt
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (15) id_init_declarator_list_opt -> . empty
    (16) id_init_declarator_list_opt -> . id_init_declarator_list
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (340) empty -> .
    (139) id_init_declarator_list -> . id_init_declarator
    (140) id_init_declarator_list -> . id_init_declarator_list COMMA init_declarator
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION
    (141) id_init_declarator -> . id_declarator
    (142) id_init_declarator -> . id_declarator EQUALS initializer
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (183) pointer -> . TIMES type_qualifier_list_opt
    (184) pointer -> . TIMES type_qualifier_list_opt pointer

    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ATOMIC         shift and go to state 109
    SEMI            reduce using rule 340 (empty -> .)
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63
    ID              shift and go to state 28
    LPAREN          shift and go to state 17
    TIMES           shift and go to state 30

    type_specifier                 shift and go to state 104
    id_init_declarator_list_opt    shift and go to state 105
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    type_specifier_no_typeid       shift and go to state 24
    atomic_specifier               shift and go to state 106
    empty                          shift and go to state 107
    id_init_declarator_list        shift and go to state 108
    struct_or_union                shift and go to state 37
    id_init_declarator             shift and go to state 110
    id_declarator                  shift and go to state 111
    direct_id_declarator           shift and go to state 19
    pointer                        shift and go to state 20

state 27

    (97) declaration_specifiers_no_type -> alignment_specifier . declaration_specifiers_no_type_opt
    (9) declaration_specifiers_no_type_opt -> . empty
    (10) declaration_specifiers_no_type_opt -> . declaration_specifiers_no_type
    (340) empty -> .
    (93) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (94) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (95) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (96) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (97) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) storage_class_specifier -> . STATIC
    (108) storage_class_specifier -> . EXTERN
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . _THREAD_LOCAL
    (111) function_specifier -> . INLINE
    (112) function_specifier -> . _NORETURN
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN

  ! shift/reduce conflict for _ATOMIC resolved as shift
    TYPEID          reduce using rule 340 (empty -> .)
    ENUM            reduce using rule 340 (empty -> .)
    VOID            reduce using rule 340 (empty -> .)
    _BOOL           reduce using rule 340 (empty -> .)
    CHAR            reduce using rule 340 (empty -> .)
    SHORT           reduce using rule 340 (empty -> .)
    INT             reduce using rule 340 (empty -> .)
    LONG            reduce using rule 340 (empty -> .)
    FLOAT           reduce using rule 340 (empty -> .)
    DOUBLE          reduce using rule 340 (empty -> .)
    _COMPLEX        reduce using rule 340 (empty -> .)
    SIGNED          reduce using rule 340 (empty -> .)
    UNSIGNED        reduce using rule 340 (empty -> .)
    __INT128        reduce using rule 340 (empty -> .)
    STRUCT          reduce using rule 340 (empty -> .)
    UNION           reduce using rule 340 (empty -> .)
    ID              reduce using rule 340 (empty -> .)
    LPAREN          reduce using rule 340 (empty -> .)
    TIMES           reduce using rule 340 (empty -> .)
    SEMI            reduce using rule 340 (empty -> .)
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 72
    AUTO            shift and go to state 54
    REGISTER        shift and go to state 55
    STATIC          shift and go to state 29
    EXTERN          shift and go to state 56
    TYPEDEF         shift and go to state 57
    _THREAD_LOCAL   shift and go to state 58
    INLINE          shift and go to state 59
    _NORETURN       shift and go to state 60
    _ALIGNAS        shift and go to state 61

  ! _ATOMIC         [ reduce using rule 340 (empty -> .) ]

    alignment_specifier            shift and go to state 27
    declaration_specifiers_no_type_opt shift and go to state 112
    empty                          shift and go to state 99
    declaration_specifiers_no_type shift and go to state 100
    type_qualifier                 shift and go to state 21
    storage_class_specifier        shift and go to state 22
    function_specifier             shift and go to state 23
    atomic_specifier               shift and go to state 101

state 28

    (29) direct_id_declarator -> ID .

    LBRACKET        reduce using rule 29 (direct_id_declarator -> ID .)
    LPAREN          reduce using rule 29 (direct_id_declarator -> ID .)
    CONST           reduce using rule 29 (direct_id_declarator -> ID .)
    RESTRICT        reduce using rule 29 (direct_id_declarator -> ID .)
    VOLATILE        reduce using rule 29 (direct_id_declarator -> ID .)
    _ATOMIC         reduce using rule 29 (direct_id_declarator -> ID .)
    AUTO            reduce using rule 29 (direct_id_declarator -> ID .)
    REGISTER        reduce using rule 29 (direct_id_declarator -> ID .)
    STATIC          reduce using rule 29 (direct_id_declarator -> ID .)
    EXTERN          reduce using rule 29 (direct_id_declarator -> ID .)
    TYPEDEF         reduce using rule 29 (direct_id_declarator -> ID .)
    _THREAD_LOCAL   reduce using rule 29 (direct_id_declarator -> ID .)
    INLINE          reduce using rule 29 (direct_id_declarator -> ID .)
    _NORETURN       reduce using rule 29 (direct_id_declarator -> ID .)
    _ALIGNAS        reduce using rule 29 (direct_id_declarator -> ID .)
    TYPEID          reduce using rule 29 (direct_id_declarator -> ID .)
    ENUM            reduce using rule 29 (direct_id_declarator -> ID .)
    VOID            reduce using rule 29 (direct_id_declarator -> ID .)
    _BOOL           reduce using rule 29 (direct_id_declarator -> ID .)
    CHAR            reduce using rule 29 (direct_id_declarator -> ID .)
    SHORT           reduce using rule 29 (direct_id_declarator -> ID .)
    INT             reduce using rule 29 (direct_id_declarator -> ID .)
    LONG            reduce using rule 29 (direct_id_declarator -> ID .)
    FLOAT           reduce using rule 29 (direct_id_declarator -> ID .)
    DOUBLE          reduce using rule 29 (direct_id_declarator -> ID .)
    _COMPLEX        reduce using rule 29 (direct_id_declarator -> ID .)
    SIGNED          reduce using rule 29 (direct_id_declarator -> ID .)
    UNSIGNED        reduce using rule 29 (direct_id_declarator -> ID .)
    __INT128        reduce using rule 29 (direct_id_declarator -> ID .)
    STRUCT          reduce using rule 29 (direct_id_declarator -> ID .)
    UNION           reduce using rule 29 (direct_id_declarator -> ID .)
    LBRACE          reduce using rule 29 (direct_id_declarator -> ID .)
    EQUALS          reduce using rule 29 (direct_id_declarator -> ID .)
    COMMA           reduce using rule 29 (direct_id_declarator -> ID .)
    SEMI            reduce using rule 29 (direct_id_declarator -> ID .)
    RPAREN          reduce using rule 29 (direct_id_declarator -> ID .)
    COLON           reduce using rule 29 (direct_id_declarator -> ID .)


state 29

    (107) storage_class_specifier -> STATIC .

    CONST           reduce using rule 107 (storage_class_specifier -> STATIC .)
    RESTRICT        reduce using rule 107 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 107 (storage_class_specifier -> STATIC .)
    _ATOMIC         reduce using rule 107 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 107 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 107 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 107 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 107 (storage_class_specifier -> STATIC .)
    TYPEDEF         reduce using rule 107 (storage_class_specifier -> STATIC .)
    _THREAD_LOCAL   reduce using rule 107 (storage_class_specifier -> STATIC .)
    INLINE          reduce using rule 107 (storage_class_specifier -> STATIC .)
    _NORETURN       reduce using rule 107 (storage_class_specifier -> STATIC .)
    _ALIGNAS        reduce using rule 107 (storage_class_specifier -> STATIC .)
    TYPEID          reduce using rule 107 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 107 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 107 (storage_class_specifier -> STATIC .)
    _BOOL           reduce using rule 107 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 107 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 107 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 107 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 107 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 107 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 107 (storage_class_specifier -> STATIC .)
    _COMPLEX        reduce using rule 107 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 107 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 107 (storage_class_specifier -> STATIC .)
    __INT128        reduce using rule 107 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 107 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 107 (storage_class_specifier -> STATIC .)
    ID              reduce using rule 107 (storage_class_specifier -> STATIC .)
    LPAREN          reduce using rule 107 (storage_class_specifier -> STATIC .)
    TIMES           reduce using rule 107 (storage_class_specifier -> STATIC .)
    SEMI            reduce using rule 107 (storage_class_specifier -> STATIC .)
    LBRACKET        reduce using rule 107 (storage_class_specifier -> STATIC .)
    COMMA           reduce using rule 107 (storage_class_specifier -> STATIC .)
    RPAREN          reduce using rule 107 (storage_class_specifier -> STATIC .)


state 30

    (183) pointer -> TIMES . type_qualifier_list_opt
    (184) pointer -> TIMES . type_qualifier_list_opt pointer
    (27) type_qualifier_list_opt -> . empty
    (28) type_qualifier_list_opt -> . type_qualifier_list
    (340) empty -> .
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC

    TIMES           reduce using rule 340 (empty -> .)
    ID              reduce using rule 340 (empty -> .)
    LPAREN          reduce using rule 340 (empty -> .)
    TYPEID          reduce using rule 340 (empty -> .)
    LBRACKET        reduce using rule 340 (empty -> .)
    COMMA           reduce using rule 340 (empty -> .)
    RPAREN          reduce using rule 340 (empty -> .)
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 81

    type_qualifier_list_opt        shift and go to state 113
    empty                          shift and go to state 114
    type_qualifier_list            shift and go to state 115
    type_qualifier                 shift and go to state 116

state 31

    (125) type_specifier -> typedef_name .

    CONST           reduce using rule 125 (type_specifier -> typedef_name .)
    RESTRICT        reduce using rule 125 (type_specifier -> typedef_name .)
    VOLATILE        reduce using rule 125 (type_specifier -> typedef_name .)
    _ATOMIC         reduce using rule 125 (type_specifier -> typedef_name .)
    AUTO            reduce using rule 125 (type_specifier -> typedef_name .)
    REGISTER        reduce using rule 125 (type_specifier -> typedef_name .)
    STATIC          reduce using rule 125 (type_specifier -> typedef_name .)
    EXTERN          reduce using rule 125 (type_specifier -> typedef_name .)
    TYPEDEF         reduce using rule 125 (type_specifier -> typedef_name .)
    _THREAD_LOCAL   reduce using rule 125 (type_specifier -> typedef_name .)
    INLINE          reduce using rule 125 (type_specifier -> typedef_name .)
    _NORETURN       reduce using rule 125 (type_specifier -> typedef_name .)
    VOID            reduce using rule 125 (type_specifier -> typedef_name .)
    _BOOL           reduce using rule 125 (type_specifier -> typedef_name .)
    CHAR            reduce using rule 125 (type_specifier -> typedef_name .)
    SHORT           reduce using rule 125 (type_specifier -> typedef_name .)
    INT             reduce using rule 125 (type_specifier -> typedef_name .)
    LONG            reduce using rule 125 (type_specifier -> typedef_name .)
    FLOAT           reduce using rule 125 (type_specifier -> typedef_name .)
    DOUBLE          reduce using rule 125 (type_specifier -> typedef_name .)
    _COMPLEX        reduce using rule 125 (type_specifier -> typedef_name .)
    SIGNED          reduce using rule 125 (type_specifier -> typedef_name .)
    UNSIGNED        reduce using rule 125 (type_specifier -> typedef_name .)
    __INT128        reduce using rule 125 (type_specifier -> typedef_name .)
    _ALIGNAS        reduce using rule 125 (type_specifier -> typedef_name .)
    ID              reduce using rule 125 (type_specifier -> typedef_name .)
    LPAREN          reduce using rule 125 (type_specifier -> typedef_name .)
    TIMES           reduce using rule 125 (type_specifier -> typedef_name .)
    TYPEID          reduce using rule 125 (type_specifier -> typedef_name .)
    SEMI            reduce using rule 125 (type_specifier -> typedef_name .)
    LBRACKET        reduce using rule 125 (type_specifier -> typedef_name .)
    COMMA           reduce using rule 125 (type_specifier -> typedef_name .)
    RPAREN          reduce using rule 125 (type_specifier -> typedef_name .)
    COLON           reduce using rule 125 (type_specifier -> typedef_name .)


state 32

    (126) type_specifier -> enum_specifier .

    CONST           reduce using rule 126 (type_specifier -> enum_specifier .)
    RESTRICT        reduce using rule 126 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 126 (type_specifier -> enum_specifier .)
    _ATOMIC         reduce using rule 126 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 126 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 126 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 126 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 126 (type_specifier -> enum_specifier .)
    TYPEDEF         reduce using rule 126 (type_specifier -> enum_specifier .)
    _THREAD_LOCAL   reduce using rule 126 (type_specifier -> enum_specifier .)
    INLINE          reduce using rule 126 (type_specifier -> enum_specifier .)
    _NORETURN       reduce using rule 126 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 126 (type_specifier -> enum_specifier .)
    _BOOL           reduce using rule 126 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 126 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 126 (type_specifier -> enum_specifier .)
    INT             reduce using rule 126 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 126 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 126 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 126 (type_specifier -> enum_specifier .)
    _COMPLEX        reduce using rule 126 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 126 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 126 (type_specifier -> enum_specifier .)
    __INT128        reduce using rule 126 (type_specifier -> enum_specifier .)
    _ALIGNAS        reduce using rule 126 (type_specifier -> enum_specifier .)
    ID              reduce using rule 126 (type_specifier -> enum_specifier .)
    LPAREN          reduce using rule 126 (type_specifier -> enum_specifier .)
    TIMES           reduce using rule 126 (type_specifier -> enum_specifier .)
    TYPEID          reduce using rule 126 (type_specifier -> enum_specifier .)
    SEMI            reduce using rule 126 (type_specifier -> enum_specifier .)
    LBRACKET        reduce using rule 126 (type_specifier -> enum_specifier .)
    COMMA           reduce using rule 126 (type_specifier -> enum_specifier .)
    RPAREN          reduce using rule 126 (type_specifier -> enum_specifier .)
    COLON           reduce using rule 126 (type_specifier -> enum_specifier .)


state 33

    (127) type_specifier -> struct_or_union_specifier .

    CONST           reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    RESTRICT        reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    _ATOMIC         reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    AUTO            reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    EXTERN          reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    TYPEDEF         reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    _THREAD_LOCAL   reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    INLINE          reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    _NORETURN       reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    VOID            reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    _BOOL           reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    CHAR            reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    SHORT           reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    INT             reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    LONG            reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    FLOAT           reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    DOUBLE          reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    _COMPLEX        reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    SIGNED          reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    UNSIGNED        reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    __INT128        reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    _ALIGNAS        reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    ID              reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    LPAREN          reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    TIMES           reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    TYPEID          reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    SEMI            reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    LBRACKET        reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    COMMA           reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    RPAREN          reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    COLON           reduce using rule 127 (type_specifier -> struct_or_union_specifier .)


state 34

    (129) type_specifier -> atomic_specifier .
    (96) declaration_specifiers_no_type -> atomic_specifier . declaration_specifiers_no_type_opt
    (9) declaration_specifiers_no_type_opt -> . empty
    (10) declaration_specifiers_no_type_opt -> . declaration_specifiers_no_type
    (340) empty -> .
    (93) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (94) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (95) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (96) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (97) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) storage_class_specifier -> . STATIC
    (108) storage_class_specifier -> . EXTERN
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . _THREAD_LOCAL
    (111) function_specifier -> . INLINE
    (112) function_specifier -> . _NORETURN
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN

  ! reduce/reduce conflict for TYPEID resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for VOID resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for _BOOL resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for CHAR resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for SHORT resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for INT resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for LONG resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for FLOAT resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for _COMPLEX resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for SIGNED resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for UNSIGNED resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for __INT128 resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for _ATOMIC resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for ID resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for SEMI resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for RESTRICT resolved as shift
  ! shift/reduce conflict for VOLATILE resolved as shift
  ! shift/reduce conflict for _ATOMIC resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for REGISTER resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for TYPEDEF resolved as shift
  ! shift/reduce conflict for _THREAD_LOCAL resolved as shift
  ! shift/reduce conflict for INLINE resolved as shift
  ! shift/reduce conflict for _NORETURN resolved as shift
  ! shift/reduce conflict for _ALIGNAS resolved as shift
    VOID            reduce using rule 129 (type_specifier -> atomic_specifier .)
    _BOOL           reduce using rule 129 (type_specifier -> atomic_specifier .)
    CHAR            reduce using rule 129 (type_specifier -> atomic_specifier .)
    SHORT           reduce using rule 129 (type_specifier -> atomic_specifier .)
    INT             reduce using rule 129 (type_specifier -> atomic_specifier .)
    LONG            reduce using rule 129 (type_specifier -> atomic_specifier .)
    FLOAT           reduce using rule 129 (type_specifier -> atomic_specifier .)
    DOUBLE          reduce using rule 129 (type_specifier -> atomic_specifier .)
    _COMPLEX        reduce using rule 129 (type_specifier -> atomic_specifier .)
    SIGNED          reduce using rule 129 (type_specifier -> atomic_specifier .)
    UNSIGNED        reduce using rule 129 (type_specifier -> atomic_specifier .)
    __INT128        reduce using rule 129 (type_specifier -> atomic_specifier .)
    ID              reduce using rule 129 (type_specifier -> atomic_specifier .)
    LPAREN          reduce using rule 129 (type_specifier -> atomic_specifier .)
    TIMES           reduce using rule 129 (type_specifier -> atomic_specifier .)
    TYPEID          reduce using rule 129 (type_specifier -> atomic_specifier .)
    SEMI            reduce using rule 129 (type_specifier -> atomic_specifier .)
    LBRACKET        reduce using rule 129 (type_specifier -> atomic_specifier .)
    COMMA           reduce using rule 129 (type_specifier -> atomic_specifier .)
    RPAREN          reduce using rule 129 (type_specifier -> atomic_specifier .)
    ENUM            reduce using rule 340 (empty -> .)
    STRUCT          reduce using rule 340 (empty -> .)
    UNION           reduce using rule 340 (empty -> .)
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 72
    AUTO            shift and go to state 54
    REGISTER        shift and go to state 55
    STATIC          shift and go to state 29
    EXTERN          shift and go to state 56
    TYPEDEF         shift and go to state 57
    _THREAD_LOCAL   shift and go to state 58
    INLINE          shift and go to state 59
    _NORETURN       shift and go to state 60
    _ALIGNAS        shift and go to state 61

  ! CONST           [ reduce using rule 129 (type_specifier -> atomic_specifier .) ]
  ! RESTRICT        [ reduce using rule 129 (type_specifier -> atomic_specifier .) ]
  ! VOLATILE        [ reduce using rule 129 (type_specifier -> atomic_specifier .) ]
  ! _ATOMIC         [ reduce using rule 129 (type_specifier -> atomic_specifier .) ]
  ! AUTO            [ reduce using rule 129 (type_specifier -> atomic_specifier .) ]
  ! REGISTER        [ reduce using rule 129 (type_specifier -> atomic_specifier .) ]
  ! STATIC          [ reduce using rule 129 (type_specifier -> atomic_specifier .) ]
  ! EXTERN          [ reduce using rule 129 (type_specifier -> atomic_specifier .) ]
  ! TYPEDEF         [ reduce using rule 129 (type_specifier -> atomic_specifier .) ]
  ! _THREAD_LOCAL   [ reduce using rule 129 (type_specifier -> atomic_specifier .) ]
  ! INLINE          [ reduce using rule 129 (type_specifier -> atomic_specifier .) ]
  ! _NORETURN       [ reduce using rule 129 (type_specifier -> atomic_specifier .) ]
  ! _ALIGNAS        [ reduce using rule 129 (type_specifier -> atomic_specifier .) ]
  ! TYPEID          [ reduce using rule 340 (empty -> .) ]
  ! VOID            [ reduce using rule 340 (empty -> .) ]
  ! _BOOL           [ reduce using rule 340 (empty -> .) ]
  ! CHAR            [ reduce using rule 340 (empty -> .) ]
  ! SHORT           [ reduce using rule 340 (empty -> .) ]
  ! INT             [ reduce using rule 340 (empty -> .) ]
  ! LONG            [ reduce using rule 340 (empty -> .) ]
  ! FLOAT           [ reduce using rule 340 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 340 (empty -> .) ]
  ! _COMPLEX        [ reduce using rule 340 (empty -> .) ]
  ! SIGNED          [ reduce using rule 340 (empty -> .) ]
  ! UNSIGNED        [ reduce using rule 340 (empty -> .) ]
  ! __INT128        [ reduce using rule 340 (empty -> .) ]
  ! _ATOMIC         [ reduce using rule 340 (empty -> .) ]
  ! ID              [ reduce using rule 340 (empty -> .) ]
  ! LPAREN          [ reduce using rule 340 (empty -> .) ]
  ! TIMES           [ reduce using rule 340 (empty -> .) ]
  ! SEMI            [ reduce using rule 340 (empty -> .) ]

    atomic_specifier               shift and go to state 101
    declaration_specifiers_no_type_opt shift and go to state 117
    empty                          shift and go to state 99
    declaration_specifiers_no_type shift and go to state 100
    type_qualifier                 shift and go to state 21
    storage_class_specifier        shift and go to state 22
    function_specifier             shift and go to state 23
    alignment_specifier            shift and go to state 27

state 35

    (241) typedef_name -> TYPEID .

    CONST           reduce using rule 241 (typedef_name -> TYPEID .)
    RESTRICT        reduce using rule 241 (typedef_name -> TYPEID .)
    VOLATILE        reduce using rule 241 (typedef_name -> TYPEID .)
    _ATOMIC         reduce using rule 241 (typedef_name -> TYPEID .)
    AUTO            reduce using rule 241 (typedef_name -> TYPEID .)
    REGISTER        reduce using rule 241 (typedef_name -> TYPEID .)
    STATIC          reduce using rule 241 (typedef_name -> TYPEID .)
    EXTERN          reduce using rule 241 (typedef_name -> TYPEID .)
    TYPEDEF         reduce using rule 241 (typedef_name -> TYPEID .)
    _THREAD_LOCAL   reduce using rule 241 (typedef_name -> TYPEID .)
    INLINE          reduce using rule 241 (typedef_name -> TYPEID .)
    _NORETURN       reduce using rule 241 (typedef_name -> TYPEID .)
    VOID            reduce using rule 241 (typedef_name -> TYPEID .)
    _BOOL           reduce using rule 241 (typedef_name -> TYPEID .)
    CHAR            reduce using rule 241 (typedef_name -> TYPEID .)
    SHORT           reduce using rule 241 (typedef_name -> TYPEID .)
    INT             reduce using rule 241 (typedef_name -> TYPEID .)
    LONG            reduce using rule 241 (typedef_name -> TYPEID .)
    FLOAT           reduce using rule 241 (typedef_name -> TYPEID .)
    DOUBLE          reduce using rule 241 (typedef_name -> TYPEID .)
    _COMPLEX        reduce using rule 241 (typedef_name -> TYPEID .)
    SIGNED          reduce using rule 241 (typedef_name -> TYPEID .)
    UNSIGNED        reduce using rule 241 (typedef_name -> TYPEID .)
    __INT128        reduce using rule 241 (typedef_name -> TYPEID .)
    _ALIGNAS        reduce using rule 241 (typedef_name -> TYPEID .)
    ID              reduce using rule 241 (typedef_name -> TYPEID .)
    LPAREN          reduce using rule 241 (typedef_name -> TYPEID .)
    TIMES           reduce using rule 241 (typedef_name -> TYPEID .)
    TYPEID          reduce using rule 241 (typedef_name -> TYPEID .)
    SEMI            reduce using rule 241 (typedef_name -> TYPEID .)
    LBRACKET        reduce using rule 241 (typedef_name -> TYPEID .)
    COMMA           reduce using rule 241 (typedef_name -> TYPEID .)
    RPAREN          reduce using rule 241 (typedef_name -> TYPEID .)
    COLON           reduce using rule 241 (typedef_name -> TYPEID .)


state 36

    (169) enum_specifier -> ENUM . ID
    (170) enum_specifier -> ENUM . TYPEID
    (171) enum_specifier -> ENUM . brace_open enumerator_list brace_close
    (172) enum_specifier -> ENUM . ID brace_open enumerator_list brace_close
    (173) enum_specifier -> ENUM . TYPEID brace_open enumerator_list brace_close
    (338) brace_open -> . LBRACE

    ID              shift and go to state 118
    TYPEID          shift and go to state 119
    LBRACE          shift and go to state 121

    brace_open                     shift and go to state 120

state 37

    (149) struct_or_union_specifier -> struct_or_union . ID
    (150) struct_or_union_specifier -> struct_or_union . TYPEID
    (151) struct_or_union_specifier -> struct_or_union . brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> struct_or_union . brace_open brace_close
    (153) struct_or_union_specifier -> struct_or_union . ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> struct_or_union . ID brace_open brace_close
    (155) struct_or_union_specifier -> struct_or_union . TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> struct_or_union . TYPEID brace_open brace_close
    (338) brace_open -> . LBRACE

    ID              shift and go to state 122
    TYPEID          shift and go to state 123
    LBRACE          shift and go to state 121

    brace_open                     shift and go to state 124

state 38

    (113) type_specifier_no_typeid -> VOID .

    CONST           reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    RESTRICT        reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    VOLATILE        reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    _ATOMIC         reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    AUTO            reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    REGISTER        reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    STATIC          reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    EXTERN          reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    TYPEDEF         reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    _THREAD_LOCAL   reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    INLINE          reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    _NORETURN       reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    VOID            reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    _BOOL           reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    CHAR            reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    SHORT           reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    INT             reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    LONG            reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    FLOAT           reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    DOUBLE          reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    _COMPLEX        reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    SIGNED          reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    UNSIGNED        reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    __INT128        reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    _ALIGNAS        reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    ID              reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    LPAREN          reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    TIMES           reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    TYPEID          reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    SEMI            reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    LBRACKET        reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    COMMA           reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    RPAREN          reduce using rule 113 (type_specifier_no_typeid -> VOID .)
    COLON           reduce using rule 113 (type_specifier_no_typeid -> VOID .)


state 39

    (114) type_specifier_no_typeid -> _BOOL .

    CONST           reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    RESTRICT        reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    VOLATILE        reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    _ATOMIC         reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    AUTO            reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    REGISTER        reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    STATIC          reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    EXTERN          reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    TYPEDEF         reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    _THREAD_LOCAL   reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    INLINE          reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    _NORETURN       reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    VOID            reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    _BOOL           reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    CHAR            reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    SHORT           reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    INT             reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    LONG            reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    FLOAT           reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    DOUBLE          reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    _COMPLEX        reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    SIGNED          reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    UNSIGNED        reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    __INT128        reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    _ALIGNAS        reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    ID              reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    LPAREN          reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    TIMES           reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    TYPEID          reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    SEMI            reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    LBRACKET        reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    COMMA           reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    RPAREN          reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)
    COLON           reduce using rule 114 (type_specifier_no_typeid -> _BOOL .)


state 40

    (115) type_specifier_no_typeid -> CHAR .

    CONST           reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    RESTRICT        reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    VOLATILE        reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    _ATOMIC         reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    AUTO            reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    REGISTER        reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    STATIC          reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    EXTERN          reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    TYPEDEF         reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    _THREAD_LOCAL   reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    INLINE          reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    _NORETURN       reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    VOID            reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    _BOOL           reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    CHAR            reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    SHORT           reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    INT             reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    LONG            reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    FLOAT           reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    DOUBLE          reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    _COMPLEX        reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    SIGNED          reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    UNSIGNED        reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    __INT128        reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    _ALIGNAS        reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    ID              reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    LPAREN          reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    TIMES           reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    TYPEID          reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    SEMI            reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    LBRACKET        reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    COMMA           reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    RPAREN          reduce using rule 115 (type_specifier_no_typeid -> CHAR .)
    COLON           reduce using rule 115 (type_specifier_no_typeid -> CHAR .)


state 41

    (116) type_specifier_no_typeid -> SHORT .

    CONST           reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    RESTRICT        reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    VOLATILE        reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    _ATOMIC         reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    AUTO            reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    REGISTER        reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    STATIC          reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    EXTERN          reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    TYPEDEF         reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    _THREAD_LOCAL   reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    INLINE          reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    _NORETURN       reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    VOID            reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    _BOOL           reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    CHAR            reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    SHORT           reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    INT             reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    LONG            reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    FLOAT           reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    DOUBLE          reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    _COMPLEX        reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    SIGNED          reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    UNSIGNED        reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    __INT128        reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    _ALIGNAS        reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    ID              reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    LPAREN          reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    TIMES           reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    TYPEID          reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    SEMI            reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    LBRACKET        reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    COMMA           reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    RPAREN          reduce using rule 116 (type_specifier_no_typeid -> SHORT .)
    COLON           reduce using rule 116 (type_specifier_no_typeid -> SHORT .)


state 42

    (117) type_specifier_no_typeid -> INT .

    CONST           reduce using rule 117 (type_specifier_no_typeid -> INT .)
    RESTRICT        reduce using rule 117 (type_specifier_no_typeid -> INT .)
    VOLATILE        reduce using rule 117 (type_specifier_no_typeid -> INT .)
    _ATOMIC         reduce using rule 117 (type_specifier_no_typeid -> INT .)
    AUTO            reduce using rule 117 (type_specifier_no_typeid -> INT .)
    REGISTER        reduce using rule 117 (type_specifier_no_typeid -> INT .)
    STATIC          reduce using rule 117 (type_specifier_no_typeid -> INT .)
    EXTERN          reduce using rule 117 (type_specifier_no_typeid -> INT .)
    TYPEDEF         reduce using rule 117 (type_specifier_no_typeid -> INT .)
    _THREAD_LOCAL   reduce using rule 117 (type_specifier_no_typeid -> INT .)
    INLINE          reduce using rule 117 (type_specifier_no_typeid -> INT .)
    _NORETURN       reduce using rule 117 (type_specifier_no_typeid -> INT .)
    VOID            reduce using rule 117 (type_specifier_no_typeid -> INT .)
    _BOOL           reduce using rule 117 (type_specifier_no_typeid -> INT .)
    CHAR            reduce using rule 117 (type_specifier_no_typeid -> INT .)
    SHORT           reduce using rule 117 (type_specifier_no_typeid -> INT .)
    INT             reduce using rule 117 (type_specifier_no_typeid -> INT .)
    LONG            reduce using rule 117 (type_specifier_no_typeid -> INT .)
    FLOAT           reduce using rule 117 (type_specifier_no_typeid -> INT .)
    DOUBLE          reduce using rule 117 (type_specifier_no_typeid -> INT .)
    _COMPLEX        reduce using rule 117 (type_specifier_no_typeid -> INT .)
    SIGNED          reduce using rule 117 (type_specifier_no_typeid -> INT .)
    UNSIGNED        reduce using rule 117 (type_specifier_no_typeid -> INT .)
    __INT128        reduce using rule 117 (type_specifier_no_typeid -> INT .)
    _ALIGNAS        reduce using rule 117 (type_specifier_no_typeid -> INT .)
    ID              reduce using rule 117 (type_specifier_no_typeid -> INT .)
    LPAREN          reduce using rule 117 (type_specifier_no_typeid -> INT .)
    TIMES           reduce using rule 117 (type_specifier_no_typeid -> INT .)
    TYPEID          reduce using rule 117 (type_specifier_no_typeid -> INT .)
    SEMI            reduce using rule 117 (type_specifier_no_typeid -> INT .)
    LBRACKET        reduce using rule 117 (type_specifier_no_typeid -> INT .)
    COMMA           reduce using rule 117 (type_specifier_no_typeid -> INT .)
    RPAREN          reduce using rule 117 (type_specifier_no_typeid -> INT .)
    COLON           reduce using rule 117 (type_specifier_no_typeid -> INT .)


state 43

    (118) type_specifier_no_typeid -> LONG .

    CONST           reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    RESTRICT        reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    VOLATILE        reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    _ATOMIC         reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    AUTO            reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    REGISTER        reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    STATIC          reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    EXTERN          reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    TYPEDEF         reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    _THREAD_LOCAL   reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    INLINE          reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    _NORETURN       reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    VOID            reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    _BOOL           reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    CHAR            reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    SHORT           reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    INT             reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    LONG            reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    FLOAT           reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    DOUBLE          reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    _COMPLEX        reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    SIGNED          reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    UNSIGNED        reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    __INT128        reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    _ALIGNAS        reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    ID              reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    LPAREN          reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    TIMES           reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    TYPEID          reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    SEMI            reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    LBRACKET        reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    COMMA           reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    RPAREN          reduce using rule 118 (type_specifier_no_typeid -> LONG .)
    COLON           reduce using rule 118 (type_specifier_no_typeid -> LONG .)


state 44

    (119) type_specifier_no_typeid -> FLOAT .

    CONST           reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    RESTRICT        reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    VOLATILE        reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    _ATOMIC         reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    AUTO            reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    REGISTER        reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    STATIC          reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    EXTERN          reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    TYPEDEF         reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    _THREAD_LOCAL   reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    INLINE          reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    _NORETURN       reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    VOID            reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    _BOOL           reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    CHAR            reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    SHORT           reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    INT             reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    LONG            reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    FLOAT           reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    DOUBLE          reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    _COMPLEX        reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    SIGNED          reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    UNSIGNED        reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    __INT128        reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    _ALIGNAS        reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    ID              reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    LPAREN          reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    TIMES           reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    TYPEID          reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    SEMI            reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    LBRACKET        reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    COMMA           reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    RPAREN          reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)
    COLON           reduce using rule 119 (type_specifier_no_typeid -> FLOAT .)


state 45

    (120) type_specifier_no_typeid -> DOUBLE .

    CONST           reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    RESTRICT        reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    VOLATILE        reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    _ATOMIC         reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    AUTO            reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    REGISTER        reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    STATIC          reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    EXTERN          reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    TYPEDEF         reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    _THREAD_LOCAL   reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    INLINE          reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    _NORETURN       reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    VOID            reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    _BOOL           reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    CHAR            reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    SHORT           reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    INT             reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    LONG            reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    FLOAT           reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    DOUBLE          reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    _COMPLEX        reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    SIGNED          reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    UNSIGNED        reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    __INT128        reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    _ALIGNAS        reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    ID              reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    LPAREN          reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    TIMES           reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    TYPEID          reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    SEMI            reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    LBRACKET        reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    COMMA           reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    RPAREN          reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)
    COLON           reduce using rule 120 (type_specifier_no_typeid -> DOUBLE .)


state 46

    (121) type_specifier_no_typeid -> _COMPLEX .

    CONST           reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    RESTRICT        reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    VOLATILE        reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    _ATOMIC         reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    AUTO            reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    REGISTER        reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    STATIC          reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    EXTERN          reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    TYPEDEF         reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    _THREAD_LOCAL   reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    INLINE          reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    _NORETURN       reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    VOID            reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    _BOOL           reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    CHAR            reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    SHORT           reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    INT             reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    LONG            reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    FLOAT           reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    DOUBLE          reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    _COMPLEX        reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    SIGNED          reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    UNSIGNED        reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    __INT128        reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    _ALIGNAS        reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    ID              reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    LPAREN          reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    TIMES           reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    TYPEID          reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    SEMI            reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    LBRACKET        reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    COMMA           reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    RPAREN          reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)
    COLON           reduce using rule 121 (type_specifier_no_typeid -> _COMPLEX .)


state 47

    (122) type_specifier_no_typeid -> SIGNED .

    CONST           reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    RESTRICT        reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    VOLATILE        reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    _ATOMIC         reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    AUTO            reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    REGISTER        reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    STATIC          reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    EXTERN          reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    TYPEDEF         reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    _THREAD_LOCAL   reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    INLINE          reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    _NORETURN       reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    VOID            reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    _BOOL           reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    CHAR            reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    SHORT           reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    INT             reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    LONG            reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    FLOAT           reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    DOUBLE          reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    _COMPLEX        reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    SIGNED          reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    UNSIGNED        reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    __INT128        reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    _ALIGNAS        reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    ID              reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    LPAREN          reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    TIMES           reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    TYPEID          reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    SEMI            reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    LBRACKET        reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    COMMA           reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    RPAREN          reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)
    COLON           reduce using rule 122 (type_specifier_no_typeid -> SIGNED .)


state 48

    (123) type_specifier_no_typeid -> UNSIGNED .

    CONST           reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    RESTRICT        reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    VOLATILE        reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    _ATOMIC         reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    AUTO            reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    REGISTER        reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    STATIC          reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    EXTERN          reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    TYPEDEF         reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    _THREAD_LOCAL   reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    INLINE          reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    _NORETURN       reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    VOID            reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    _BOOL           reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    CHAR            reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    SHORT           reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    INT             reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    LONG            reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    FLOAT           reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    DOUBLE          reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    _COMPLEX        reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    SIGNED          reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    UNSIGNED        reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    __INT128        reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    _ALIGNAS        reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    ID              reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    LPAREN          reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    TIMES           reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    TYPEID          reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    SEMI            reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    LBRACKET        reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    COMMA           reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    RPAREN          reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)
    COLON           reduce using rule 123 (type_specifier_no_typeid -> UNSIGNED .)


state 49

    (124) type_specifier_no_typeid -> __INT128 .

    CONST           reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    RESTRICT        reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    VOLATILE        reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    _ATOMIC         reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    AUTO            reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    REGISTER        reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    STATIC          reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    EXTERN          reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    TYPEDEF         reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    _THREAD_LOCAL   reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    INLINE          reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    _NORETURN       reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    VOID            reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    _BOOL           reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    CHAR            reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    SHORT           reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    INT             reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    LONG            reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    FLOAT           reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    DOUBLE          reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    _COMPLEX        reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    SIGNED          reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    UNSIGNED        reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    __INT128        reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    _ALIGNAS        reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    ID              reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    LPAREN          reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    TIMES           reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    TYPEID          reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    SEMI            reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    LBRACKET        reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    COMMA           reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    RPAREN          reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)
    COLON           reduce using rule 124 (type_specifier_no_typeid -> __INT128 .)


state 50

    (130) atomic_specifier -> _ATOMIC . LPAREN type_name RPAREN
    (134) type_qualifier -> _ATOMIC .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 125
    CONST           reduce using rule 134 (type_qualifier -> _ATOMIC .)
    RESTRICT        reduce using rule 134 (type_qualifier -> _ATOMIC .)
    VOLATILE        reduce using rule 134 (type_qualifier -> _ATOMIC .)
    _ATOMIC         reduce using rule 134 (type_qualifier -> _ATOMIC .)
    AUTO            reduce using rule 134 (type_qualifier -> _ATOMIC .)
    REGISTER        reduce using rule 134 (type_qualifier -> _ATOMIC .)
    STATIC          reduce using rule 134 (type_qualifier -> _ATOMIC .)
    EXTERN          reduce using rule 134 (type_qualifier -> _ATOMIC .)
    TYPEDEF         reduce using rule 134 (type_qualifier -> _ATOMIC .)
    _THREAD_LOCAL   reduce using rule 134 (type_qualifier -> _ATOMIC .)
    INLINE          reduce using rule 134 (type_qualifier -> _ATOMIC .)
    _NORETURN       reduce using rule 134 (type_qualifier -> _ATOMIC .)
    _ALIGNAS        reduce using rule 134 (type_qualifier -> _ATOMIC .)
    TYPEID          reduce using rule 134 (type_qualifier -> _ATOMIC .)
    ENUM            reduce using rule 134 (type_qualifier -> _ATOMIC .)
    VOID            reduce using rule 134 (type_qualifier -> _ATOMIC .)
    _BOOL           reduce using rule 134 (type_qualifier -> _ATOMIC .)
    CHAR            reduce using rule 134 (type_qualifier -> _ATOMIC .)
    SHORT           reduce using rule 134 (type_qualifier -> _ATOMIC .)
    INT             reduce using rule 134 (type_qualifier -> _ATOMIC .)
    LONG            reduce using rule 134 (type_qualifier -> _ATOMIC .)
    FLOAT           reduce using rule 134 (type_qualifier -> _ATOMIC .)
    DOUBLE          reduce using rule 134 (type_qualifier -> _ATOMIC .)
    _COMPLEX        reduce using rule 134 (type_qualifier -> _ATOMIC .)
    SIGNED          reduce using rule 134 (type_qualifier -> _ATOMIC .)
    UNSIGNED        reduce using rule 134 (type_qualifier -> _ATOMIC .)
    __INT128        reduce using rule 134 (type_qualifier -> _ATOMIC .)
    STRUCT          reduce using rule 134 (type_qualifier -> _ATOMIC .)
    UNION           reduce using rule 134 (type_qualifier -> _ATOMIC .)
    ID              reduce using rule 134 (type_qualifier -> _ATOMIC .)
    TIMES           reduce using rule 134 (type_qualifier -> _ATOMIC .)
    SEMI            reduce using rule 134 (type_qualifier -> _ATOMIC .)

  ! LPAREN          [ reduce using rule 134 (type_qualifier -> _ATOMIC .) ]


state 51

    (131) type_qualifier -> CONST .

    CONST           reduce using rule 131 (type_qualifier -> CONST .)
    RESTRICT        reduce using rule 131 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 131 (type_qualifier -> CONST .)
    _ATOMIC         reduce using rule 131 (type_qualifier -> CONST .)
    AUTO            reduce using rule 131 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 131 (type_qualifier -> CONST .)
    STATIC          reduce using rule 131 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 131 (type_qualifier -> CONST .)
    TYPEDEF         reduce using rule 131 (type_qualifier -> CONST .)
    _THREAD_LOCAL   reduce using rule 131 (type_qualifier -> CONST .)
    INLINE          reduce using rule 131 (type_qualifier -> CONST .)
    _NORETURN       reduce using rule 131 (type_qualifier -> CONST .)
    _ALIGNAS        reduce using rule 131 (type_qualifier -> CONST .)
    TYPEID          reduce using rule 131 (type_qualifier -> CONST .)
    ENUM            reduce using rule 131 (type_qualifier -> CONST .)
    VOID            reduce using rule 131 (type_qualifier -> CONST .)
    _BOOL           reduce using rule 131 (type_qualifier -> CONST .)
    CHAR            reduce using rule 131 (type_qualifier -> CONST .)
    SHORT           reduce using rule 131 (type_qualifier -> CONST .)
    INT             reduce using rule 131 (type_qualifier -> CONST .)
    LONG            reduce using rule 131 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 131 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 131 (type_qualifier -> CONST .)
    _COMPLEX        reduce using rule 131 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 131 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 131 (type_qualifier -> CONST .)
    __INT128        reduce using rule 131 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 131 (type_qualifier -> CONST .)
    UNION           reduce using rule 131 (type_qualifier -> CONST .)
    ID              reduce using rule 131 (type_qualifier -> CONST .)
    LPAREN          reduce using rule 131 (type_qualifier -> CONST .)
    TIMES           reduce using rule 131 (type_qualifier -> CONST .)
    SEMI            reduce using rule 131 (type_qualifier -> CONST .)
    LBRACKET        reduce using rule 131 (type_qualifier -> CONST .)
    COMMA           reduce using rule 131 (type_qualifier -> CONST .)
    RPAREN          reduce using rule 131 (type_qualifier -> CONST .)
    PLUSPLUS        reduce using rule 131 (type_qualifier -> CONST .)
    MINUSMINUS      reduce using rule 131 (type_qualifier -> CONST .)
    SIZEOF          reduce using rule 131 (type_qualifier -> CONST .)
    _ALIGNOF        reduce using rule 131 (type_qualifier -> CONST .)
    AND             reduce using rule 131 (type_qualifier -> CONST .)
    PLUS            reduce using rule 131 (type_qualifier -> CONST .)
    MINUS           reduce using rule 131 (type_qualifier -> CONST .)
    NOT             reduce using rule 131 (type_qualifier -> CONST .)
    LNOT            reduce using rule 131 (type_qualifier -> CONST .)
    OFFSETOF        reduce using rule 131 (type_qualifier -> CONST .)
    INT_CONST_DEC   reduce using rule 131 (type_qualifier -> CONST .)
    INT_CONST_OCT   reduce using rule 131 (type_qualifier -> CONST .)
    INT_CONST_HEX   reduce using rule 131 (type_qualifier -> CONST .)
    INT_CONST_BIN   reduce using rule 131 (type_qualifier -> CONST .)
    INT_CONST_CHAR  reduce using rule 131 (type_qualifier -> CONST .)
    FLOAT_CONST     reduce using rule 131 (type_qualifier -> CONST .)
    HEX_FLOAT_CONST reduce using rule 131 (type_qualifier -> CONST .)
    CHAR_CONST      reduce using rule 131 (type_qualifier -> CONST .)
    WCHAR_CONST     reduce using rule 131 (type_qualifier -> CONST .)
    U8CHAR_CONST    reduce using rule 131 (type_qualifier -> CONST .)
    U16CHAR_CONST   reduce using rule 131 (type_qualifier -> CONST .)
    U32CHAR_CONST   reduce using rule 131 (type_qualifier -> CONST .)
    STRING_LITERAL  reduce using rule 131 (type_qualifier -> CONST .)
    WSTRING_LITERAL reduce using rule 131 (type_qualifier -> CONST .)
    U8STRING_LITERAL reduce using rule 131 (type_qualifier -> CONST .)
    U16STRING_LITERAL reduce using rule 131 (type_qualifier -> CONST .)
    U32STRING_LITERAL reduce using rule 131 (type_qualifier -> CONST .)
    RBRACKET        reduce using rule 131 (type_qualifier -> CONST .)
    COLON           reduce using rule 131 (type_qualifier -> CONST .)


state 52

    (132) type_qualifier -> RESTRICT .

    CONST           reduce using rule 132 (type_qualifier -> RESTRICT .)
    RESTRICT        reduce using rule 132 (type_qualifier -> RESTRICT .)
    VOLATILE        reduce using rule 132 (type_qualifier -> RESTRICT .)
    _ATOMIC         reduce using rule 132 (type_qualifier -> RESTRICT .)
    AUTO            reduce using rule 132 (type_qualifier -> RESTRICT .)
    REGISTER        reduce using rule 132 (type_qualifier -> RESTRICT .)
    STATIC          reduce using rule 132 (type_qualifier -> RESTRICT .)
    EXTERN          reduce using rule 132 (type_qualifier -> RESTRICT .)
    TYPEDEF         reduce using rule 132 (type_qualifier -> RESTRICT .)
    _THREAD_LOCAL   reduce using rule 132 (type_qualifier -> RESTRICT .)
    INLINE          reduce using rule 132 (type_qualifier -> RESTRICT .)
    _NORETURN       reduce using rule 132 (type_qualifier -> RESTRICT .)
    _ALIGNAS        reduce using rule 132 (type_qualifier -> RESTRICT .)
    TYPEID          reduce using rule 132 (type_qualifier -> RESTRICT .)
    ENUM            reduce using rule 132 (type_qualifier -> RESTRICT .)
    VOID            reduce using rule 132 (type_qualifier -> RESTRICT .)
    _BOOL           reduce using rule 132 (type_qualifier -> RESTRICT .)
    CHAR            reduce using rule 132 (type_qualifier -> RESTRICT .)
    SHORT           reduce using rule 132 (type_qualifier -> RESTRICT .)
    INT             reduce using rule 132 (type_qualifier -> RESTRICT .)
    LONG            reduce using rule 132 (type_qualifier -> RESTRICT .)
    FLOAT           reduce using rule 132 (type_qualifier -> RESTRICT .)
    DOUBLE          reduce using rule 132 (type_qualifier -> RESTRICT .)
    _COMPLEX        reduce using rule 132 (type_qualifier -> RESTRICT .)
    SIGNED          reduce using rule 132 (type_qualifier -> RESTRICT .)
    UNSIGNED        reduce using rule 132 (type_qualifier -> RESTRICT .)
    __INT128        reduce using rule 132 (type_qualifier -> RESTRICT .)
    STRUCT          reduce using rule 132 (type_qualifier -> RESTRICT .)
    UNION           reduce using rule 132 (type_qualifier -> RESTRICT .)
    ID              reduce using rule 132 (type_qualifier -> RESTRICT .)
    LPAREN          reduce using rule 132 (type_qualifier -> RESTRICT .)
    TIMES           reduce using rule 132 (type_qualifier -> RESTRICT .)
    SEMI            reduce using rule 132 (type_qualifier -> RESTRICT .)
    LBRACKET        reduce using rule 132 (type_qualifier -> RESTRICT .)
    COMMA           reduce using rule 132 (type_qualifier -> RESTRICT .)
    RPAREN          reduce using rule 132 (type_qualifier -> RESTRICT .)
    PLUSPLUS        reduce using rule 132 (type_qualifier -> RESTRICT .)
    MINUSMINUS      reduce using rule 132 (type_qualifier -> RESTRICT .)
    SIZEOF          reduce using rule 132 (type_qualifier -> RESTRICT .)
    _ALIGNOF        reduce using rule 132 (type_qualifier -> RESTRICT .)
    AND             reduce using rule 132 (type_qualifier -> RESTRICT .)
    PLUS            reduce using rule 132 (type_qualifier -> RESTRICT .)
    MINUS           reduce using rule 132 (type_qualifier -> RESTRICT .)
    NOT             reduce using rule 132 (type_qualifier -> RESTRICT .)
    LNOT            reduce using rule 132 (type_qualifier -> RESTRICT .)
    OFFSETOF        reduce using rule 132 (type_qualifier -> RESTRICT .)
    INT_CONST_DEC   reduce using rule 132 (type_qualifier -> RESTRICT .)
    INT_CONST_OCT   reduce using rule 132 (type_qualifier -> RESTRICT .)
    INT_CONST_HEX   reduce using rule 132 (type_qualifier -> RESTRICT .)
    INT_CONST_BIN   reduce using rule 132 (type_qualifier -> RESTRICT .)
    INT_CONST_CHAR  reduce using rule 132 (type_qualifier -> RESTRICT .)
    FLOAT_CONST     reduce using rule 132 (type_qualifier -> RESTRICT .)
    HEX_FLOAT_CONST reduce using rule 132 (type_qualifier -> RESTRICT .)
    CHAR_CONST      reduce using rule 132 (type_qualifier -> RESTRICT .)
    WCHAR_CONST     reduce using rule 132 (type_qualifier -> RESTRICT .)
    U8CHAR_CONST    reduce using rule 132 (type_qualifier -> RESTRICT .)
    U16CHAR_CONST   reduce using rule 132 (type_qualifier -> RESTRICT .)
    U32CHAR_CONST   reduce using rule 132 (type_qualifier -> RESTRICT .)
    STRING_LITERAL  reduce using rule 132 (type_qualifier -> RESTRICT .)
    WSTRING_LITERAL reduce using rule 132 (type_qualifier -> RESTRICT .)
    U8STRING_LITERAL reduce using rule 132 (type_qualifier -> RESTRICT .)
    U16STRING_LITERAL reduce using rule 132 (type_qualifier -> RESTRICT .)
    U32STRING_LITERAL reduce using rule 132 (type_qualifier -> RESTRICT .)
    RBRACKET        reduce using rule 132 (type_qualifier -> RESTRICT .)
    COLON           reduce using rule 132 (type_qualifier -> RESTRICT .)


state 53

    (133) type_qualifier -> VOLATILE .

    CONST           reduce using rule 133 (type_qualifier -> VOLATILE .)
    RESTRICT        reduce using rule 133 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 133 (type_qualifier -> VOLATILE .)
    _ATOMIC         reduce using rule 133 (type_qualifier -> VOLATILE .)
    AUTO            reduce using rule 133 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 133 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 133 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 133 (type_qualifier -> VOLATILE .)
    TYPEDEF         reduce using rule 133 (type_qualifier -> VOLATILE .)
    _THREAD_LOCAL   reduce using rule 133 (type_qualifier -> VOLATILE .)
    INLINE          reduce using rule 133 (type_qualifier -> VOLATILE .)
    _NORETURN       reduce using rule 133 (type_qualifier -> VOLATILE .)
    _ALIGNAS        reduce using rule 133 (type_qualifier -> VOLATILE .)
    TYPEID          reduce using rule 133 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 133 (type_qualifier -> VOLATILE .)
    VOID            reduce using rule 133 (type_qualifier -> VOLATILE .)
    _BOOL           reduce using rule 133 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 133 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 133 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 133 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 133 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 133 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 133 (type_qualifier -> VOLATILE .)
    _COMPLEX        reduce using rule 133 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 133 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 133 (type_qualifier -> VOLATILE .)
    __INT128        reduce using rule 133 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 133 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 133 (type_qualifier -> VOLATILE .)
    ID              reduce using rule 133 (type_qualifier -> VOLATILE .)
    LPAREN          reduce using rule 133 (type_qualifier -> VOLATILE .)
    TIMES           reduce using rule 133 (type_qualifier -> VOLATILE .)
    SEMI            reduce using rule 133 (type_qualifier -> VOLATILE .)
    LBRACKET        reduce using rule 133 (type_qualifier -> VOLATILE .)
    COMMA           reduce using rule 133 (type_qualifier -> VOLATILE .)
    RPAREN          reduce using rule 133 (type_qualifier -> VOLATILE .)
    PLUSPLUS        reduce using rule 133 (type_qualifier -> VOLATILE .)
    MINUSMINUS      reduce using rule 133 (type_qualifier -> VOLATILE .)
    SIZEOF          reduce using rule 133 (type_qualifier -> VOLATILE .)
    _ALIGNOF        reduce using rule 133 (type_qualifier -> VOLATILE .)
    AND             reduce using rule 133 (type_qualifier -> VOLATILE .)
    PLUS            reduce using rule 133 (type_qualifier -> VOLATILE .)
    MINUS           reduce using rule 133 (type_qualifier -> VOLATILE .)
    NOT             reduce using rule 133 (type_qualifier -> VOLATILE .)
    LNOT            reduce using rule 133 (type_qualifier -> VOLATILE .)
    OFFSETOF        reduce using rule 133 (type_qualifier -> VOLATILE .)
    INT_CONST_DEC   reduce using rule 133 (type_qualifier -> VOLATILE .)
    INT_CONST_OCT   reduce using rule 133 (type_qualifier -> VOLATILE .)
    INT_CONST_HEX   reduce using rule 133 (type_qualifier -> VOLATILE .)
    INT_CONST_BIN   reduce using rule 133 (type_qualifier -> VOLATILE .)
    INT_CONST_CHAR  reduce using rule 133 (type_qualifier -> VOLATILE .)
    FLOAT_CONST     reduce using rule 133 (type_qualifier -> VOLATILE .)
    HEX_FLOAT_CONST reduce using rule 133 (type_qualifier -> VOLATILE .)
    CHAR_CONST      reduce using rule 133 (type_qualifier -> VOLATILE .)
    WCHAR_CONST     reduce using rule 133 (type_qualifier -> VOLATILE .)
    U8CHAR_CONST    reduce using rule 133 (type_qualifier -> VOLATILE .)
    U16CHAR_CONST   reduce using rule 133 (type_qualifier -> VOLATILE .)
    U32CHAR_CONST   reduce using rule 133 (type_qualifier -> VOLATILE .)
    STRING_LITERAL  reduce using rule 133 (type_qualifier -> VOLATILE .)
    WSTRING_LITERAL reduce using rule 133 (type_qualifier -> VOLATILE .)
    U8STRING_LITERAL reduce using rule 133 (type_qualifier -> VOLATILE .)
    U16STRING_LITERAL reduce using rule 133 (type_qualifier -> VOLATILE .)
    U32STRING_LITERAL reduce using rule 133 (type_qualifier -> VOLATILE .)
    RBRACKET        reduce using rule 133 (type_qualifier -> VOLATILE .)
    COLON           reduce using rule 133 (type_qualifier -> VOLATILE .)


state 54

    (105) storage_class_specifier -> AUTO .

    CONST           reduce using rule 105 (storage_class_specifier -> AUTO .)
    RESTRICT        reduce using rule 105 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 105 (storage_class_specifier -> AUTO .)
    _ATOMIC         reduce using rule 105 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 105 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 105 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 105 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 105 (storage_class_specifier -> AUTO .)
    TYPEDEF         reduce using rule 105 (storage_class_specifier -> AUTO .)
    _THREAD_LOCAL   reduce using rule 105 (storage_class_specifier -> AUTO .)
    INLINE          reduce using rule 105 (storage_class_specifier -> AUTO .)
    _NORETURN       reduce using rule 105 (storage_class_specifier -> AUTO .)
    _ALIGNAS        reduce using rule 105 (storage_class_specifier -> AUTO .)
    TYPEID          reduce using rule 105 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 105 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 105 (storage_class_specifier -> AUTO .)
    _BOOL           reduce using rule 105 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 105 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 105 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 105 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 105 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 105 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 105 (storage_class_specifier -> AUTO .)
    _COMPLEX        reduce using rule 105 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 105 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 105 (storage_class_specifier -> AUTO .)
    __INT128        reduce using rule 105 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 105 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 105 (storage_class_specifier -> AUTO .)
    ID              reduce using rule 105 (storage_class_specifier -> AUTO .)
    LPAREN          reduce using rule 105 (storage_class_specifier -> AUTO .)
    TIMES           reduce using rule 105 (storage_class_specifier -> AUTO .)
    SEMI            reduce using rule 105 (storage_class_specifier -> AUTO .)
    LBRACKET        reduce using rule 105 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 105 (storage_class_specifier -> AUTO .)
    RPAREN          reduce using rule 105 (storage_class_specifier -> AUTO .)


state 55

    (106) storage_class_specifier -> REGISTER .

    CONST           reduce using rule 106 (storage_class_specifier -> REGISTER .)
    RESTRICT        reduce using rule 106 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 106 (storage_class_specifier -> REGISTER .)
    _ATOMIC         reduce using rule 106 (storage_class_specifier -> REGISTER .)
    AUTO            reduce using rule 106 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 106 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 106 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 106 (storage_class_specifier -> REGISTER .)
    TYPEDEF         reduce using rule 106 (storage_class_specifier -> REGISTER .)
    _THREAD_LOCAL   reduce using rule 106 (storage_class_specifier -> REGISTER .)
    INLINE          reduce using rule 106 (storage_class_specifier -> REGISTER .)
    _NORETURN       reduce using rule 106 (storage_class_specifier -> REGISTER .)
    _ALIGNAS        reduce using rule 106 (storage_class_specifier -> REGISTER .)
    TYPEID          reduce using rule 106 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 106 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 106 (storage_class_specifier -> REGISTER .)
    _BOOL           reduce using rule 106 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 106 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 106 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 106 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 106 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 106 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 106 (storage_class_specifier -> REGISTER .)
    _COMPLEX        reduce using rule 106 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 106 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 106 (storage_class_specifier -> REGISTER .)
    __INT128        reduce using rule 106 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 106 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 106 (storage_class_specifier -> REGISTER .)
    ID              reduce using rule 106 (storage_class_specifier -> REGISTER .)
    LPAREN          reduce using rule 106 (storage_class_specifier -> REGISTER .)
    TIMES           reduce using rule 106 (storage_class_specifier -> REGISTER .)
    SEMI            reduce using rule 106 (storage_class_specifier -> REGISTER .)
    LBRACKET        reduce using rule 106 (storage_class_specifier -> REGISTER .)
    COMMA           reduce using rule 106 (storage_class_specifier -> REGISTER .)
    RPAREN          reduce using rule 106 (storage_class_specifier -> REGISTER .)


state 56

    (108) storage_class_specifier -> EXTERN .

    CONST           reduce using rule 108 (storage_class_specifier -> EXTERN .)
    RESTRICT        reduce using rule 108 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 108 (storage_class_specifier -> EXTERN .)
    _ATOMIC         reduce using rule 108 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 108 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 108 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 108 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 108 (storage_class_specifier -> EXTERN .)
    TYPEDEF         reduce using rule 108 (storage_class_specifier -> EXTERN .)
    _THREAD_LOCAL   reduce using rule 108 (storage_class_specifier -> EXTERN .)
    INLINE          reduce using rule 108 (storage_class_specifier -> EXTERN .)
    _NORETURN       reduce using rule 108 (storage_class_specifier -> EXTERN .)
    _ALIGNAS        reduce using rule 108 (storage_class_specifier -> EXTERN .)
    TYPEID          reduce using rule 108 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 108 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 108 (storage_class_specifier -> EXTERN .)
    _BOOL           reduce using rule 108 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 108 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 108 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 108 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 108 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 108 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 108 (storage_class_specifier -> EXTERN .)
    _COMPLEX        reduce using rule 108 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 108 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 108 (storage_class_specifier -> EXTERN .)
    __INT128        reduce using rule 108 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 108 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 108 (storage_class_specifier -> EXTERN .)
    ID              reduce using rule 108 (storage_class_specifier -> EXTERN .)
    LPAREN          reduce using rule 108 (storage_class_specifier -> EXTERN .)
    TIMES           reduce using rule 108 (storage_class_specifier -> EXTERN .)
    SEMI            reduce using rule 108 (storage_class_specifier -> EXTERN .)
    LBRACKET        reduce using rule 108 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 108 (storage_class_specifier -> EXTERN .)
    RPAREN          reduce using rule 108 (storage_class_specifier -> EXTERN .)


state 57

    (109) storage_class_specifier -> TYPEDEF .

    CONST           reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    RESTRICT        reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    _ATOMIC         reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    AUTO            reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    TYPEDEF         reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    _THREAD_LOCAL   reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    INLINE          reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    _NORETURN       reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    _ALIGNAS        reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    TYPEID          reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    _BOOL           reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    _COMPLEX        reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    __INT128        reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    UNION           reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    ID              reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    LPAREN          reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    TIMES           reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    SEMI            reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    LBRACKET        reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    COMMA           reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    RPAREN          reduce using rule 109 (storage_class_specifier -> TYPEDEF .)


state 58

    (110) storage_class_specifier -> _THREAD_LOCAL .

    CONST           reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    RESTRICT        reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    VOLATILE        reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    _ATOMIC         reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    AUTO            reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    REGISTER        reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    STATIC          reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    EXTERN          reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    TYPEDEF         reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    _THREAD_LOCAL   reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    INLINE          reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    _NORETURN       reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    _ALIGNAS        reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    TYPEID          reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    ENUM            reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    VOID            reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    _BOOL           reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    CHAR            reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    SHORT           reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    INT             reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    LONG            reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    FLOAT           reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    DOUBLE          reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    _COMPLEX        reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    SIGNED          reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    UNSIGNED        reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    __INT128        reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    STRUCT          reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    UNION           reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    ID              reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    LPAREN          reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    TIMES           reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    SEMI            reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    LBRACKET        reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    COMMA           reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)
    RPAREN          reduce using rule 110 (storage_class_specifier -> _THREAD_LOCAL .)


state 59

    (111) function_specifier -> INLINE .

    CONST           reduce using rule 111 (function_specifier -> INLINE .)
    RESTRICT        reduce using rule 111 (function_specifier -> INLINE .)
    VOLATILE        reduce using rule 111 (function_specifier -> INLINE .)
    _ATOMIC         reduce using rule 111 (function_specifier -> INLINE .)
    AUTO            reduce using rule 111 (function_specifier -> INLINE .)
    REGISTER        reduce using rule 111 (function_specifier -> INLINE .)
    STATIC          reduce using rule 111 (function_specifier -> INLINE .)
    EXTERN          reduce using rule 111 (function_specifier -> INLINE .)
    TYPEDEF         reduce using rule 111 (function_specifier -> INLINE .)
    _THREAD_LOCAL   reduce using rule 111 (function_specifier -> INLINE .)
    INLINE          reduce using rule 111 (function_specifier -> INLINE .)
    _NORETURN       reduce using rule 111 (function_specifier -> INLINE .)
    _ALIGNAS        reduce using rule 111 (function_specifier -> INLINE .)
    TYPEID          reduce using rule 111 (function_specifier -> INLINE .)
    ENUM            reduce using rule 111 (function_specifier -> INLINE .)
    VOID            reduce using rule 111 (function_specifier -> INLINE .)
    _BOOL           reduce using rule 111 (function_specifier -> INLINE .)
    CHAR            reduce using rule 111 (function_specifier -> INLINE .)
    SHORT           reduce using rule 111 (function_specifier -> INLINE .)
    INT             reduce using rule 111 (function_specifier -> INLINE .)
    LONG            reduce using rule 111 (function_specifier -> INLINE .)
    FLOAT           reduce using rule 111 (function_specifier -> INLINE .)
    DOUBLE          reduce using rule 111 (function_specifier -> INLINE .)
    _COMPLEX        reduce using rule 111 (function_specifier -> INLINE .)
    SIGNED          reduce using rule 111 (function_specifier -> INLINE .)
    UNSIGNED        reduce using rule 111 (function_specifier -> INLINE .)
    __INT128        reduce using rule 111 (function_specifier -> INLINE .)
    STRUCT          reduce using rule 111 (function_specifier -> INLINE .)
    UNION           reduce using rule 111 (function_specifier -> INLINE .)
    ID              reduce using rule 111 (function_specifier -> INLINE .)
    LPAREN          reduce using rule 111 (function_specifier -> INLINE .)
    TIMES           reduce using rule 111 (function_specifier -> INLINE .)
    SEMI            reduce using rule 111 (function_specifier -> INLINE .)
    LBRACKET        reduce using rule 111 (function_specifier -> INLINE .)
    COMMA           reduce using rule 111 (function_specifier -> INLINE .)
    RPAREN          reduce using rule 111 (function_specifier -> INLINE .)


state 60

    (112) function_specifier -> _NORETURN .

    CONST           reduce using rule 112 (function_specifier -> _NORETURN .)
    RESTRICT        reduce using rule 112 (function_specifier -> _NORETURN .)
    VOLATILE        reduce using rule 112 (function_specifier -> _NORETURN .)
    _ATOMIC         reduce using rule 112 (function_specifier -> _NORETURN .)
    AUTO            reduce using rule 112 (function_specifier -> _NORETURN .)
    REGISTER        reduce using rule 112 (function_specifier -> _NORETURN .)
    STATIC          reduce using rule 112 (function_specifier -> _NORETURN .)
    EXTERN          reduce using rule 112 (function_specifier -> _NORETURN .)
    TYPEDEF         reduce using rule 112 (function_specifier -> _NORETURN .)
    _THREAD_LOCAL   reduce using rule 112 (function_specifier -> _NORETURN .)
    INLINE          reduce using rule 112 (function_specifier -> _NORETURN .)
    _NORETURN       reduce using rule 112 (function_specifier -> _NORETURN .)
    _ALIGNAS        reduce using rule 112 (function_specifier -> _NORETURN .)
    TYPEID          reduce using rule 112 (function_specifier -> _NORETURN .)
    ENUM            reduce using rule 112 (function_specifier -> _NORETURN .)
    VOID            reduce using rule 112 (function_specifier -> _NORETURN .)
    _BOOL           reduce using rule 112 (function_specifier -> _NORETURN .)
    CHAR            reduce using rule 112 (function_specifier -> _NORETURN .)
    SHORT           reduce using rule 112 (function_specifier -> _NORETURN .)
    INT             reduce using rule 112 (function_specifier -> _NORETURN .)
    LONG            reduce using rule 112 (function_specifier -> _NORETURN .)
    FLOAT           reduce using rule 112 (function_specifier -> _NORETURN .)
    DOUBLE          reduce using rule 112 (function_specifier -> _NORETURN .)
    _COMPLEX        reduce using rule 112 (function_specifier -> _NORETURN .)
    SIGNED          reduce using rule 112 (function_specifier -> _NORETURN .)
    UNSIGNED        reduce using rule 112 (function_specifier -> _NORETURN .)
    __INT128        reduce using rule 112 (function_specifier -> _NORETURN .)
    STRUCT          reduce using rule 112 (function_specifier -> _NORETURN .)
    UNION           reduce using rule 112 (function_specifier -> _NORETURN .)
    ID              reduce using rule 112 (function_specifier -> _NORETURN .)
    LPAREN          reduce using rule 112 (function_specifier -> _NORETURN .)
    TIMES           reduce using rule 112 (function_specifier -> _NORETURN .)
    SEMI            reduce using rule 112 (function_specifier -> _NORETURN .)
    LBRACKET        reduce using rule 112 (function_specifier -> _NORETURN .)
    COMMA           reduce using rule 112 (function_specifier -> _NORETURN .)
    RPAREN          reduce using rule 112 (function_specifier -> _NORETURN .)


state 61

    (177) alignment_specifier -> _ALIGNAS . LPAREN type_name RPAREN
    (178) alignment_specifier -> _ALIGNAS . LPAREN constant_expression RPAREN

    LPAREN          shift and go to state 126


state 62

    (157) struct_or_union -> STRUCT .

    ID              reduce using rule 157 (struct_or_union -> STRUCT .)
    TYPEID          reduce using rule 157 (struct_or_union -> STRUCT .)
    LBRACE          reduce using rule 157 (struct_or_union -> STRUCT .)


state 63

    (158) struct_or_union -> UNION .

    ID              reduce using rule 158 (struct_or_union -> UNION .)
    TYPEID          reduce using rule 158 (struct_or_union -> UNION .)
    LBRACE          reduce using rule 158 (struct_or_union -> UNION .)


state 64

    (61) translation_unit -> translation_unit external_declaration .

    SEMI            reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    PPHASH          reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    PPPRAGMA        reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    _PRAGMA         reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    _STATIC_ASSERT  reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    ID              reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    LPAREN          reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    TIMES           reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    TYPEID          reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    ENUM            reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    _BOOL           reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    _COMPLEX        reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    __INT128        reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    _ATOMIC         reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    CONST           reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    RESTRICT        reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    VOLATILE        reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    AUTO            reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    REGISTER        reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    TYPEDEF         reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    _THREAD_LOCAL   reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    INLINE          reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    _NORETURN       reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    _ALIGNAS        reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    UNION           reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 61 (translation_unit -> translation_unit external_declaration .)


state 65

    (76) function_definition -> id_declarator declaration_list_opt . compound_statement
    (221) compound_statement -> . brace_open block_item_list_opt brace_close
    (338) brace_open -> . LBRACE

    LBRACE          shift and go to state 121

    compound_statement             shift and go to state 127
    brace_open                     shift and go to state 128

state 66

    (7) declaration_list_opt -> empty .

    LBRACE          reduce using rule 7 (declaration_list_opt -> empty .)


state 67

    (8) declaration_list_opt -> declaration_list .
    (92) declaration_list -> declaration_list . declaration
    (90) declaration -> . decl_body SEMI
    (88) decl_body -> . declaration_specifiers init_declarator_list_opt
    (89) decl_body -> . declaration_specifiers_no_type id_init_declarator_list_opt
    (98) declaration_specifiers -> . declaration_specifiers type_qualifier
    (99) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (100) declaration_specifiers -> . declaration_specifiers function_specifier
    (101) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (102) declaration_specifiers -> . type_specifier
    (103) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (104) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (93) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (94) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (95) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (96) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (97) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) storage_class_specifier -> . STATIC
    (108) storage_class_specifier -> . EXTERN
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . _THREAD_LOCAL
    (111) function_specifier -> . INLINE
    (112) function_specifier -> . _NORETURN
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION

    LBRACE          reduce using rule 8 (declaration_list_opt -> declaration_list .)
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 72
    AUTO            shift and go to state 54
    REGISTER        shift and go to state 55
    STATIC          shift and go to state 29
    EXTERN          shift and go to state 56
    TYPEDEF         shift and go to state 57
    _THREAD_LOCAL   shift and go to state 58
    INLINE          shift and go to state 59
    _NORETURN       shift and go to state 60
    _ALIGNAS        shift and go to state 61
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63

    declaration                    shift and go to state 129
    decl_body                      shift and go to state 13
    declaration_specifiers         shift and go to state 69
    declaration_specifiers_no_type shift and go to state 70
    type_qualifier                 shift and go to state 21
    storage_class_specifier        shift and go to state 22
    function_specifier             shift and go to state 23
    type_specifier_no_typeid       shift and go to state 24
    type_specifier                 shift and go to state 25
    alignment_specifier            shift and go to state 27
    atomic_specifier               shift and go to state 71
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    struct_or_union                shift and go to state 37

state 68

    (91) declaration_list -> declaration .

    CONST           reduce using rule 91 (declaration_list -> declaration .)
    RESTRICT        reduce using rule 91 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 91 (declaration_list -> declaration .)
    _ATOMIC         reduce using rule 91 (declaration_list -> declaration .)
    AUTO            reduce using rule 91 (declaration_list -> declaration .)
    REGISTER        reduce using rule 91 (declaration_list -> declaration .)
    STATIC          reduce using rule 91 (declaration_list -> declaration .)
    EXTERN          reduce using rule 91 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 91 (declaration_list -> declaration .)
    _THREAD_LOCAL   reduce using rule 91 (declaration_list -> declaration .)
    INLINE          reduce using rule 91 (declaration_list -> declaration .)
    _NORETURN       reduce using rule 91 (declaration_list -> declaration .)
    _ALIGNAS        reduce using rule 91 (declaration_list -> declaration .)
    TYPEID          reduce using rule 91 (declaration_list -> declaration .)
    ENUM            reduce using rule 91 (declaration_list -> declaration .)
    VOID            reduce using rule 91 (declaration_list -> declaration .)
    _BOOL           reduce using rule 91 (declaration_list -> declaration .)
    CHAR            reduce using rule 91 (declaration_list -> declaration .)
    SHORT           reduce using rule 91 (declaration_list -> declaration .)
    INT             reduce using rule 91 (declaration_list -> declaration .)
    LONG            reduce using rule 91 (declaration_list -> declaration .)
    FLOAT           reduce using rule 91 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 91 (declaration_list -> declaration .)
    _COMPLEX        reduce using rule 91 (declaration_list -> declaration .)
    SIGNED          reduce using rule 91 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 91 (declaration_list -> declaration .)
    __INT128        reduce using rule 91 (declaration_list -> declaration .)
    STRUCT          reduce using rule 91 (declaration_list -> declaration .)
    UNION           reduce using rule 91 (declaration_list -> declaration .)
    LBRACE          reduce using rule 91 (declaration_list -> declaration .)


state 69

    (88) decl_body -> declaration_specifiers . init_declarator_list_opt
    (98) declaration_specifiers -> declaration_specifiers . type_qualifier
    (99) declaration_specifiers -> declaration_specifiers . storage_class_specifier
    (100) declaration_specifiers -> declaration_specifiers . function_specifier
    (101) declaration_specifiers -> declaration_specifiers . type_specifier_no_typeid
    (104) declaration_specifiers -> declaration_specifiers . alignment_specifier
    (19) init_declarator_list_opt -> . empty
    (20) init_declarator_list_opt -> . init_declarator_list
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) storage_class_specifier -> . STATIC
    (108) storage_class_specifier -> . EXTERN
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . _THREAD_LOCAL
    (111) function_specifier -> . INLINE
    (112) function_specifier -> . _NORETURN
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (340) empty -> .
    (135) init_declarator_list -> . init_declarator
    (136) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (137) init_declarator -> . declarator
    (138) init_declarator -> . declarator EQUALS initializer
    (181) declarator -> . id_declarator
    (182) declarator -> . typeid_declarator
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (54) typeid_declarator -> . direct_typeid_declarator
    (55) typeid_declarator -> . pointer direct_typeid_declarator
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (183) pointer -> . TIMES type_qualifier_list_opt
    (184) pointer -> . TIMES type_qualifier_list_opt pointer
    (37) direct_typeid_declarator -> . TYPEID
    (38) direct_typeid_declarator -> . LPAREN typeid_declarator RPAREN
    (39) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (40) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (41) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (42) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (43) direct_typeid_declarator -> . direct_typeid_declarator LPAREN parameter_type_list RPAREN
    (44) direct_typeid_declarator -> . direct_typeid_declarator LPAREN identifier_list_opt RPAREN

    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 81
    AUTO            shift and go to state 54
    REGISTER        shift and go to state 55
    STATIC          shift and go to state 29
    EXTERN          shift and go to state 56
    TYPEDEF         shift and go to state 57
    _THREAD_LOCAL   shift and go to state 58
    INLINE          shift and go to state 59
    _NORETURN       shift and go to state 60
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ALIGNAS        shift and go to state 61
    SEMI            reduce using rule 340 (empty -> .)
    ID              shift and go to state 28
    LPAREN          shift and go to state 82
    TIMES           shift and go to state 30
    TYPEID          shift and go to state 89

    init_declarator_list_opt       shift and go to state 79
    type_qualifier                 shift and go to state 74
    storage_class_specifier        shift and go to state 75
    function_specifier             shift and go to state 76
    type_specifier_no_typeid       shift and go to state 77
    alignment_specifier            shift and go to state 78
    empty                          shift and go to state 83
    init_declarator_list           shift and go to state 84
    init_declarator                shift and go to state 85
    declarator                     shift and go to state 86
    id_declarator                  shift and go to state 130
    typeid_declarator              shift and go to state 87
    direct_id_declarator           shift and go to state 19
    pointer                        shift and go to state 80
    direct_typeid_declarator       shift and go to state 88

state 70

    (89) decl_body -> declaration_specifiers_no_type . id_init_declarator_list_opt
    (103) declaration_specifiers -> declaration_specifiers_no_type . type_specifier
    (15) id_init_declarator_list_opt -> . empty
    (16) id_init_declarator_list_opt -> . id_init_declarator_list
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (340) empty -> .
    (139) id_init_declarator_list -> . id_init_declarator
    (140) id_init_declarator_list -> . id_init_declarator_list COMMA init_declarator
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (141) id_init_declarator -> . id_declarator
    (142) id_init_declarator -> . id_declarator EQUALS initializer
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (183) pointer -> . TIMES type_qualifier_list_opt
    (184) pointer -> . TIMES type_qualifier_list_opt pointer

    SEMI            reduce using rule 340 (empty -> .)
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ATOMIC         shift and go to state 109
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63
    ID              shift and go to state 28
    LPAREN          shift and go to state 17
    TIMES           shift and go to state 30

    id_init_declarator_list_opt    shift and go to state 105
    type_specifier                 shift and go to state 104
    empty                          shift and go to state 107
    id_init_declarator_list        shift and go to state 108
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    type_specifier_no_typeid       shift and go to state 24
    atomic_specifier               shift and go to state 106
    id_init_declarator             shift and go to state 110
    struct_or_union                shift and go to state 37
    id_declarator                  shift and go to state 111
    direct_id_declarator           shift and go to state 19
    pointer                        shift and go to state 20

state 71

    (96) declaration_specifiers_no_type -> atomic_specifier . declaration_specifiers_no_type_opt
    (129) type_specifier -> atomic_specifier .
    (9) declaration_specifiers_no_type_opt -> . empty
    (10) declaration_specifiers_no_type_opt -> . declaration_specifiers_no_type
    (340) empty -> .
    (93) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (94) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (95) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (96) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (97) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) storage_class_specifier -> . STATIC
    (108) storage_class_specifier -> . EXTERN
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . _THREAD_LOCAL
    (111) function_specifier -> . INLINE
    (112) function_specifier -> . _NORETURN
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN

  ! reduce/reduce conflict for TYPEID resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for VOID resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for _BOOL resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for CHAR resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for SHORT resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for INT resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for LONG resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for FLOAT resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for _COMPLEX resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for SIGNED resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for UNSIGNED resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for __INT128 resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for _ATOMIC resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for ID resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! reduce/reduce conflict for SEMI resolved using rule 129 (type_specifier -> atomic_specifier .)
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for RESTRICT resolved as shift
  ! shift/reduce conflict for VOLATILE resolved as shift
  ! shift/reduce conflict for _ATOMIC resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for REGISTER resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for TYPEDEF resolved as shift
  ! shift/reduce conflict for _THREAD_LOCAL resolved as shift
  ! shift/reduce conflict for INLINE resolved as shift
  ! shift/reduce conflict for _NORETURN resolved as shift
  ! shift/reduce conflict for _ALIGNAS resolved as shift
    VOID            reduce using rule 129 (type_specifier -> atomic_specifier .)
    _BOOL           reduce using rule 129 (type_specifier -> atomic_specifier .)
    CHAR            reduce using rule 129 (type_specifier -> atomic_specifier .)
    SHORT           reduce using rule 129 (type_specifier -> atomic_specifier .)
    INT             reduce using rule 129 (type_specifier -> atomic_specifier .)
    LONG            reduce using rule 129 (type_specifier -> atomic_specifier .)
    FLOAT           reduce using rule 129 (type_specifier -> atomic_specifier .)
    DOUBLE          reduce using rule 129 (type_specifier -> atomic_specifier .)
    _COMPLEX        reduce using rule 129 (type_specifier -> atomic_specifier .)
    SIGNED          reduce using rule 129 (type_specifier -> atomic_specifier .)
    UNSIGNED        reduce using rule 129 (type_specifier -> atomic_specifier .)
    __INT128        reduce using rule 129 (type_specifier -> atomic_specifier .)
    ID              reduce using rule 129 (type_specifier -> atomic_specifier .)
    LPAREN          reduce using rule 129 (type_specifier -> atomic_specifier .)
    TIMES           reduce using rule 129 (type_specifier -> atomic_specifier .)
    TYPEID          reduce using rule 129 (type_specifier -> atomic_specifier .)
    SEMI            reduce using rule 129 (type_specifier -> atomic_specifier .)
    ENUM            reduce using rule 340 (empty -> .)
    STRUCT          reduce using rule 340 (empty -> .)
    UNION           reduce using rule 340 (empty -> .)
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 72
    AUTO            shift and go to state 54
    REGISTER        shift and go to state 55
    STATIC          shift and go to state 29
    EXTERN          shift and go to state 56
    TYPEDEF         shift and go to state 57
    _THREAD_LOCAL   shift and go to state 58
    INLINE          shift and go to state 59
    _NORETURN       shift and go to state 60
    _ALIGNAS        shift and go to state 61

  ! CONST           [ reduce using rule 129 (type_specifier -> atomic_specifier .) ]
  ! RESTRICT        [ reduce using rule 129 (type_specifier -> atomic_specifier .) ]
  ! VOLATILE        [ reduce using rule 129 (type_specifier -> atomic_specifier .) ]
  ! _ATOMIC         [ reduce using rule 129 (type_specifier -> atomic_specifier .) ]
  ! AUTO            [ reduce using rule 129 (type_specifier -> atomic_specifier .) ]
  ! REGISTER        [ reduce using rule 129 (type_specifier -> atomic_specifier .) ]
  ! STATIC          [ reduce using rule 129 (type_specifier -> atomic_specifier .) ]
  ! EXTERN          [ reduce using rule 129 (type_specifier -> atomic_specifier .) ]
  ! TYPEDEF         [ reduce using rule 129 (type_specifier -> atomic_specifier .) ]
  ! _THREAD_LOCAL   [ reduce using rule 129 (type_specifier -> atomic_specifier .) ]
  ! INLINE          [ reduce using rule 129 (type_specifier -> atomic_specifier .) ]
  ! _NORETURN       [ reduce using rule 129 (type_specifier -> atomic_specifier .) ]
  ! _ALIGNAS        [ reduce using rule 129 (type_specifier -> atomic_specifier .) ]
  ! TYPEID          [ reduce using rule 340 (empty -> .) ]
  ! VOID            [ reduce using rule 340 (empty -> .) ]
  ! _BOOL           [ reduce using rule 340 (empty -> .) ]
  ! CHAR            [ reduce using rule 340 (empty -> .) ]
  ! SHORT           [ reduce using rule 340 (empty -> .) ]
  ! INT             [ reduce using rule 340 (empty -> .) ]
  ! LONG            [ reduce using rule 340 (empty -> .) ]
  ! FLOAT           [ reduce using rule 340 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 340 (empty -> .) ]
  ! _COMPLEX        [ reduce using rule 340 (empty -> .) ]
  ! SIGNED          [ reduce using rule 340 (empty -> .) ]
  ! UNSIGNED        [ reduce using rule 340 (empty -> .) ]
  ! __INT128        [ reduce using rule 340 (empty -> .) ]
  ! _ATOMIC         [ reduce using rule 340 (empty -> .) ]
  ! ID              [ reduce using rule 340 (empty -> .) ]
  ! LPAREN          [ reduce using rule 340 (empty -> .) ]
  ! TIMES           [ reduce using rule 340 (empty -> .) ]
  ! SEMI            [ reduce using rule 340 (empty -> .) ]

    atomic_specifier               shift and go to state 101
    declaration_specifiers_no_type_opt shift and go to state 117
    empty                          shift and go to state 99
    declaration_specifiers_no_type shift and go to state 100
    type_qualifier                 shift and go to state 21
    storage_class_specifier        shift and go to state 22
    function_specifier             shift and go to state 23
    alignment_specifier            shift and go to state 27

state 72

    (134) type_qualifier -> _ATOMIC .
    (130) atomic_specifier -> _ATOMIC . LPAREN type_name RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    CONST           reduce using rule 134 (type_qualifier -> _ATOMIC .)
    RESTRICT        reduce using rule 134 (type_qualifier -> _ATOMIC .)
    VOLATILE        reduce using rule 134 (type_qualifier -> _ATOMIC .)
    _ATOMIC         reduce using rule 134 (type_qualifier -> _ATOMIC .)
    AUTO            reduce using rule 134 (type_qualifier -> _ATOMIC .)
    REGISTER        reduce using rule 134 (type_qualifier -> _ATOMIC .)
    STATIC          reduce using rule 134 (type_qualifier -> _ATOMIC .)
    EXTERN          reduce using rule 134 (type_qualifier -> _ATOMIC .)
    TYPEDEF         reduce using rule 134 (type_qualifier -> _ATOMIC .)
    _THREAD_LOCAL   reduce using rule 134 (type_qualifier -> _ATOMIC .)
    INLINE          reduce using rule 134 (type_qualifier -> _ATOMIC .)
    _NORETURN       reduce using rule 134 (type_qualifier -> _ATOMIC .)
    _ALIGNAS        reduce using rule 134 (type_qualifier -> _ATOMIC .)
    TYPEID          reduce using rule 134 (type_qualifier -> _ATOMIC .)
    ENUM            reduce using rule 134 (type_qualifier -> _ATOMIC .)
    VOID            reduce using rule 134 (type_qualifier -> _ATOMIC .)
    _BOOL           reduce using rule 134 (type_qualifier -> _ATOMIC .)
    CHAR            reduce using rule 134 (type_qualifier -> _ATOMIC .)
    SHORT           reduce using rule 134 (type_qualifier -> _ATOMIC .)
    INT             reduce using rule 134 (type_qualifier -> _ATOMIC .)
    LONG            reduce using rule 134 (type_qualifier -> _ATOMIC .)
    FLOAT           reduce using rule 134 (type_qualifier -> _ATOMIC .)
    DOUBLE          reduce using rule 134 (type_qualifier -> _ATOMIC .)
    _COMPLEX        reduce using rule 134 (type_qualifier -> _ATOMIC .)
    SIGNED          reduce using rule 134 (type_qualifier -> _ATOMIC .)
    UNSIGNED        reduce using rule 134 (type_qualifier -> _ATOMIC .)
    __INT128        reduce using rule 134 (type_qualifier -> _ATOMIC .)
    STRUCT          reduce using rule 134 (type_qualifier -> _ATOMIC .)
    UNION           reduce using rule 134 (type_qualifier -> _ATOMIC .)
    ID              reduce using rule 134 (type_qualifier -> _ATOMIC .)
    TIMES           reduce using rule 134 (type_qualifier -> _ATOMIC .)
    SEMI            reduce using rule 134 (type_qualifier -> _ATOMIC .)
    LPAREN          shift and go to state 125

  ! LPAREN          [ reduce using rule 134 (type_qualifier -> _ATOMIC .) ]


state 73

    (77) function_definition -> declaration_specifiers id_declarator . declaration_list_opt compound_statement
    (181) declarator -> id_declarator .
    (7) declaration_list_opt -> . empty
    (8) declaration_list_opt -> . declaration_list
    (340) empty -> .
    (91) declaration_list -> . declaration
    (92) declaration_list -> . declaration_list declaration
    (90) declaration -> . decl_body SEMI
    (88) decl_body -> . declaration_specifiers init_declarator_list_opt
    (89) decl_body -> . declaration_specifiers_no_type id_init_declarator_list_opt
    (98) declaration_specifiers -> . declaration_specifiers type_qualifier
    (99) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (100) declaration_specifiers -> . declaration_specifiers function_specifier
    (101) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (102) declaration_specifiers -> . type_specifier
    (103) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (104) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (93) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (94) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (95) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (96) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (97) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) storage_class_specifier -> . STATIC
    (108) storage_class_specifier -> . EXTERN
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . _THREAD_LOCAL
    (111) function_specifier -> . INLINE
    (112) function_specifier -> . _NORETURN
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION

    EQUALS          reduce using rule 181 (declarator -> id_declarator .)
    COMMA           reduce using rule 181 (declarator -> id_declarator .)
    SEMI            reduce using rule 181 (declarator -> id_declarator .)
    LBRACE          reduce using rule 340 (empty -> .)
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 72
    AUTO            shift and go to state 54
    REGISTER        shift and go to state 55
    STATIC          shift and go to state 29
    EXTERN          shift and go to state 56
    TYPEDEF         shift and go to state 57
    _THREAD_LOCAL   shift and go to state 58
    INLINE          shift and go to state 59
    _NORETURN       shift and go to state 60
    _ALIGNAS        shift and go to state 61
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63

    declaration_specifiers         shift and go to state 69
    declaration_list_opt           shift and go to state 131
    empty                          shift and go to state 66
    declaration_list               shift and go to state 67
    declaration                    shift and go to state 68
    decl_body                      shift and go to state 13
    declaration_specifiers_no_type shift and go to state 70
    type_qualifier                 shift and go to state 21
    storage_class_specifier        shift and go to state 22
    function_specifier             shift and go to state 23
    type_specifier_no_typeid       shift and go to state 24
    type_specifier                 shift and go to state 25
    alignment_specifier            shift and go to state 27
    atomic_specifier               shift and go to state 71
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    struct_or_union                shift and go to state 37

state 74

    (98) declaration_specifiers -> declaration_specifiers type_qualifier .

    CONST           reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    RESTRICT        reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    VOLATILE        reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    _ATOMIC         reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    AUTO            reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    REGISTER        reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    STATIC          reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    EXTERN          reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    TYPEDEF         reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    _THREAD_LOCAL   reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    INLINE          reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    _NORETURN       reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    VOID            reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    _BOOL           reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    CHAR            reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    SHORT           reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    INT             reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    LONG            reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    FLOAT           reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    DOUBLE          reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    _COMPLEX        reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    SIGNED          reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    UNSIGNED        reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    __INT128        reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    _ALIGNAS        reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    ID              reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    LPAREN          reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    TIMES           reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    TYPEID          reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    SEMI            reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    LBRACKET        reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    COMMA           reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    RPAREN          reduce using rule 98 (declaration_specifiers -> declaration_specifiers type_qualifier .)


state 75

    (99) declaration_specifiers -> declaration_specifiers storage_class_specifier .

    CONST           reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    RESTRICT        reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    VOLATILE        reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    _ATOMIC         reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    AUTO            reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    REGISTER        reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    STATIC          reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    EXTERN          reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    TYPEDEF         reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    _THREAD_LOCAL   reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    INLINE          reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    _NORETURN       reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    VOID            reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    _BOOL           reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    CHAR            reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    SHORT           reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    INT             reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    LONG            reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    FLOAT           reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    DOUBLE          reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    _COMPLEX        reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    SIGNED          reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    UNSIGNED        reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    __INT128        reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    _ALIGNAS        reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    ID              reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    LPAREN          reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    TIMES           reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    TYPEID          reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    SEMI            reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    LBRACKET        reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    COMMA           reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    RPAREN          reduce using rule 99 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)


state 76

    (100) declaration_specifiers -> declaration_specifiers function_specifier .

    CONST           reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    RESTRICT        reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    VOLATILE        reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    _ATOMIC         reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    AUTO            reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    REGISTER        reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    STATIC          reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    EXTERN          reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    TYPEDEF         reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    _THREAD_LOCAL   reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    INLINE          reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    _NORETURN       reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    VOID            reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    _BOOL           reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    CHAR            reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    SHORT           reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    INT             reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    LONG            reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    FLOAT           reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    DOUBLE          reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    _COMPLEX        reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    SIGNED          reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    UNSIGNED        reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    __INT128        reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    _ALIGNAS        reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    ID              reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    LPAREN          reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    TIMES           reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    TYPEID          reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    SEMI            reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    LBRACKET        reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    COMMA           reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)
    RPAREN          reduce using rule 100 (declaration_specifiers -> declaration_specifiers function_specifier .)


state 77

    (101) declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .

    CONST           reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    RESTRICT        reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    VOLATILE        reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    _ATOMIC         reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    AUTO            reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    REGISTER        reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    STATIC          reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    EXTERN          reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    TYPEDEF         reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    _THREAD_LOCAL   reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    INLINE          reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    _NORETURN       reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    VOID            reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    _BOOL           reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    CHAR            reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    SHORT           reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    INT             reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    LONG            reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    FLOAT           reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    DOUBLE          reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    _COMPLEX        reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    SIGNED          reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    UNSIGNED        reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    __INT128        reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    _ALIGNAS        reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    ID              reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    LPAREN          reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    TIMES           reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    TYPEID          reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    SEMI            reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    LBRACKET        reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    COMMA           reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    RPAREN          reduce using rule 101 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)


state 78

    (104) declaration_specifiers -> declaration_specifiers alignment_specifier .

    CONST           reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    RESTRICT        reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    VOLATILE        reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    _ATOMIC         reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    AUTO            reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    REGISTER        reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    STATIC          reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    EXTERN          reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    TYPEDEF         reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    _THREAD_LOCAL   reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    INLINE          reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    _NORETURN       reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    VOID            reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    _BOOL           reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    CHAR            reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    SHORT           reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    INT             reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    LONG            reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    FLOAT           reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    DOUBLE          reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    _COMPLEX        reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    SIGNED          reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    UNSIGNED        reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    __INT128        reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    _ALIGNAS        reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    ID              reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    LPAREN          reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    TIMES           reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    TYPEID          reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    SEMI            reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    LBRACKET        reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    COMMA           reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)
    RPAREN          reduce using rule 104 (declaration_specifiers -> declaration_specifiers alignment_specifier .)


state 79

    (88) decl_body -> declaration_specifiers init_declarator_list_opt .

    SEMI            reduce using rule 88 (decl_body -> declaration_specifiers init_declarator_list_opt .)


state 80

    (53) id_declarator -> pointer . direct_id_declarator
    (55) typeid_declarator -> pointer . direct_typeid_declarator
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (37) direct_typeid_declarator -> . TYPEID
    (38) direct_typeid_declarator -> . LPAREN typeid_declarator RPAREN
    (39) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (40) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (41) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (42) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (43) direct_typeid_declarator -> . direct_typeid_declarator LPAREN parameter_type_list RPAREN
    (44) direct_typeid_declarator -> . direct_typeid_declarator LPAREN identifier_list_opt RPAREN

    ID              shift and go to state 28
    LPAREN          shift and go to state 82
    TYPEID          shift and go to state 89

    direct_id_declarator           shift and go to state 97
    direct_typeid_declarator       shift and go to state 132

state 81

    (134) type_qualifier -> _ATOMIC .

    CONST           reduce using rule 134 (type_qualifier -> _ATOMIC .)
    RESTRICT        reduce using rule 134 (type_qualifier -> _ATOMIC .)
    VOLATILE        reduce using rule 134 (type_qualifier -> _ATOMIC .)
    _ATOMIC         reduce using rule 134 (type_qualifier -> _ATOMIC .)
    AUTO            reduce using rule 134 (type_qualifier -> _ATOMIC .)
    REGISTER        reduce using rule 134 (type_qualifier -> _ATOMIC .)
    STATIC          reduce using rule 134 (type_qualifier -> _ATOMIC .)
    EXTERN          reduce using rule 134 (type_qualifier -> _ATOMIC .)
    TYPEDEF         reduce using rule 134 (type_qualifier -> _ATOMIC .)
    _THREAD_LOCAL   reduce using rule 134 (type_qualifier -> _ATOMIC .)
    INLINE          reduce using rule 134 (type_qualifier -> _ATOMIC .)
    _NORETURN       reduce using rule 134 (type_qualifier -> _ATOMIC .)
    VOID            reduce using rule 134 (type_qualifier -> _ATOMIC .)
    _BOOL           reduce using rule 134 (type_qualifier -> _ATOMIC .)
    CHAR            reduce using rule 134 (type_qualifier -> _ATOMIC .)
    SHORT           reduce using rule 134 (type_qualifier -> _ATOMIC .)
    INT             reduce using rule 134 (type_qualifier -> _ATOMIC .)
    LONG            reduce using rule 134 (type_qualifier -> _ATOMIC .)
    FLOAT           reduce using rule 134 (type_qualifier -> _ATOMIC .)
    DOUBLE          reduce using rule 134 (type_qualifier -> _ATOMIC .)
    _COMPLEX        reduce using rule 134 (type_qualifier -> _ATOMIC .)
    SIGNED          reduce using rule 134 (type_qualifier -> _ATOMIC .)
    UNSIGNED        reduce using rule 134 (type_qualifier -> _ATOMIC .)
    __INT128        reduce using rule 134 (type_qualifier -> _ATOMIC .)
    _ALIGNAS        reduce using rule 134 (type_qualifier -> _ATOMIC .)
    ID              reduce using rule 134 (type_qualifier -> _ATOMIC .)
    LPAREN          reduce using rule 134 (type_qualifier -> _ATOMIC .)
    TIMES           reduce using rule 134 (type_qualifier -> _ATOMIC .)
    TYPEID          reduce using rule 134 (type_qualifier -> _ATOMIC .)
    SEMI            reduce using rule 134 (type_qualifier -> _ATOMIC .)
    LBRACKET        reduce using rule 134 (type_qualifier -> _ATOMIC .)
    COMMA           reduce using rule 134 (type_qualifier -> _ATOMIC .)
    RPAREN          reduce using rule 134 (type_qualifier -> _ATOMIC .)
    PLUSPLUS        reduce using rule 134 (type_qualifier -> _ATOMIC .)
    MINUSMINUS      reduce using rule 134 (type_qualifier -> _ATOMIC .)
    SIZEOF          reduce using rule 134 (type_qualifier -> _ATOMIC .)
    _ALIGNOF        reduce using rule 134 (type_qualifier -> _ATOMIC .)
    AND             reduce using rule 134 (type_qualifier -> _ATOMIC .)
    PLUS            reduce using rule 134 (type_qualifier -> _ATOMIC .)
    MINUS           reduce using rule 134 (type_qualifier -> _ATOMIC .)
    NOT             reduce using rule 134 (type_qualifier -> _ATOMIC .)
    LNOT            reduce using rule 134 (type_qualifier -> _ATOMIC .)
    OFFSETOF        reduce using rule 134 (type_qualifier -> _ATOMIC .)
    INT_CONST_DEC   reduce using rule 134 (type_qualifier -> _ATOMIC .)
    INT_CONST_OCT   reduce using rule 134 (type_qualifier -> _ATOMIC .)
    INT_CONST_HEX   reduce using rule 134 (type_qualifier -> _ATOMIC .)
    INT_CONST_BIN   reduce using rule 134 (type_qualifier -> _ATOMIC .)
    INT_CONST_CHAR  reduce using rule 134 (type_qualifier -> _ATOMIC .)
    FLOAT_CONST     reduce using rule 134 (type_qualifier -> _ATOMIC .)
    HEX_FLOAT_CONST reduce using rule 134 (type_qualifier -> _ATOMIC .)
    CHAR_CONST      reduce using rule 134 (type_qualifier -> _ATOMIC .)
    WCHAR_CONST     reduce using rule 134 (type_qualifier -> _ATOMIC .)
    U8CHAR_CONST    reduce using rule 134 (type_qualifier -> _ATOMIC .)
    U16CHAR_CONST   reduce using rule 134 (type_qualifier -> _ATOMIC .)
    U32CHAR_CONST   reduce using rule 134 (type_qualifier -> _ATOMIC .)
    STRING_LITERAL  reduce using rule 134 (type_qualifier -> _ATOMIC .)
    WSTRING_LITERAL reduce using rule 134 (type_qualifier -> _ATOMIC .)
    U8STRING_LITERAL reduce using rule 134 (type_qualifier -> _ATOMIC .)
    U16STRING_LITERAL reduce using rule 134 (type_qualifier -> _ATOMIC .)
    U32STRING_LITERAL reduce using rule 134 (type_qualifier -> _ATOMIC .)
    RBRACKET        reduce using rule 134 (type_qualifier -> _ATOMIC .)
    COLON           reduce using rule 134 (type_qualifier -> _ATOMIC .)


state 82

    (30) direct_id_declarator -> LPAREN . id_declarator RPAREN
    (38) direct_typeid_declarator -> LPAREN . typeid_declarator RPAREN
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (54) typeid_declarator -> . direct_typeid_declarator
    (55) typeid_declarator -> . pointer direct_typeid_declarator
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (183) pointer -> . TIMES type_qualifier_list_opt
    (184) pointer -> . TIMES type_qualifier_list_opt pointer
    (37) direct_typeid_declarator -> . TYPEID
    (38) direct_typeid_declarator -> . LPAREN typeid_declarator RPAREN
    (39) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (40) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (41) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (42) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (43) direct_typeid_declarator -> . direct_typeid_declarator LPAREN parameter_type_list RPAREN
    (44) direct_typeid_declarator -> . direct_typeid_declarator LPAREN identifier_list_opt RPAREN

    ID              shift and go to state 28
    LPAREN          shift and go to state 82
    TIMES           shift and go to state 30
    TYPEID          shift and go to state 89

    id_declarator                  shift and go to state 93
    typeid_declarator              shift and go to state 133
    direct_id_declarator           shift and go to state 19
    pointer                        shift and go to state 80
    direct_typeid_declarator       shift and go to state 88

state 83

    (19) init_declarator_list_opt -> empty .

    SEMI            reduce using rule 19 (init_declarator_list_opt -> empty .)


state 84

    (20) init_declarator_list_opt -> init_declarator_list .
    (136) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            reduce using rule 20 (init_declarator_list_opt -> init_declarator_list .)
    COMMA           shift and go to state 134


state 85

    (135) init_declarator_list -> init_declarator .

    COMMA           reduce using rule 135 (init_declarator_list -> init_declarator .)
    SEMI            reduce using rule 135 (init_declarator_list -> init_declarator .)


state 86

    (137) init_declarator -> declarator .
    (138) init_declarator -> declarator . EQUALS initializer

    COMMA           reduce using rule 137 (init_declarator -> declarator .)
    SEMI            reduce using rule 137 (init_declarator -> declarator .)
    EQUALS          shift and go to state 135


state 87

    (182) declarator -> typeid_declarator .

    EQUALS          reduce using rule 182 (declarator -> typeid_declarator .)
    COMMA           reduce using rule 182 (declarator -> typeid_declarator .)
    SEMI            reduce using rule 182 (declarator -> typeid_declarator .)
    COLON           reduce using rule 182 (declarator -> typeid_declarator .)


state 88

    (54) typeid_declarator -> direct_typeid_declarator .
    (39) direct_typeid_declarator -> direct_typeid_declarator . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (40) direct_typeid_declarator -> direct_typeid_declarator . LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (41) direct_typeid_declarator -> direct_typeid_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (42) direct_typeid_declarator -> direct_typeid_declarator . LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (43) direct_typeid_declarator -> direct_typeid_declarator . LPAREN parameter_type_list RPAREN
    (44) direct_typeid_declarator -> direct_typeid_declarator . LPAREN identifier_list_opt RPAREN

    EQUALS          reduce using rule 54 (typeid_declarator -> direct_typeid_declarator .)
    COMMA           reduce using rule 54 (typeid_declarator -> direct_typeid_declarator .)
    SEMI            reduce using rule 54 (typeid_declarator -> direct_typeid_declarator .)
    RPAREN          reduce using rule 54 (typeid_declarator -> direct_typeid_declarator .)
    COLON           reduce using rule 54 (typeid_declarator -> direct_typeid_declarator .)
    LBRACKET        shift and go to state 136
    LPAREN          shift and go to state 137


state 89

    (37) direct_typeid_declarator -> TYPEID .

    LBRACKET        reduce using rule 37 (direct_typeid_declarator -> TYPEID .)
    LPAREN          reduce using rule 37 (direct_typeid_declarator -> TYPEID .)
    EQUALS          reduce using rule 37 (direct_typeid_declarator -> TYPEID .)
    COMMA           reduce using rule 37 (direct_typeid_declarator -> TYPEID .)
    SEMI            reduce using rule 37 (direct_typeid_declarator -> TYPEID .)
    RPAREN          reduce using rule 37 (direct_typeid_declarator -> TYPEID .)
    COLON           reduce using rule 37 (direct_typeid_declarator -> TYPEID .)


state 90

    (90) declaration -> decl_body SEMI .

    SEMI            reduce using rule 90 (declaration -> decl_body SEMI .)
    PPHASH          reduce using rule 90 (declaration -> decl_body SEMI .)
    PPPRAGMA        reduce using rule 90 (declaration -> decl_body SEMI .)
    _PRAGMA         reduce using rule 90 (declaration -> decl_body SEMI .)
    _STATIC_ASSERT  reduce using rule 90 (declaration -> decl_body SEMI .)
    ID              reduce using rule 90 (declaration -> decl_body SEMI .)
    LPAREN          reduce using rule 90 (declaration -> decl_body SEMI .)
    TIMES           reduce using rule 90 (declaration -> decl_body SEMI .)
    TYPEID          reduce using rule 90 (declaration -> decl_body SEMI .)
    ENUM            reduce using rule 90 (declaration -> decl_body SEMI .)
    VOID            reduce using rule 90 (declaration -> decl_body SEMI .)
    _BOOL           reduce using rule 90 (declaration -> decl_body SEMI .)
    CHAR            reduce using rule 90 (declaration -> decl_body SEMI .)
    SHORT           reduce using rule 90 (declaration -> decl_body SEMI .)
    INT             reduce using rule 90 (declaration -> decl_body SEMI .)
    LONG            reduce using rule 90 (declaration -> decl_body SEMI .)
    FLOAT           reduce using rule 90 (declaration -> decl_body SEMI .)
    DOUBLE          reduce using rule 90 (declaration -> decl_body SEMI .)
    _COMPLEX        reduce using rule 90 (declaration -> decl_body SEMI .)
    SIGNED          reduce using rule 90 (declaration -> decl_body SEMI .)
    UNSIGNED        reduce using rule 90 (declaration -> decl_body SEMI .)
    __INT128        reduce using rule 90 (declaration -> decl_body SEMI .)
    _ATOMIC         reduce using rule 90 (declaration -> decl_body SEMI .)
    CONST           reduce using rule 90 (declaration -> decl_body SEMI .)
    RESTRICT        reduce using rule 90 (declaration -> decl_body SEMI .)
    VOLATILE        reduce using rule 90 (declaration -> decl_body SEMI .)
    AUTO            reduce using rule 90 (declaration -> decl_body SEMI .)
    REGISTER        reduce using rule 90 (declaration -> decl_body SEMI .)
    STATIC          reduce using rule 90 (declaration -> decl_body SEMI .)
    EXTERN          reduce using rule 90 (declaration -> decl_body SEMI .)
    TYPEDEF         reduce using rule 90 (declaration -> decl_body SEMI .)
    _THREAD_LOCAL   reduce using rule 90 (declaration -> decl_body SEMI .)
    INLINE          reduce using rule 90 (declaration -> decl_body SEMI .)
    _NORETURN       reduce using rule 90 (declaration -> decl_body SEMI .)
    _ALIGNAS        reduce using rule 90 (declaration -> decl_body SEMI .)
    STRUCT          reduce using rule 90 (declaration -> decl_body SEMI .)
    UNION           reduce using rule 90 (declaration -> decl_body SEMI .)
    $end            reduce using rule 90 (declaration -> decl_body SEMI .)
    LBRACE          reduce using rule 90 (declaration -> decl_body SEMI .)
    CASE            reduce using rule 90 (declaration -> decl_body SEMI .)
    DEFAULT         reduce using rule 90 (declaration -> decl_body SEMI .)
    IF              reduce using rule 90 (declaration -> decl_body SEMI .)
    SWITCH          reduce using rule 90 (declaration -> decl_body SEMI .)
    WHILE           reduce using rule 90 (declaration -> decl_body SEMI .)
    DO              reduce using rule 90 (declaration -> decl_body SEMI .)
    FOR             reduce using rule 90 (declaration -> decl_body SEMI .)
    GOTO            reduce using rule 90 (declaration -> decl_body SEMI .)
    BREAK           reduce using rule 90 (declaration -> decl_body SEMI .)
    CONTINUE        reduce using rule 90 (declaration -> decl_body SEMI .)
    RETURN          reduce using rule 90 (declaration -> decl_body SEMI .)
    PLUSPLUS        reduce using rule 90 (declaration -> decl_body SEMI .)
    MINUSMINUS      reduce using rule 90 (declaration -> decl_body SEMI .)
    SIZEOF          reduce using rule 90 (declaration -> decl_body SEMI .)
    _ALIGNOF        reduce using rule 90 (declaration -> decl_body SEMI .)
    AND             reduce using rule 90 (declaration -> decl_body SEMI .)
    PLUS            reduce using rule 90 (declaration -> decl_body SEMI .)
    MINUS           reduce using rule 90 (declaration -> decl_body SEMI .)
    NOT             reduce using rule 90 (declaration -> decl_body SEMI .)
    LNOT            reduce using rule 90 (declaration -> decl_body SEMI .)
    OFFSETOF        reduce using rule 90 (declaration -> decl_body SEMI .)
    INT_CONST_DEC   reduce using rule 90 (declaration -> decl_body SEMI .)
    INT_CONST_OCT   reduce using rule 90 (declaration -> decl_body SEMI .)
    INT_CONST_HEX   reduce using rule 90 (declaration -> decl_body SEMI .)
    INT_CONST_BIN   reduce using rule 90 (declaration -> decl_body SEMI .)
    INT_CONST_CHAR  reduce using rule 90 (declaration -> decl_body SEMI .)
    FLOAT_CONST     reduce using rule 90 (declaration -> decl_body SEMI .)
    HEX_FLOAT_CONST reduce using rule 90 (declaration -> decl_body SEMI .)
    CHAR_CONST      reduce using rule 90 (declaration -> decl_body SEMI .)
    WCHAR_CONST     reduce using rule 90 (declaration -> decl_body SEMI .)
    U8CHAR_CONST    reduce using rule 90 (declaration -> decl_body SEMI .)
    U16CHAR_CONST   reduce using rule 90 (declaration -> decl_body SEMI .)
    U32CHAR_CONST   reduce using rule 90 (declaration -> decl_body SEMI .)
    STRING_LITERAL  reduce using rule 90 (declaration -> decl_body SEMI .)
    WSTRING_LITERAL reduce using rule 90 (declaration -> decl_body SEMI .)
    U8STRING_LITERAL reduce using rule 90 (declaration -> decl_body SEMI .)
    U16STRING_LITERAL reduce using rule 90 (declaration -> decl_body SEMI .)
    U32STRING_LITERAL reduce using rule 90 (declaration -> decl_body SEMI .)
    RBRACE          reduce using rule 90 (declaration -> decl_body SEMI .)


state 91

    (72) pppragma_directive -> PPPRAGMA PPPRAGMASTR .

    SEMI            reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    PPHASH          reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    PPPRAGMA        reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    _PRAGMA         reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    _STATIC_ASSERT  reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    ID              reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    LPAREN          reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    TIMES           reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    TYPEID          reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    ENUM            reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    VOID            reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    _BOOL           reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    CHAR            reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    SHORT           reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INT             reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    LONG            reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    FLOAT           reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    DOUBLE          reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    _COMPLEX        reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    SIGNED          reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    UNSIGNED        reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    __INT128        reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    _ATOMIC         reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    CONST           reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    RESTRICT        reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    VOLATILE        reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    AUTO            reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    REGISTER        reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    STATIC          reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    EXTERN          reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    TYPEDEF         reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    _THREAD_LOCAL   reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INLINE          reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    _NORETURN       reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    _ALIGNAS        reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    STRUCT          reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    UNION           reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    $end            reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    RBRACE          reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    CASE            reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    DEFAULT         reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    IF              reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    SWITCH          reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    WHILE           reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    DO              reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    FOR             reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    GOTO            reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    BREAK           reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    CONTINUE        reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    RETURN          reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    LBRACE          reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    PLUSPLUS        reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    MINUSMINUS      reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    SIZEOF          reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    _ALIGNOF        reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    AND             reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    PLUS            reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    MINUS           reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    NOT             reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    LNOT            reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    OFFSETOF        reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INT_CONST_DEC   reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INT_CONST_OCT   reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INT_CONST_HEX   reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INT_CONST_BIN   reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INT_CONST_CHAR  reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    FLOAT_CONST     reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    HEX_FLOAT_CONST reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    CHAR_CONST      reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    WCHAR_CONST     reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    U8CHAR_CONST    reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    U16CHAR_CONST   reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    U32CHAR_CONST   reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    STRING_LITERAL  reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    WSTRING_LITERAL reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    U8STRING_LITERAL reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    U16STRING_LITERAL reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    U32STRING_LITERAL reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    ELSE            reduce using rule 72 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)


state 92

    (73) pppragma_directive -> _PRAGMA LPAREN . unified_string_literal RPAREN
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL

    STRING_LITERAL  shift and go to state 139

    unified_string_literal         shift and go to state 138

state 93

    (30) direct_id_declarator -> LPAREN id_declarator . RPAREN

    RPAREN          shift and go to state 140


state 94

    (68) static_assert -> _STATIC_ASSERT LPAREN . constant_expression COMMA unified_string_literal RPAREN
    (69) static_assert -> _STATIC_ASSERT LPAREN . constant_expression RPAREN
    (255) constant_expression -> . conditional_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    constant_expression            shift and go to state 142
    unified_string_literal         shift and go to state 143
    conditional_expression         shift and go to state 144
    binary_expression              shift and go to state 145
    cast_expression                shift and go to state 146
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_wstring_literal        shift and go to state 164

state 95

    (31) direct_id_declarator -> direct_id_declarator LBRACKET . type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> direct_id_declarator LBRACKET . STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> direct_id_declarator LBRACKET . type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> direct_id_declarator LBRACKET . type_qualifier_list_opt TIMES RBRACKET
    (27) type_qualifier_list_opt -> . empty
    (28) type_qualifier_list_opt -> . type_qualifier_list
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (340) empty -> .
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC

    STATIC          shift and go to state 183
    TIMES           reduce using rule 340 (empty -> .)
    LPAREN          reduce using rule 340 (empty -> .)
    PLUSPLUS        reduce using rule 340 (empty -> .)
    MINUSMINUS      reduce using rule 340 (empty -> .)
    SIZEOF          reduce using rule 340 (empty -> .)
    _ALIGNOF        reduce using rule 340 (empty -> .)
    AND             reduce using rule 340 (empty -> .)
    PLUS            reduce using rule 340 (empty -> .)
    MINUS           reduce using rule 340 (empty -> .)
    NOT             reduce using rule 340 (empty -> .)
    LNOT            reduce using rule 340 (empty -> .)
    OFFSETOF        reduce using rule 340 (empty -> .)
    ID              reduce using rule 340 (empty -> .)
    INT_CONST_DEC   reduce using rule 340 (empty -> .)
    INT_CONST_OCT   reduce using rule 340 (empty -> .)
    INT_CONST_HEX   reduce using rule 340 (empty -> .)
    INT_CONST_BIN   reduce using rule 340 (empty -> .)
    INT_CONST_CHAR  reduce using rule 340 (empty -> .)
    FLOAT_CONST     reduce using rule 340 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 340 (empty -> .)
    CHAR_CONST      reduce using rule 340 (empty -> .)
    WCHAR_CONST     reduce using rule 340 (empty -> .)
    U8CHAR_CONST    reduce using rule 340 (empty -> .)
    U16CHAR_CONST   reduce using rule 340 (empty -> .)
    U32CHAR_CONST   reduce using rule 340 (empty -> .)
    STRING_LITERAL  reduce using rule 340 (empty -> .)
    WSTRING_LITERAL reduce using rule 340 (empty -> .)
    U8STRING_LITERAL reduce using rule 340 (empty -> .)
    U16STRING_LITERAL reduce using rule 340 (empty -> .)
    U32STRING_LITERAL reduce using rule 340 (empty -> .)
    RBRACKET        reduce using rule 340 (empty -> .)
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 81

    type_qualifier_list_opt        shift and go to state 182
    type_qualifier_list            shift and go to state 184
    empty                          shift and go to state 114
    type_qualifier                 shift and go to state 116

state 96

    (35) direct_id_declarator -> direct_id_declarator LPAREN . parameter_type_list RPAREN
    (36) direct_id_declarator -> direct_id_declarator LPAREN . identifier_list_opt RPAREN
    (187) parameter_type_list -> . parameter_list
    (188) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (17) identifier_list_opt -> . empty
    (18) identifier_list_opt -> . identifier_list
    (189) parameter_list -> . parameter_declaration
    (190) parameter_list -> . parameter_list COMMA parameter_declaration
    (340) empty -> .
    (194) identifier_list -> . identifier
    (195) identifier_list -> . identifier_list COMMA identifier
    (191) parameter_declaration -> . declaration_specifiers id_declarator
    (192) parameter_declaration -> . declaration_specifiers typeid_noparen_declarator
    (193) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (315) identifier -> . ID
    (98) declaration_specifiers -> . declaration_specifiers type_qualifier
    (99) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (100) declaration_specifiers -> . declaration_specifiers function_specifier
    (101) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (102) declaration_specifiers -> . type_specifier
    (103) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (104) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (93) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (94) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (95) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (96) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (97) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) storage_class_specifier -> . STATIC
    (108) storage_class_specifier -> . EXTERN
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . _THREAD_LOCAL
    (111) function_specifier -> . INLINE
    (112) function_specifier -> . _NORETURN
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION

    RPAREN          reduce using rule 340 (empty -> .)
    ID              shift and go to state 159
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ATOMIC         shift and go to state 50
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    AUTO            shift and go to state 54
    REGISTER        shift and go to state 55
    STATIC          shift and go to state 29
    EXTERN          shift and go to state 56
    TYPEDEF         shift and go to state 57
    _THREAD_LOCAL   shift and go to state 58
    INLINE          shift and go to state 59
    _NORETURN       shift and go to state 60
    _ALIGNAS        shift and go to state 61
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63

    parameter_type_list            shift and go to state 185
    identifier_list_opt            shift and go to state 186
    parameter_list                 shift and go to state 187
    empty                          shift and go to state 188
    identifier_list                shift and go to state 189
    parameter_declaration          shift and go to state 190
    identifier                     shift and go to state 191
    declaration_specifiers         shift and go to state 192
    type_qualifier                 shift and go to state 21
    storage_class_specifier        shift and go to state 22
    function_specifier             shift and go to state 23
    type_specifier_no_typeid       shift and go to state 24
    type_specifier                 shift and go to state 25
    declaration_specifiers_no_type shift and go to state 193
    alignment_specifier            shift and go to state 27
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    atomic_specifier               shift and go to state 34
    struct_or_union                shift and go to state 37

state 97

    (53) id_declarator -> pointer direct_id_declarator .
    (31) direct_id_declarator -> direct_id_declarator . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> direct_id_declarator . LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> direct_id_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> direct_id_declarator . LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> direct_id_declarator . LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> direct_id_declarator . LPAREN identifier_list_opt RPAREN

    CONST           reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    RESTRICT        reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    VOLATILE        reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    _ATOMIC         reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    AUTO            reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    REGISTER        reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    STATIC          reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    EXTERN          reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    TYPEDEF         reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    _THREAD_LOCAL   reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    INLINE          reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    _NORETURN       reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    _ALIGNAS        reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    TYPEID          reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    ENUM            reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    VOID            reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    _BOOL           reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    CHAR            reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    SHORT           reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    INT             reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    LONG            reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    FLOAT           reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    DOUBLE          reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    _COMPLEX        reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    SIGNED          reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    UNSIGNED        reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    __INT128        reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    STRUCT          reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    UNION           reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    LBRACE          reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    EQUALS          reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    COMMA           reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    SEMI            reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    RPAREN          reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    COLON           reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    LBRACKET        shift and go to state 95
    LPAREN          shift and go to state 96


state 98

    (93) declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .

    TYPEID          reduce using rule 93 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    ENUM            reduce using rule 93 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    VOID            reduce using rule 93 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    _BOOL           reduce using rule 93 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    CHAR            reduce using rule 93 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    SHORT           reduce using rule 93 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    INT             reduce using rule 93 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    LONG            reduce using rule 93 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    FLOAT           reduce using rule 93 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    DOUBLE          reduce using rule 93 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    _COMPLEX        reduce using rule 93 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    SIGNED          reduce using rule 93 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    UNSIGNED        reduce using rule 93 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    __INT128        reduce using rule 93 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    _ATOMIC         reduce using rule 93 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    STRUCT          reduce using rule 93 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    UNION           reduce using rule 93 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    ID              reduce using rule 93 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    LPAREN          reduce using rule 93 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    TIMES           reduce using rule 93 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    SEMI            reduce using rule 93 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)


state 99

    (9) declaration_specifiers_no_type_opt -> empty .

    TYPEID          reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    ENUM            reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    VOID            reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    _BOOL           reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    CHAR            reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    SHORT           reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    INT             reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    LONG            reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    FLOAT           reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    DOUBLE          reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    _COMPLEX        reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    SIGNED          reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    UNSIGNED        reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    __INT128        reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    _ATOMIC         reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    STRUCT          reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    UNION           reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    ID              reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    LPAREN          reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    TIMES           reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    SEMI            reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)


state 100

    (10) declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .

    TYPEID          reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    ENUM            reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    VOID            reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    _BOOL           reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    CHAR            reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    SHORT           reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    INT             reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    LONG            reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    FLOAT           reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    DOUBLE          reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    _COMPLEX        reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    SIGNED          reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    UNSIGNED        reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    __INT128        reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    _ATOMIC         reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    STRUCT          reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    UNION           reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    ID              reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    LPAREN          reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    TIMES           reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    SEMI            reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)


state 101

    (96) declaration_specifiers_no_type -> atomic_specifier . declaration_specifiers_no_type_opt
    (9) declaration_specifiers_no_type_opt -> . empty
    (10) declaration_specifiers_no_type_opt -> . declaration_specifiers_no_type
    (340) empty -> .
    (93) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (94) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (95) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (96) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (97) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) storage_class_specifier -> . STATIC
    (108) storage_class_specifier -> . EXTERN
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . _THREAD_LOCAL
    (111) function_specifier -> . INLINE
    (112) function_specifier -> . _NORETURN
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN

  ! shift/reduce conflict for _ATOMIC resolved as shift
    TYPEID          reduce using rule 340 (empty -> .)
    ENUM            reduce using rule 340 (empty -> .)
    VOID            reduce using rule 340 (empty -> .)
    _BOOL           reduce using rule 340 (empty -> .)
    CHAR            reduce using rule 340 (empty -> .)
    SHORT           reduce using rule 340 (empty -> .)
    INT             reduce using rule 340 (empty -> .)
    LONG            reduce using rule 340 (empty -> .)
    FLOAT           reduce using rule 340 (empty -> .)
    DOUBLE          reduce using rule 340 (empty -> .)
    _COMPLEX        reduce using rule 340 (empty -> .)
    SIGNED          reduce using rule 340 (empty -> .)
    UNSIGNED        reduce using rule 340 (empty -> .)
    __INT128        reduce using rule 340 (empty -> .)
    STRUCT          reduce using rule 340 (empty -> .)
    UNION           reduce using rule 340 (empty -> .)
    ID              reduce using rule 340 (empty -> .)
    LPAREN          reduce using rule 340 (empty -> .)
    TIMES           reduce using rule 340 (empty -> .)
    SEMI            reduce using rule 340 (empty -> .)
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 72
    AUTO            shift and go to state 54
    REGISTER        shift and go to state 55
    STATIC          shift and go to state 29
    EXTERN          shift and go to state 56
    TYPEDEF         shift and go to state 57
    _THREAD_LOCAL   shift and go to state 58
    INLINE          shift and go to state 59
    _NORETURN       shift and go to state 60
    _ALIGNAS        shift and go to state 61

  ! _ATOMIC         [ reduce using rule 340 (empty -> .) ]

    atomic_specifier               shift and go to state 101
    declaration_specifiers_no_type_opt shift and go to state 117
    empty                          shift and go to state 99
    declaration_specifiers_no_type shift and go to state 100
    type_qualifier                 shift and go to state 21
    storage_class_specifier        shift and go to state 22
    function_specifier             shift and go to state 23
    alignment_specifier            shift and go to state 27

state 102

    (94) declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .

    TYPEID          reduce using rule 94 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    ENUM            reduce using rule 94 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    VOID            reduce using rule 94 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    _BOOL           reduce using rule 94 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    CHAR            reduce using rule 94 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    SHORT           reduce using rule 94 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    INT             reduce using rule 94 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    LONG            reduce using rule 94 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    FLOAT           reduce using rule 94 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    DOUBLE          reduce using rule 94 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    _COMPLEX        reduce using rule 94 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    SIGNED          reduce using rule 94 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    UNSIGNED        reduce using rule 94 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    __INT128        reduce using rule 94 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    _ATOMIC         reduce using rule 94 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    STRUCT          reduce using rule 94 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    UNION           reduce using rule 94 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    ID              reduce using rule 94 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    LPAREN          reduce using rule 94 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    TIMES           reduce using rule 94 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    SEMI            reduce using rule 94 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)


state 103

    (95) declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .

    TYPEID          reduce using rule 95 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    ENUM            reduce using rule 95 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    VOID            reduce using rule 95 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    _BOOL           reduce using rule 95 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    CHAR            reduce using rule 95 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    SHORT           reduce using rule 95 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    INT             reduce using rule 95 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    LONG            reduce using rule 95 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    FLOAT           reduce using rule 95 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    DOUBLE          reduce using rule 95 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    _COMPLEX        reduce using rule 95 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    SIGNED          reduce using rule 95 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    UNSIGNED        reduce using rule 95 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    __INT128        reduce using rule 95 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    _ATOMIC         reduce using rule 95 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    STRUCT          reduce using rule 95 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    UNION           reduce using rule 95 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    ID              reduce using rule 95 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    LPAREN          reduce using rule 95 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    TIMES           reduce using rule 95 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    SEMI            reduce using rule 95 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)


state 104

    (103) declaration_specifiers -> declaration_specifiers_no_type type_specifier .

    CONST           reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    RESTRICT        reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    VOLATILE        reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    _ATOMIC         reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    AUTO            reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    REGISTER        reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    STATIC          reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    EXTERN          reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    TYPEDEF         reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    _THREAD_LOCAL   reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    INLINE          reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    _NORETURN       reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    VOID            reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    _BOOL           reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    CHAR            reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    SHORT           reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    INT             reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    LONG            reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    FLOAT           reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    DOUBLE          reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    _COMPLEX        reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    SIGNED          reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    UNSIGNED        reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    __INT128        reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    _ALIGNAS        reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    ID              reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    LPAREN          reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    TIMES           reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    TYPEID          reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    SEMI            reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    LBRACKET        reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    COMMA           reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    RPAREN          reduce using rule 103 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)


state 105

    (89) decl_body -> declaration_specifiers_no_type id_init_declarator_list_opt .

    SEMI            reduce using rule 89 (decl_body -> declaration_specifiers_no_type id_init_declarator_list_opt .)


state 106

    (129) type_specifier -> atomic_specifier .

    CONST           reduce using rule 129 (type_specifier -> atomic_specifier .)
    RESTRICT        reduce using rule 129 (type_specifier -> atomic_specifier .)
    VOLATILE        reduce using rule 129 (type_specifier -> atomic_specifier .)
    _ATOMIC         reduce using rule 129 (type_specifier -> atomic_specifier .)
    AUTO            reduce using rule 129 (type_specifier -> atomic_specifier .)
    REGISTER        reduce using rule 129 (type_specifier -> atomic_specifier .)
    STATIC          reduce using rule 129 (type_specifier -> atomic_specifier .)
    EXTERN          reduce using rule 129 (type_specifier -> atomic_specifier .)
    TYPEDEF         reduce using rule 129 (type_specifier -> atomic_specifier .)
    _THREAD_LOCAL   reduce using rule 129 (type_specifier -> atomic_specifier .)
    INLINE          reduce using rule 129 (type_specifier -> atomic_specifier .)
    _NORETURN       reduce using rule 129 (type_specifier -> atomic_specifier .)
    VOID            reduce using rule 129 (type_specifier -> atomic_specifier .)
    _BOOL           reduce using rule 129 (type_specifier -> atomic_specifier .)
    CHAR            reduce using rule 129 (type_specifier -> atomic_specifier .)
    SHORT           reduce using rule 129 (type_specifier -> atomic_specifier .)
    INT             reduce using rule 129 (type_specifier -> atomic_specifier .)
    LONG            reduce using rule 129 (type_specifier -> atomic_specifier .)
    FLOAT           reduce using rule 129 (type_specifier -> atomic_specifier .)
    DOUBLE          reduce using rule 129 (type_specifier -> atomic_specifier .)
    _COMPLEX        reduce using rule 129 (type_specifier -> atomic_specifier .)
    SIGNED          reduce using rule 129 (type_specifier -> atomic_specifier .)
    UNSIGNED        reduce using rule 129 (type_specifier -> atomic_specifier .)
    __INT128        reduce using rule 129 (type_specifier -> atomic_specifier .)
    _ALIGNAS        reduce using rule 129 (type_specifier -> atomic_specifier .)
    ID              reduce using rule 129 (type_specifier -> atomic_specifier .)
    LPAREN          reduce using rule 129 (type_specifier -> atomic_specifier .)
    TIMES           reduce using rule 129 (type_specifier -> atomic_specifier .)
    TYPEID          reduce using rule 129 (type_specifier -> atomic_specifier .)
    SEMI            reduce using rule 129 (type_specifier -> atomic_specifier .)
    COLON           reduce using rule 129 (type_specifier -> atomic_specifier .)
    LBRACKET        reduce using rule 129 (type_specifier -> atomic_specifier .)
    RPAREN          reduce using rule 129 (type_specifier -> atomic_specifier .)
    COMMA           reduce using rule 129 (type_specifier -> atomic_specifier .)


state 107

    (15) id_init_declarator_list_opt -> empty .

    SEMI            reduce using rule 15 (id_init_declarator_list_opt -> empty .)


state 108

    (16) id_init_declarator_list_opt -> id_init_declarator_list .
    (140) id_init_declarator_list -> id_init_declarator_list . COMMA init_declarator

    SEMI            reduce using rule 16 (id_init_declarator_list_opt -> id_init_declarator_list .)
    COMMA           shift and go to state 194


state 109

    (130) atomic_specifier -> _ATOMIC . LPAREN type_name RPAREN

    LPAREN          shift and go to state 125


state 110

    (139) id_init_declarator_list -> id_init_declarator .

    COMMA           reduce using rule 139 (id_init_declarator_list -> id_init_declarator .)
    SEMI            reduce using rule 139 (id_init_declarator_list -> id_init_declarator .)


state 111

    (141) id_init_declarator -> id_declarator .
    (142) id_init_declarator -> id_declarator . EQUALS initializer

    COMMA           reduce using rule 141 (id_init_declarator -> id_declarator .)
    SEMI            reduce using rule 141 (id_init_declarator -> id_declarator .)
    EQUALS          shift and go to state 195


state 112

    (97) declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .

    TYPEID          reduce using rule 97 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    ENUM            reduce using rule 97 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    VOID            reduce using rule 97 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    _BOOL           reduce using rule 97 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    CHAR            reduce using rule 97 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    SHORT           reduce using rule 97 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    INT             reduce using rule 97 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    LONG            reduce using rule 97 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    FLOAT           reduce using rule 97 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    DOUBLE          reduce using rule 97 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    _COMPLEX        reduce using rule 97 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    SIGNED          reduce using rule 97 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    UNSIGNED        reduce using rule 97 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    __INT128        reduce using rule 97 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    _ATOMIC         reduce using rule 97 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    STRUCT          reduce using rule 97 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    UNION           reduce using rule 97 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    ID              reduce using rule 97 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    LPAREN          reduce using rule 97 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    TIMES           reduce using rule 97 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)
    SEMI            reduce using rule 97 (declaration_specifiers_no_type -> alignment_specifier declaration_specifiers_no_type_opt .)


state 113

    (183) pointer -> TIMES type_qualifier_list_opt .
    (184) pointer -> TIMES type_qualifier_list_opt . pointer
    (183) pointer -> . TIMES type_qualifier_list_opt
    (184) pointer -> . TIMES type_qualifier_list_opt pointer

    ID              reduce using rule 183 (pointer -> TIMES type_qualifier_list_opt .)
    LPAREN          reduce using rule 183 (pointer -> TIMES type_qualifier_list_opt .)
    TYPEID          reduce using rule 183 (pointer -> TIMES type_qualifier_list_opt .)
    LBRACKET        reduce using rule 183 (pointer -> TIMES type_qualifier_list_opt .)
    COMMA           reduce using rule 183 (pointer -> TIMES type_qualifier_list_opt .)
    RPAREN          reduce using rule 183 (pointer -> TIMES type_qualifier_list_opt .)
    TIMES           shift and go to state 30

    pointer                        shift and go to state 196

state 114

    (27) type_qualifier_list_opt -> empty .

    TIMES           reduce using rule 27 (type_qualifier_list_opt -> empty .)
    ID              reduce using rule 27 (type_qualifier_list_opt -> empty .)
    LPAREN          reduce using rule 27 (type_qualifier_list_opt -> empty .)
    TYPEID          reduce using rule 27 (type_qualifier_list_opt -> empty .)
    LBRACKET        reduce using rule 27 (type_qualifier_list_opt -> empty .)
    COMMA           reduce using rule 27 (type_qualifier_list_opt -> empty .)
    RPAREN          reduce using rule 27 (type_qualifier_list_opt -> empty .)
    PLUSPLUS        reduce using rule 27 (type_qualifier_list_opt -> empty .)
    MINUSMINUS      reduce using rule 27 (type_qualifier_list_opt -> empty .)
    SIZEOF          reduce using rule 27 (type_qualifier_list_opt -> empty .)
    _ALIGNOF        reduce using rule 27 (type_qualifier_list_opt -> empty .)
    AND             reduce using rule 27 (type_qualifier_list_opt -> empty .)
    PLUS            reduce using rule 27 (type_qualifier_list_opt -> empty .)
    MINUS           reduce using rule 27 (type_qualifier_list_opt -> empty .)
    NOT             reduce using rule 27 (type_qualifier_list_opt -> empty .)
    LNOT            reduce using rule 27 (type_qualifier_list_opt -> empty .)
    OFFSETOF        reduce using rule 27 (type_qualifier_list_opt -> empty .)
    INT_CONST_DEC   reduce using rule 27 (type_qualifier_list_opt -> empty .)
    INT_CONST_OCT   reduce using rule 27 (type_qualifier_list_opt -> empty .)
    INT_CONST_HEX   reduce using rule 27 (type_qualifier_list_opt -> empty .)
    INT_CONST_BIN   reduce using rule 27 (type_qualifier_list_opt -> empty .)
    INT_CONST_CHAR  reduce using rule 27 (type_qualifier_list_opt -> empty .)
    FLOAT_CONST     reduce using rule 27 (type_qualifier_list_opt -> empty .)
    HEX_FLOAT_CONST reduce using rule 27 (type_qualifier_list_opt -> empty .)
    CHAR_CONST      reduce using rule 27 (type_qualifier_list_opt -> empty .)
    WCHAR_CONST     reduce using rule 27 (type_qualifier_list_opt -> empty .)
    U8CHAR_CONST    reduce using rule 27 (type_qualifier_list_opt -> empty .)
    U16CHAR_CONST   reduce using rule 27 (type_qualifier_list_opt -> empty .)
    U32CHAR_CONST   reduce using rule 27 (type_qualifier_list_opt -> empty .)
    STRING_LITERAL  reduce using rule 27 (type_qualifier_list_opt -> empty .)
    WSTRING_LITERAL reduce using rule 27 (type_qualifier_list_opt -> empty .)
    U8STRING_LITERAL reduce using rule 27 (type_qualifier_list_opt -> empty .)
    U16STRING_LITERAL reduce using rule 27 (type_qualifier_list_opt -> empty .)
    U32STRING_LITERAL reduce using rule 27 (type_qualifier_list_opt -> empty .)
    RBRACKET        reduce using rule 27 (type_qualifier_list_opt -> empty .)


state 115

    (28) type_qualifier_list_opt -> type_qualifier_list .
    (186) type_qualifier_list -> type_qualifier_list . type_qualifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC

    TIMES           reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    ID              reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    LPAREN          reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    TYPEID          reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    LBRACKET        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    COMMA           reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    RPAREN          reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUSPLUS        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUSMINUS      reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    SIZEOF          reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    _ALIGNOF        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    AND             reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUS            reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUS           reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    NOT             reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    LNOT            reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    OFFSETOF        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_DEC   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_OCT   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_HEX   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_BIN   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_CHAR  reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    FLOAT_CONST     reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    HEX_FLOAT_CONST reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    CHAR_CONST      reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    WCHAR_CONST     reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    U8CHAR_CONST    reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    U16CHAR_CONST   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    U32CHAR_CONST   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    STRING_LITERAL  reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    WSTRING_LITERAL reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    U8STRING_LITERAL reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    U16STRING_LITERAL reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    U32STRING_LITERAL reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    RBRACKET        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 81

    type_qualifier                 shift and go to state 197

state 116

    (185) type_qualifier_list -> type_qualifier .

    CONST           reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    RESTRICT        reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    _ATOMIC         reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    TIMES           reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    ID              reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    TYPEID          reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    LBRACKET        reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    COMMA           reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    RPAREN          reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    STATIC          reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    PLUSPLUS        reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    MINUSMINUS      reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    SIZEOF          reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    _ALIGNOF        reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    AND             reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    PLUS            reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    MINUS           reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    NOT             reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    LNOT            reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    OFFSETOF        reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    INT_CONST_DEC   reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    INT_CONST_OCT   reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    INT_CONST_HEX   reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    INT_CONST_BIN   reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    INT_CONST_CHAR  reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    FLOAT_CONST     reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    HEX_FLOAT_CONST reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    CHAR_CONST      reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    WCHAR_CONST     reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    U8CHAR_CONST    reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    U16CHAR_CONST   reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    U32CHAR_CONST   reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    STRING_LITERAL  reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    WSTRING_LITERAL reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    U8STRING_LITERAL reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    U16STRING_LITERAL reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    U32STRING_LITERAL reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    RBRACKET        reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    ENUM            reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    VOID            reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    _BOOL           reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    CHAR            reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    SHORT           reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    INT             reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    LONG            reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    FLOAT           reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    DOUBLE          reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    _COMPLEX        reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    SIGNED          reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    UNSIGNED        reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    __INT128        reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    STRUCT          reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    UNION           reduce using rule 185 (type_qualifier_list -> type_qualifier .)


state 117

    (96) declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .

    TYPEID          reduce using rule 96 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    ENUM            reduce using rule 96 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    VOID            reduce using rule 96 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    _BOOL           reduce using rule 96 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    CHAR            reduce using rule 96 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    SHORT           reduce using rule 96 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    INT             reduce using rule 96 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    LONG            reduce using rule 96 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    FLOAT           reduce using rule 96 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    DOUBLE          reduce using rule 96 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    _COMPLEX        reduce using rule 96 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    SIGNED          reduce using rule 96 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    UNSIGNED        reduce using rule 96 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    __INT128        reduce using rule 96 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    _ATOMIC         reduce using rule 96 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    STRUCT          reduce using rule 96 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    UNION           reduce using rule 96 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    ID              reduce using rule 96 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    LPAREN          reduce using rule 96 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    TIMES           reduce using rule 96 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)
    SEMI            reduce using rule 96 (declaration_specifiers_no_type -> atomic_specifier declaration_specifiers_no_type_opt .)


state 118

    (169) enum_specifier -> ENUM ID .
    (172) enum_specifier -> ENUM ID . brace_open enumerator_list brace_close
    (338) brace_open -> . LBRACE

    CONST           reduce using rule 169 (enum_specifier -> ENUM ID .)
    RESTRICT        reduce using rule 169 (enum_specifier -> ENUM ID .)
    VOLATILE        reduce using rule 169 (enum_specifier -> ENUM ID .)
    _ATOMIC         reduce using rule 169 (enum_specifier -> ENUM ID .)
    AUTO            reduce using rule 169 (enum_specifier -> ENUM ID .)
    REGISTER        reduce using rule 169 (enum_specifier -> ENUM ID .)
    STATIC          reduce using rule 169 (enum_specifier -> ENUM ID .)
    EXTERN          reduce using rule 169 (enum_specifier -> ENUM ID .)
    TYPEDEF         reduce using rule 169 (enum_specifier -> ENUM ID .)
    _THREAD_LOCAL   reduce using rule 169 (enum_specifier -> ENUM ID .)
    INLINE          reduce using rule 169 (enum_specifier -> ENUM ID .)
    _NORETURN       reduce using rule 169 (enum_specifier -> ENUM ID .)
    VOID            reduce using rule 169 (enum_specifier -> ENUM ID .)
    _BOOL           reduce using rule 169 (enum_specifier -> ENUM ID .)
    CHAR            reduce using rule 169 (enum_specifier -> ENUM ID .)
    SHORT           reduce using rule 169 (enum_specifier -> ENUM ID .)
    INT             reduce using rule 169 (enum_specifier -> ENUM ID .)
    LONG            reduce using rule 169 (enum_specifier -> ENUM ID .)
    FLOAT           reduce using rule 169 (enum_specifier -> ENUM ID .)
    DOUBLE          reduce using rule 169 (enum_specifier -> ENUM ID .)
    _COMPLEX        reduce using rule 169 (enum_specifier -> ENUM ID .)
    SIGNED          reduce using rule 169 (enum_specifier -> ENUM ID .)
    UNSIGNED        reduce using rule 169 (enum_specifier -> ENUM ID .)
    __INT128        reduce using rule 169 (enum_specifier -> ENUM ID .)
    _ALIGNAS        reduce using rule 169 (enum_specifier -> ENUM ID .)
    ID              reduce using rule 169 (enum_specifier -> ENUM ID .)
    LPAREN          reduce using rule 169 (enum_specifier -> ENUM ID .)
    TIMES           reduce using rule 169 (enum_specifier -> ENUM ID .)
    TYPEID          reduce using rule 169 (enum_specifier -> ENUM ID .)
    SEMI            reduce using rule 169 (enum_specifier -> ENUM ID .)
    LBRACKET        reduce using rule 169 (enum_specifier -> ENUM ID .)
    COMMA           reduce using rule 169 (enum_specifier -> ENUM ID .)
    RPAREN          reduce using rule 169 (enum_specifier -> ENUM ID .)
    COLON           reduce using rule 169 (enum_specifier -> ENUM ID .)
    LBRACE          shift and go to state 121

    brace_open                     shift and go to state 198

state 119

    (170) enum_specifier -> ENUM TYPEID .
    (173) enum_specifier -> ENUM TYPEID . brace_open enumerator_list brace_close
    (338) brace_open -> . LBRACE

    CONST           reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    RESTRICT        reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    VOLATILE        reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    _ATOMIC         reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    AUTO            reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    REGISTER        reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    STATIC          reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    EXTERN          reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    TYPEDEF         reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    _THREAD_LOCAL   reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    INLINE          reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    _NORETURN       reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    VOID            reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    _BOOL           reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    CHAR            reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    SHORT           reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    INT             reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    LONG            reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    FLOAT           reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    DOUBLE          reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    _COMPLEX        reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    SIGNED          reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    UNSIGNED        reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    __INT128        reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    _ALIGNAS        reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    ID              reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    LPAREN          reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    TIMES           reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    TYPEID          reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    SEMI            reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    LBRACKET        reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    COMMA           reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    RPAREN          reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    COLON           reduce using rule 170 (enum_specifier -> ENUM TYPEID .)
    LBRACE          shift and go to state 121

    brace_open                     shift and go to state 199

state 120

    (171) enum_specifier -> ENUM brace_open . enumerator_list brace_close
    (174) enumerator_list -> . enumerator
    (175) enumerator_list -> . enumerator_list COMMA
    (176) enumerator_list -> . enumerator_list COMMA enumerator
    (179) enumerator -> . ID
    (180) enumerator -> . ID EQUALS constant_expression

    ID              shift and go to state 202

    enumerator_list                shift and go to state 200
    enumerator                     shift and go to state 201

state 121

    (338) brace_open -> LBRACE .

    ID              reduce using rule 338 (brace_open -> LBRACE .)
    RBRACE          reduce using rule 338 (brace_open -> LBRACE .)
    SEMI            reduce using rule 338 (brace_open -> LBRACE .)
    PPPRAGMA        reduce using rule 338 (brace_open -> LBRACE .)
    _PRAGMA         reduce using rule 338 (brace_open -> LBRACE .)
    _ALIGNAS        reduce using rule 338 (brace_open -> LBRACE .)
    TYPEID          reduce using rule 338 (brace_open -> LBRACE .)
    ENUM            reduce using rule 338 (brace_open -> LBRACE .)
    VOID            reduce using rule 338 (brace_open -> LBRACE .)
    _BOOL           reduce using rule 338 (brace_open -> LBRACE .)
    CHAR            reduce using rule 338 (brace_open -> LBRACE .)
    SHORT           reduce using rule 338 (brace_open -> LBRACE .)
    INT             reduce using rule 338 (brace_open -> LBRACE .)
    LONG            reduce using rule 338 (brace_open -> LBRACE .)
    FLOAT           reduce using rule 338 (brace_open -> LBRACE .)
    DOUBLE          reduce using rule 338 (brace_open -> LBRACE .)
    _COMPLEX        reduce using rule 338 (brace_open -> LBRACE .)
    SIGNED          reduce using rule 338 (brace_open -> LBRACE .)
    UNSIGNED        reduce using rule 338 (brace_open -> LBRACE .)
    __INT128        reduce using rule 338 (brace_open -> LBRACE .)
    _ATOMIC         reduce using rule 338 (brace_open -> LBRACE .)
    CONST           reduce using rule 338 (brace_open -> LBRACE .)
    RESTRICT        reduce using rule 338 (brace_open -> LBRACE .)
    VOLATILE        reduce using rule 338 (brace_open -> LBRACE .)
    STRUCT          reduce using rule 338 (brace_open -> LBRACE .)
    UNION           reduce using rule 338 (brace_open -> LBRACE .)
    CASE            reduce using rule 338 (brace_open -> LBRACE .)
    DEFAULT         reduce using rule 338 (brace_open -> LBRACE .)
    IF              reduce using rule 338 (brace_open -> LBRACE .)
    SWITCH          reduce using rule 338 (brace_open -> LBRACE .)
    WHILE           reduce using rule 338 (brace_open -> LBRACE .)
    DO              reduce using rule 338 (brace_open -> LBRACE .)
    FOR             reduce using rule 338 (brace_open -> LBRACE .)
    GOTO            reduce using rule 338 (brace_open -> LBRACE .)
    BREAK           reduce using rule 338 (brace_open -> LBRACE .)
    CONTINUE        reduce using rule 338 (brace_open -> LBRACE .)
    RETURN          reduce using rule 338 (brace_open -> LBRACE .)
    _STATIC_ASSERT  reduce using rule 338 (brace_open -> LBRACE .)
    LBRACE          reduce using rule 338 (brace_open -> LBRACE .)
    AUTO            reduce using rule 338 (brace_open -> LBRACE .)
    REGISTER        reduce using rule 338 (brace_open -> LBRACE .)
    STATIC          reduce using rule 338 (brace_open -> LBRACE .)
    EXTERN          reduce using rule 338 (brace_open -> LBRACE .)
    TYPEDEF         reduce using rule 338 (brace_open -> LBRACE .)
    _THREAD_LOCAL   reduce using rule 338 (brace_open -> LBRACE .)
    INLINE          reduce using rule 338 (brace_open -> LBRACE .)
    _NORETURN       reduce using rule 338 (brace_open -> LBRACE .)
    LPAREN          reduce using rule 338 (brace_open -> LBRACE .)
    PLUSPLUS        reduce using rule 338 (brace_open -> LBRACE .)
    MINUSMINUS      reduce using rule 338 (brace_open -> LBRACE .)
    SIZEOF          reduce using rule 338 (brace_open -> LBRACE .)
    _ALIGNOF        reduce using rule 338 (brace_open -> LBRACE .)
    AND             reduce using rule 338 (brace_open -> LBRACE .)
    TIMES           reduce using rule 338 (brace_open -> LBRACE .)
    PLUS            reduce using rule 338 (brace_open -> LBRACE .)
    MINUS           reduce using rule 338 (brace_open -> LBRACE .)
    NOT             reduce using rule 338 (brace_open -> LBRACE .)
    LNOT            reduce using rule 338 (brace_open -> LBRACE .)
    OFFSETOF        reduce using rule 338 (brace_open -> LBRACE .)
    INT_CONST_DEC   reduce using rule 338 (brace_open -> LBRACE .)
    INT_CONST_OCT   reduce using rule 338 (brace_open -> LBRACE .)
    INT_CONST_HEX   reduce using rule 338 (brace_open -> LBRACE .)
    INT_CONST_BIN   reduce using rule 338 (brace_open -> LBRACE .)
    INT_CONST_CHAR  reduce using rule 338 (brace_open -> LBRACE .)
    FLOAT_CONST     reduce using rule 338 (brace_open -> LBRACE .)
    HEX_FLOAT_CONST reduce using rule 338 (brace_open -> LBRACE .)
    CHAR_CONST      reduce using rule 338 (brace_open -> LBRACE .)
    WCHAR_CONST     reduce using rule 338 (brace_open -> LBRACE .)
    U8CHAR_CONST    reduce using rule 338 (brace_open -> LBRACE .)
    U16CHAR_CONST   reduce using rule 338 (brace_open -> LBRACE .)
    U32CHAR_CONST   reduce using rule 338 (brace_open -> LBRACE .)
    STRING_LITERAL  reduce using rule 338 (brace_open -> LBRACE .)
    WSTRING_LITERAL reduce using rule 338 (brace_open -> LBRACE .)
    U8STRING_LITERAL reduce using rule 338 (brace_open -> LBRACE .)
    U16STRING_LITERAL reduce using rule 338 (brace_open -> LBRACE .)
    U32STRING_LITERAL reduce using rule 338 (brace_open -> LBRACE .)
    LBRACKET        reduce using rule 338 (brace_open -> LBRACE .)
    PERIOD          reduce using rule 338 (brace_open -> LBRACE .)


state 122

    (149) struct_or_union_specifier -> struct_or_union ID .
    (153) struct_or_union_specifier -> struct_or_union ID . brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> struct_or_union ID . brace_open brace_close
    (338) brace_open -> . LBRACE

    CONST           reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    RESTRICT        reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    VOLATILE        reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    _ATOMIC         reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    AUTO            reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    REGISTER        reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    STATIC          reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    EXTERN          reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    TYPEDEF         reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    _THREAD_LOCAL   reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    INLINE          reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    _NORETURN       reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    VOID            reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    _BOOL           reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    CHAR            reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    SHORT           reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    INT             reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    LONG            reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    FLOAT           reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    DOUBLE          reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    _COMPLEX        reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    SIGNED          reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    UNSIGNED        reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    __INT128        reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    _ALIGNAS        reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    ID              reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    LPAREN          reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    TIMES           reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    TYPEID          reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    SEMI            reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    LBRACKET        reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    COMMA           reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    RPAREN          reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    COLON           reduce using rule 149 (struct_or_union_specifier -> struct_or_union ID .)
    LBRACE          shift and go to state 121

    brace_open                     shift and go to state 203

state 123

    (150) struct_or_union_specifier -> struct_or_union TYPEID .
    (155) struct_or_union_specifier -> struct_or_union TYPEID . brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> struct_or_union TYPEID . brace_open brace_close
    (338) brace_open -> . LBRACE

    CONST           reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    RESTRICT        reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    VOLATILE        reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    _ATOMIC         reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    AUTO            reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    REGISTER        reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    STATIC          reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    EXTERN          reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    TYPEDEF         reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    _THREAD_LOCAL   reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    INLINE          reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    _NORETURN       reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    VOID            reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    _BOOL           reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    CHAR            reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    SHORT           reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    INT             reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    LONG            reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    FLOAT           reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    DOUBLE          reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    _COMPLEX        reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    SIGNED          reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    UNSIGNED        reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    __INT128        reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    _ALIGNAS        reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    ID              reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    LPAREN          reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    TIMES           reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    TYPEID          reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    SEMI            reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    LBRACKET        reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    COMMA           reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    RPAREN          reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    COLON           reduce using rule 150 (struct_or_union_specifier -> struct_or_union TYPEID .)
    LBRACE          shift and go to state 121

    brace_open                     shift and go to state 204

state 124

    (151) struct_or_union_specifier -> struct_or_union brace_open . struct_declaration_list brace_close
    (152) struct_or_union_specifier -> struct_or_union brace_open . brace_close
    (159) struct_declaration_list -> . struct_declaration
    (160) struct_declaration_list -> . struct_declaration_list struct_declaration
    (339) brace_close -> . RBRACE
    (161) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt SEMI
    (162) struct_declaration -> . SEMI
    (163) struct_declaration -> . pppragma_directive
    (143) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (144) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (145) specifier_qualifier_list -> . type_specifier
    (146) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (147) specifier_qualifier_list -> . alignment_specifier
    (148) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (71) pppragma_directive -> . PPPRAGMA
    (72) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (73) pppragma_directive -> . _PRAGMA LPAREN unified_string_literal RPAREN
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION

    RBRACE          shift and go to state 208
    SEMI            shift and go to state 210
    PPPRAGMA        shift and go to state 15
    _PRAGMA         shift and go to state 16
    _ALIGNAS        shift and go to state 61
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ATOMIC         shift and go to state 50
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63

    struct_or_union                shift and go to state 37
    struct_declaration_list        shift and go to state 205
    brace_close                    shift and go to state 206
    struct_declaration             shift and go to state 207
    specifier_qualifier_list       shift and go to state 209
    pppragma_directive             shift and go to state 211
    type_specifier_no_typeid       shift and go to state 24
    type_qualifier                 shift and go to state 116
    type_specifier                 shift and go to state 212
    type_qualifier_list            shift and go to state 213
    alignment_specifier            shift and go to state 214
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    atomic_specifier               shift and go to state 106

state 125

    (130) atomic_specifier -> _ATOMIC LPAREN . type_name RPAREN
    (206) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (143) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (144) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (145) specifier_qualifier_list -> . type_specifier
    (146) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (147) specifier_qualifier_list -> . alignment_specifier
    (148) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION

    _ALIGNAS        shift and go to state 61
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ATOMIC         shift and go to state 50
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63

    type_name                      shift and go to state 215
    specifier_qualifier_list       shift and go to state 216
    type_specifier_no_typeid       shift and go to state 24
    type_qualifier                 shift and go to state 116
    type_specifier                 shift and go to state 212
    type_qualifier_list            shift and go to state 213
    alignment_specifier            shift and go to state 214
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    atomic_specifier               shift and go to state 106
    struct_or_union                shift and go to state 37

state 126

    (177) alignment_specifier -> _ALIGNAS LPAREN . type_name RPAREN
    (178) alignment_specifier -> _ALIGNAS LPAREN . constant_expression RPAREN
    (206) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (255) constant_expression -> . conditional_expression
    (143) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (144) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (145) specifier_qualifier_list -> . type_specifier
    (146) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (147) specifier_qualifier_list -> . alignment_specifier
    (148) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    _ALIGNAS        shift and go to state 61
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ATOMIC         shift and go to state 50
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    LPAREN          shift and go to state 141
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    type_name                      shift and go to state 217
    constant_expression            shift and go to state 218
    specifier_qualifier_list       shift and go to state 216
    conditional_expression         shift and go to state 144
    type_specifier_no_typeid       shift and go to state 24
    type_qualifier                 shift and go to state 116
    type_specifier                 shift and go to state 212
    type_qualifier_list            shift and go to state 213
    alignment_specifier            shift and go to state 214
    binary_expression              shift and go to state 145
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    atomic_specifier               shift and go to state 106
    cast_expression                shift and go to state 146
    struct_or_union                shift and go to state 37
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 127

    (76) function_definition -> id_declarator declaration_list_opt compound_statement .

    SEMI            reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    PPHASH          reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    PPPRAGMA        reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    _PRAGMA         reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    _STATIC_ASSERT  reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    TIMES           reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    TYPEID          reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    ENUM            reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    VOID            reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    _BOOL           reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    SHORT           reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    LONG            reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    DOUBLE          reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    _COMPLEX        reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    SIGNED          reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    UNSIGNED        reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    __INT128        reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    _ATOMIC         reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    CONST           reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    RESTRICT        reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    VOLATILE        reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    AUTO            reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    REGISTER        reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    STATIC          reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    EXTERN          reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    TYPEDEF         reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    _THREAD_LOCAL   reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    INLINE          reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    _NORETURN       reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    _ALIGNAS        reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    STRUCT          reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    UNION           reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 76 (function_definition -> id_declarator declaration_list_opt compound_statement .)


state 128

    (221) compound_statement -> brace_open . block_item_list_opt brace_close
    (5) block_item_list_opt -> . empty
    (6) block_item_list_opt -> . block_item_list
    (340) empty -> .
    (219) block_item_list -> . block_item
    (220) block_item_list -> . block_item_list block_item
    (217) block_item -> . declaration
    (218) block_item -> . statement
    (90) declaration -> . decl_body SEMI
    (78) statement -> . labeled_statement
    (79) statement -> . expression_statement
    (80) statement -> . compound_statement
    (81) statement -> . selection_statement
    (82) statement -> . iteration_statement
    (83) statement -> . jump_statement
    (84) statement -> . pppragma_directive
    (85) statement -> . static_assert
    (88) decl_body -> . declaration_specifiers init_declarator_list_opt
    (89) decl_body -> . declaration_specifiers_no_type id_init_declarator_list_opt
    (222) labeled_statement -> . ID COLON pragmacomp_or_statement
    (223) labeled_statement -> . CASE constant_expression COLON pragmacomp_or_statement
    (224) labeled_statement -> . DEFAULT COLON pragmacomp_or_statement
    (237) expression_statement -> . expression_opt SEMI
    (221) compound_statement -> . brace_open block_item_list_opt brace_close
    (225) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (226) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (227) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (228) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (229) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (230) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (231) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (232) jump_statement -> . GOTO ID SEMI
    (233) jump_statement -> . BREAK SEMI
    (234) jump_statement -> . CONTINUE SEMI
    (235) jump_statement -> . RETURN expression SEMI
    (236) jump_statement -> . RETURN SEMI
    (71) pppragma_directive -> . PPPRAGMA
    (72) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (73) pppragma_directive -> . _PRAGMA LPAREN unified_string_literal RPAREN
    (68) static_assert -> . _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN
    (69) static_assert -> . _STATIC_ASSERT LPAREN constant_expression RPAREN
    (98) declaration_specifiers -> . declaration_specifiers type_qualifier
    (99) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (100) declaration_specifiers -> . declaration_specifiers function_specifier
    (101) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (102) declaration_specifiers -> . type_specifier
    (103) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (104) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (93) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (94) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (95) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (96) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (97) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (338) brace_open -> . LBRACE
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) storage_class_specifier -> . STATIC
    (108) storage_class_specifier -> . EXTERN
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . _THREAD_LOCAL
    (111) function_specifier -> . INLINE
    (112) function_specifier -> . _NORETURN
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    RBRACE          reduce using rule 340 (empty -> .)
    SEMI            reduce using rule 340 (empty -> .)
    ID              shift and go to state 233
    CASE            shift and go to state 234
    DEFAULT         shift and go to state 235
    IF              shift and go to state 237
    SWITCH          shift and go to state 240
    WHILE           shift and go to state 241
    DO              shift and go to state 242
    FOR             shift and go to state 243
    GOTO            shift and go to state 244
    BREAK           shift and go to state 245
    CONTINUE        shift and go to state 246
    RETURN          shift and go to state 247
    PPPRAGMA        shift and go to state 15
    _PRAGMA         shift and go to state 16
    _STATIC_ASSERT  shift and go to state 18
    LBRACE          shift and go to state 121
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 72
    AUTO            shift and go to state 54
    REGISTER        shift and go to state 55
    STATIC          shift and go to state 29
    EXTERN          shift and go to state 56
    TYPEDEF         shift and go to state 57
    _THREAD_LOCAL   shift and go to state 58
    INLINE          shift and go to state 59
    _NORETURN       shift and go to state 60
    _ALIGNAS        shift and go to state 61
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    LPAREN          shift and go to state 238
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    brace_open                     shift and go to state 128
    block_item_list_opt            shift and go to state 219
    empty                          shift and go to state 220
    block_item_list                shift and go to state 221
    block_item                     shift and go to state 222
    declaration                    shift and go to state 223
    statement                      shift and go to state 224
    decl_body                      shift and go to state 13
    labeled_statement              shift and go to state 225
    expression_statement           shift and go to state 226
    compound_statement             shift and go to state 227
    selection_statement            shift and go to state 228
    iteration_statement            shift and go to state 229
    jump_statement                 shift and go to state 230
    pppragma_directive             shift and go to state 231
    static_assert                  shift and go to state 232
    declaration_specifiers         shift and go to state 69
    declaration_specifiers_no_type shift and go to state 70
    expression_opt                 shift and go to state 236
    expression                     shift and go to state 239
    unified_string_literal         shift and go to state 143
    type_qualifier                 shift and go to state 21
    storage_class_specifier        shift and go to state 22
    function_specifier             shift and go to state 23
    type_specifier_no_typeid       shift and go to state 24
    type_specifier                 shift and go to state 25
    alignment_specifier            shift and go to state 27
    atomic_specifier               shift and go to state 71
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    assignment_expression          shift and go to state 248
    struct_or_union                shift and go to state 37
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_wstring_literal        shift and go to state 164

state 129

    (92) declaration_list -> declaration_list declaration .

    CONST           reduce using rule 92 (declaration_list -> declaration_list declaration .)
    RESTRICT        reduce using rule 92 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 92 (declaration_list -> declaration_list declaration .)
    _ATOMIC         reduce using rule 92 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 92 (declaration_list -> declaration_list declaration .)
    REGISTER        reduce using rule 92 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 92 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 92 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 92 (declaration_list -> declaration_list declaration .)
    _THREAD_LOCAL   reduce using rule 92 (declaration_list -> declaration_list declaration .)
    INLINE          reduce using rule 92 (declaration_list -> declaration_list declaration .)
    _NORETURN       reduce using rule 92 (declaration_list -> declaration_list declaration .)
    _ALIGNAS        reduce using rule 92 (declaration_list -> declaration_list declaration .)
    TYPEID          reduce using rule 92 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 92 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 92 (declaration_list -> declaration_list declaration .)
    _BOOL           reduce using rule 92 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 92 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 92 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 92 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 92 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 92 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 92 (declaration_list -> declaration_list declaration .)
    _COMPLEX        reduce using rule 92 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 92 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 92 (declaration_list -> declaration_list declaration .)
    __INT128        reduce using rule 92 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 92 (declaration_list -> declaration_list declaration .)
    UNION           reduce using rule 92 (declaration_list -> declaration_list declaration .)
    LBRACE          reduce using rule 92 (declaration_list -> declaration_list declaration .)


state 130

    (181) declarator -> id_declarator .

    EQUALS          reduce using rule 181 (declarator -> id_declarator .)
    COMMA           reduce using rule 181 (declarator -> id_declarator .)
    SEMI            reduce using rule 181 (declarator -> id_declarator .)
    COLON           reduce using rule 181 (declarator -> id_declarator .)


state 131

    (77) function_definition -> declaration_specifiers id_declarator declaration_list_opt . compound_statement
    (221) compound_statement -> . brace_open block_item_list_opt brace_close
    (338) brace_open -> . LBRACE

    LBRACE          shift and go to state 121

    compound_statement             shift and go to state 251
    brace_open                     shift and go to state 128

state 132

    (55) typeid_declarator -> pointer direct_typeid_declarator .
    (39) direct_typeid_declarator -> direct_typeid_declarator . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (40) direct_typeid_declarator -> direct_typeid_declarator . LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (41) direct_typeid_declarator -> direct_typeid_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (42) direct_typeid_declarator -> direct_typeid_declarator . LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (43) direct_typeid_declarator -> direct_typeid_declarator . LPAREN parameter_type_list RPAREN
    (44) direct_typeid_declarator -> direct_typeid_declarator . LPAREN identifier_list_opt RPAREN

    EQUALS          reduce using rule 55 (typeid_declarator -> pointer direct_typeid_declarator .)
    COMMA           reduce using rule 55 (typeid_declarator -> pointer direct_typeid_declarator .)
    SEMI            reduce using rule 55 (typeid_declarator -> pointer direct_typeid_declarator .)
    RPAREN          reduce using rule 55 (typeid_declarator -> pointer direct_typeid_declarator .)
    COLON           reduce using rule 55 (typeid_declarator -> pointer direct_typeid_declarator .)
    LBRACKET        shift and go to state 136
    LPAREN          shift and go to state 137


state 133

    (38) direct_typeid_declarator -> LPAREN typeid_declarator . RPAREN

    RPAREN          shift and go to state 252


state 134

    (136) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (137) init_declarator -> . declarator
    (138) init_declarator -> . declarator EQUALS initializer
    (181) declarator -> . id_declarator
    (182) declarator -> . typeid_declarator
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (54) typeid_declarator -> . direct_typeid_declarator
    (55) typeid_declarator -> . pointer direct_typeid_declarator
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (183) pointer -> . TIMES type_qualifier_list_opt
    (184) pointer -> . TIMES type_qualifier_list_opt pointer
    (37) direct_typeid_declarator -> . TYPEID
    (38) direct_typeid_declarator -> . LPAREN typeid_declarator RPAREN
    (39) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (40) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (41) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (42) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (43) direct_typeid_declarator -> . direct_typeid_declarator LPAREN parameter_type_list RPAREN
    (44) direct_typeid_declarator -> . direct_typeid_declarator LPAREN identifier_list_opt RPAREN

    ID              shift and go to state 28
    LPAREN          shift and go to state 82
    TIMES           shift and go to state 30
    TYPEID          shift and go to state 89

    init_declarator                shift and go to state 253
    declarator                     shift and go to state 86
    id_declarator                  shift and go to state 130
    typeid_declarator              shift and go to state 87
    direct_id_declarator           shift and go to state 19
    pointer                        shift and go to state 80
    direct_typeid_declarator       shift and go to state 88

state 135

    (138) init_declarator -> declarator EQUALS . initializer
    (196) initializer -> . assignment_expression
    (197) initializer -> . brace_open initializer_list_opt brace_close
    (198) initializer -> . brace_open initializer_list COMMA brace_close
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (338) brace_open -> . LBRACE
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 238
    LBRACE          shift and go to state 121
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    initializer                    shift and go to state 254
    assignment_expression          shift and go to state 255
    brace_open                     shift and go to state 256
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 136

    (39) direct_typeid_declarator -> direct_typeid_declarator LBRACKET . type_qualifier_list_opt assignment_expression_opt RBRACKET
    (40) direct_typeid_declarator -> direct_typeid_declarator LBRACKET . STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (41) direct_typeid_declarator -> direct_typeid_declarator LBRACKET . type_qualifier_list STATIC assignment_expression RBRACKET
    (42) direct_typeid_declarator -> direct_typeid_declarator LBRACKET . type_qualifier_list_opt TIMES RBRACKET
    (27) type_qualifier_list_opt -> . empty
    (28) type_qualifier_list_opt -> . type_qualifier_list
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (340) empty -> .
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC

    STATIC          shift and go to state 258
    TIMES           reduce using rule 340 (empty -> .)
    LPAREN          reduce using rule 340 (empty -> .)
    PLUSPLUS        reduce using rule 340 (empty -> .)
    MINUSMINUS      reduce using rule 340 (empty -> .)
    SIZEOF          reduce using rule 340 (empty -> .)
    _ALIGNOF        reduce using rule 340 (empty -> .)
    AND             reduce using rule 340 (empty -> .)
    PLUS            reduce using rule 340 (empty -> .)
    MINUS           reduce using rule 340 (empty -> .)
    NOT             reduce using rule 340 (empty -> .)
    LNOT            reduce using rule 340 (empty -> .)
    OFFSETOF        reduce using rule 340 (empty -> .)
    ID              reduce using rule 340 (empty -> .)
    INT_CONST_DEC   reduce using rule 340 (empty -> .)
    INT_CONST_OCT   reduce using rule 340 (empty -> .)
    INT_CONST_HEX   reduce using rule 340 (empty -> .)
    INT_CONST_BIN   reduce using rule 340 (empty -> .)
    INT_CONST_CHAR  reduce using rule 340 (empty -> .)
    FLOAT_CONST     reduce using rule 340 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 340 (empty -> .)
    CHAR_CONST      reduce using rule 340 (empty -> .)
    WCHAR_CONST     reduce using rule 340 (empty -> .)
    U8CHAR_CONST    reduce using rule 340 (empty -> .)
    U16CHAR_CONST   reduce using rule 340 (empty -> .)
    U32CHAR_CONST   reduce using rule 340 (empty -> .)
    STRING_LITERAL  reduce using rule 340 (empty -> .)
    WSTRING_LITERAL reduce using rule 340 (empty -> .)
    U8STRING_LITERAL reduce using rule 340 (empty -> .)
    U16STRING_LITERAL reduce using rule 340 (empty -> .)
    U32STRING_LITERAL reduce using rule 340 (empty -> .)
    RBRACKET        reduce using rule 340 (empty -> .)
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 81

    type_qualifier_list_opt        shift and go to state 257
    type_qualifier_list            shift and go to state 259
    empty                          shift and go to state 114
    type_qualifier                 shift and go to state 116

state 137

    (43) direct_typeid_declarator -> direct_typeid_declarator LPAREN . parameter_type_list RPAREN
    (44) direct_typeid_declarator -> direct_typeid_declarator LPAREN . identifier_list_opt RPAREN
    (187) parameter_type_list -> . parameter_list
    (188) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (17) identifier_list_opt -> . empty
    (18) identifier_list_opt -> . identifier_list
    (189) parameter_list -> . parameter_declaration
    (190) parameter_list -> . parameter_list COMMA parameter_declaration
    (340) empty -> .
    (194) identifier_list -> . identifier
    (195) identifier_list -> . identifier_list COMMA identifier
    (191) parameter_declaration -> . declaration_specifiers id_declarator
    (192) parameter_declaration -> . declaration_specifiers typeid_noparen_declarator
    (193) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (315) identifier -> . ID
    (98) declaration_specifiers -> . declaration_specifiers type_qualifier
    (99) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (100) declaration_specifiers -> . declaration_specifiers function_specifier
    (101) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (102) declaration_specifiers -> . type_specifier
    (103) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (104) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (93) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (94) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (95) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (96) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (97) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) storage_class_specifier -> . STATIC
    (108) storage_class_specifier -> . EXTERN
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . _THREAD_LOCAL
    (111) function_specifier -> . INLINE
    (112) function_specifier -> . _NORETURN
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION

    RPAREN          reduce using rule 340 (empty -> .)
    ID              shift and go to state 159
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ATOMIC         shift and go to state 50
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    AUTO            shift and go to state 54
    REGISTER        shift and go to state 55
    STATIC          shift and go to state 29
    EXTERN          shift and go to state 56
    TYPEDEF         shift and go to state 57
    _THREAD_LOCAL   shift and go to state 58
    INLINE          shift and go to state 59
    _NORETURN       shift and go to state 60
    _ALIGNAS        shift and go to state 61
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63

    parameter_type_list            shift and go to state 260
    identifier_list_opt            shift and go to state 261
    parameter_list                 shift and go to state 187
    empty                          shift and go to state 188
    identifier_list                shift and go to state 189
    parameter_declaration          shift and go to state 190
    identifier                     shift and go to state 191
    declaration_specifiers         shift and go to state 192
    type_qualifier                 shift and go to state 21
    storage_class_specifier        shift and go to state 22
    function_specifier             shift and go to state 23
    type_specifier_no_typeid       shift and go to state 24
    type_specifier                 shift and go to state 25
    declaration_specifiers_no_type shift and go to state 193
    alignment_specifier            shift and go to state 27
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    atomic_specifier               shift and go to state 34
    struct_or_union                shift and go to state 37

state 138

    (73) pppragma_directive -> _PRAGMA LPAREN unified_string_literal . RPAREN
    (329) unified_string_literal -> unified_string_literal . STRING_LITERAL

    RPAREN          shift and go to state 262
    STRING_LITERAL  shift and go to state 263


state 139

    (328) unified_string_literal -> STRING_LITERAL .

    RPAREN          reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    STRING_LITERAL  reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    LBRACKET        reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    LPAREN          reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    PERIOD          reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    ARROW           reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    PLUSPLUS        reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    MINUSMINUS      reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    CONDOP          reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    TIMES           reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    DIVIDE          reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    MOD             reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    PLUS            reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    MINUS           reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    RSHIFT          reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    LSHIFT          reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    LT              reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    LE              reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    GE              reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    GT              reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    EQ              reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    NE              reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    AND             reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    OR              reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    XOR             reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    LAND            reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    LOR             reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    COMMA           reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    EQUALS          reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    XOREQUAL        reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    TIMESEQUAL      reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    DIVEQUAL        reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    MODEQUAL        reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    ANDEQUAL        reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    OREQUAL         reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    SEMI            reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    RBRACKET        reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    COLON           reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)
    RBRACE          reduce using rule 328 (unified_string_literal -> STRING_LITERAL .)


state 140

    (30) direct_id_declarator -> LPAREN id_declarator RPAREN .

    LBRACKET        reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    LPAREN          reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    CONST           reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    RESTRICT        reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    VOLATILE        reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    _ATOMIC         reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    AUTO            reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    REGISTER        reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    STATIC          reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    EXTERN          reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    TYPEDEF         reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    _THREAD_LOCAL   reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    INLINE          reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    _NORETURN       reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    _ALIGNAS        reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    TYPEID          reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    ENUM            reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    VOID            reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    _BOOL           reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    CHAR            reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    SHORT           reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    INT             reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    LONG            reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    FLOAT           reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    DOUBLE          reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    _COMPLEX        reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    SIGNED          reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    UNSIGNED        reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    __INT128        reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    STRUCT          reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    UNION           reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    LBRACE          reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    EQUALS          reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    COMMA           reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    SEMI            reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    RPAREN          reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    COLON           reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)


state 141

    (278) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (302) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list COMMA brace_close
    (308) primary_expression -> LPAREN . expression RPAREN
    (206) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (143) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (144) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (145) specifier_qualifier_list -> . type_specifier
    (146) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (147) specifier_qualifier_list -> . alignment_specifier
    (148) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 238
    _ALIGNAS        shift and go to state 61
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ATOMIC         shift and go to state 50
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    type_name                      shift and go to state 264
    cast_expression                shift and go to state 146
    expression                     shift and go to state 265
    specifier_qualifier_list       shift and go to state 216
    assignment_expression          shift and go to state 248
    type_specifier_no_typeid       shift and go to state 24
    type_qualifier                 shift and go to state 116
    type_specifier                 shift and go to state 212
    type_qualifier_list            shift and go to state 213
    alignment_specifier            shift and go to state 214
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    atomic_specifier               shift and go to state 106
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    struct_or_union                shift and go to state 37
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 142

    (68) static_assert -> _STATIC_ASSERT LPAREN constant_expression . COMMA unified_string_literal RPAREN
    (69) static_assert -> _STATIC_ASSERT LPAREN constant_expression . RPAREN

    COMMA           shift and go to state 266
    RPAREN          shift and go to state 267


state 143

    (306) primary_expression -> unified_string_literal .
    (329) unified_string_literal -> unified_string_literal . STRING_LITERAL

    LBRACKET        reduce using rule 306 (primary_expression -> unified_string_literal .)
    LPAREN          reduce using rule 306 (primary_expression -> unified_string_literal .)
    PERIOD          reduce using rule 306 (primary_expression -> unified_string_literal .)
    ARROW           reduce using rule 306 (primary_expression -> unified_string_literal .)
    PLUSPLUS        reduce using rule 306 (primary_expression -> unified_string_literal .)
    MINUSMINUS      reduce using rule 306 (primary_expression -> unified_string_literal .)
    CONDOP          reduce using rule 306 (primary_expression -> unified_string_literal .)
    TIMES           reduce using rule 306 (primary_expression -> unified_string_literal .)
    DIVIDE          reduce using rule 306 (primary_expression -> unified_string_literal .)
    MOD             reduce using rule 306 (primary_expression -> unified_string_literal .)
    PLUS            reduce using rule 306 (primary_expression -> unified_string_literal .)
    MINUS           reduce using rule 306 (primary_expression -> unified_string_literal .)
    RSHIFT          reduce using rule 306 (primary_expression -> unified_string_literal .)
    LSHIFT          reduce using rule 306 (primary_expression -> unified_string_literal .)
    LT              reduce using rule 306 (primary_expression -> unified_string_literal .)
    LE              reduce using rule 306 (primary_expression -> unified_string_literal .)
    GE              reduce using rule 306 (primary_expression -> unified_string_literal .)
    GT              reduce using rule 306 (primary_expression -> unified_string_literal .)
    EQ              reduce using rule 306 (primary_expression -> unified_string_literal .)
    NE              reduce using rule 306 (primary_expression -> unified_string_literal .)
    AND             reduce using rule 306 (primary_expression -> unified_string_literal .)
    OR              reduce using rule 306 (primary_expression -> unified_string_literal .)
    XOR             reduce using rule 306 (primary_expression -> unified_string_literal .)
    LAND            reduce using rule 306 (primary_expression -> unified_string_literal .)
    LOR             reduce using rule 306 (primary_expression -> unified_string_literal .)
    COMMA           reduce using rule 306 (primary_expression -> unified_string_literal .)
    RPAREN          reduce using rule 306 (primary_expression -> unified_string_literal .)
    EQUALS          reduce using rule 306 (primary_expression -> unified_string_literal .)
    XOREQUAL        reduce using rule 306 (primary_expression -> unified_string_literal .)
    TIMESEQUAL      reduce using rule 306 (primary_expression -> unified_string_literal .)
    DIVEQUAL        reduce using rule 306 (primary_expression -> unified_string_literal .)
    MODEQUAL        reduce using rule 306 (primary_expression -> unified_string_literal .)
    PLUSEQUAL       reduce using rule 306 (primary_expression -> unified_string_literal .)
    MINUSEQUAL      reduce using rule 306 (primary_expression -> unified_string_literal .)
    LSHIFTEQUAL     reduce using rule 306 (primary_expression -> unified_string_literal .)
    RSHIFTEQUAL     reduce using rule 306 (primary_expression -> unified_string_literal .)
    ANDEQUAL        reduce using rule 306 (primary_expression -> unified_string_literal .)
    OREQUAL         reduce using rule 306 (primary_expression -> unified_string_literal .)
    SEMI            reduce using rule 306 (primary_expression -> unified_string_literal .)
    RBRACKET        reduce using rule 306 (primary_expression -> unified_string_literal .)
    COLON           reduce using rule 306 (primary_expression -> unified_string_literal .)
    RBRACE          reduce using rule 306 (primary_expression -> unified_string_literal .)
    STRING_LITERAL  shift and go to state 263


state 144

    (255) constant_expression -> conditional_expression .

    COMMA           reduce using rule 255 (constant_expression -> conditional_expression .)
    RPAREN          reduce using rule 255 (constant_expression -> conditional_expression .)
    COLON           reduce using rule 255 (constant_expression -> conditional_expression .)
    RBRACE          reduce using rule 255 (constant_expression -> conditional_expression .)
    SEMI            reduce using rule 255 (constant_expression -> conditional_expression .)
    RBRACKET        reduce using rule 255 (constant_expression -> conditional_expression .)


state 145

    (256) conditional_expression -> binary_expression .
    (257) conditional_expression -> binary_expression . CONDOP expression COLON conditional_expression
    (259) binary_expression -> binary_expression . TIMES binary_expression
    (260) binary_expression -> binary_expression . DIVIDE binary_expression
    (261) binary_expression -> binary_expression . MOD binary_expression
    (262) binary_expression -> binary_expression . PLUS binary_expression
    (263) binary_expression -> binary_expression . MINUS binary_expression
    (264) binary_expression -> binary_expression . RSHIFT binary_expression
    (265) binary_expression -> binary_expression . LSHIFT binary_expression
    (266) binary_expression -> binary_expression . LT binary_expression
    (267) binary_expression -> binary_expression . LE binary_expression
    (268) binary_expression -> binary_expression . GE binary_expression
    (269) binary_expression -> binary_expression . GT binary_expression
    (270) binary_expression -> binary_expression . EQ binary_expression
    (271) binary_expression -> binary_expression . NE binary_expression
    (272) binary_expression -> binary_expression . AND binary_expression
    (273) binary_expression -> binary_expression . OR binary_expression
    (274) binary_expression -> binary_expression . XOR binary_expression
    (275) binary_expression -> binary_expression . LAND binary_expression
    (276) binary_expression -> binary_expression . LOR binary_expression

    COMMA           reduce using rule 256 (conditional_expression -> binary_expression .)
    RPAREN          reduce using rule 256 (conditional_expression -> binary_expression .)
    SEMI            reduce using rule 256 (conditional_expression -> binary_expression .)
    RBRACKET        reduce using rule 256 (conditional_expression -> binary_expression .)
    COLON           reduce using rule 256 (conditional_expression -> binary_expression .)
    RBRACE          reduce using rule 256 (conditional_expression -> binary_expression .)
    CONDOP          shift and go to state 268
    TIMES           shift and go to state 269
    DIVIDE          shift and go to state 270
    MOD             shift and go to state 271
    PLUS            shift and go to state 272
    MINUS           shift and go to state 273
    RSHIFT          shift and go to state 274
    LSHIFT          shift and go to state 275
    LT              shift and go to state 276
    LE              shift and go to state 277
    GE              shift and go to state 278
    GT              shift and go to state 279
    EQ              shift and go to state 280
    NE              shift and go to state 281
    AND             shift and go to state 282
    OR              shift and go to state 283
    XOR             shift and go to state 284
    LAND            shift and go to state 285
    LOR             shift and go to state 286


state 146

    (258) binary_expression -> cast_expression .

    CONDOP          reduce using rule 258 (binary_expression -> cast_expression .)
    TIMES           reduce using rule 258 (binary_expression -> cast_expression .)
    DIVIDE          reduce using rule 258 (binary_expression -> cast_expression .)
    MOD             reduce using rule 258 (binary_expression -> cast_expression .)
    PLUS            reduce using rule 258 (binary_expression -> cast_expression .)
    MINUS           reduce using rule 258 (binary_expression -> cast_expression .)
    RSHIFT          reduce using rule 258 (binary_expression -> cast_expression .)
    LSHIFT          reduce using rule 258 (binary_expression -> cast_expression .)
    LT              reduce using rule 258 (binary_expression -> cast_expression .)
    LE              reduce using rule 258 (binary_expression -> cast_expression .)
    GE              reduce using rule 258 (binary_expression -> cast_expression .)
    GT              reduce using rule 258 (binary_expression -> cast_expression .)
    EQ              reduce using rule 258 (binary_expression -> cast_expression .)
    NE              reduce using rule 258 (binary_expression -> cast_expression .)
    AND             reduce using rule 258 (binary_expression -> cast_expression .)
    OR              reduce using rule 258 (binary_expression -> cast_expression .)
    XOR             reduce using rule 258 (binary_expression -> cast_expression .)
    LAND            reduce using rule 258 (binary_expression -> cast_expression .)
    LOR             reduce using rule 258 (binary_expression -> cast_expression .)
    COMMA           reduce using rule 258 (binary_expression -> cast_expression .)
    RPAREN          reduce using rule 258 (binary_expression -> cast_expression .)
    SEMI            reduce using rule 258 (binary_expression -> cast_expression .)
    RBRACKET        reduce using rule 258 (binary_expression -> cast_expression .)
    COLON           reduce using rule 258 (binary_expression -> cast_expression .)
    RBRACE          reduce using rule 258 (binary_expression -> cast_expression .)


state 147

    (287) unary_operator -> TIMES .

    LPAREN          reduce using rule 287 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 287 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 287 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 287 (unary_operator -> TIMES .)
    _ALIGNOF        reduce using rule 287 (unary_operator -> TIMES .)
    AND             reduce using rule 287 (unary_operator -> TIMES .)
    TIMES           reduce using rule 287 (unary_operator -> TIMES .)
    PLUS            reduce using rule 287 (unary_operator -> TIMES .)
    MINUS           reduce using rule 287 (unary_operator -> TIMES .)
    NOT             reduce using rule 287 (unary_operator -> TIMES .)
    LNOT            reduce using rule 287 (unary_operator -> TIMES .)
    OFFSETOF        reduce using rule 287 (unary_operator -> TIMES .)
    ID              reduce using rule 287 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 287 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 287 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 287 (unary_operator -> TIMES .)
    INT_CONST_BIN   reduce using rule 287 (unary_operator -> TIMES .)
    INT_CONST_CHAR  reduce using rule 287 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 287 (unary_operator -> TIMES .)
    HEX_FLOAT_CONST reduce using rule 287 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 287 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 287 (unary_operator -> TIMES .)
    U8CHAR_CONST    reduce using rule 287 (unary_operator -> TIMES .)
    U16CHAR_CONST   reduce using rule 287 (unary_operator -> TIMES .)
    U32CHAR_CONST   reduce using rule 287 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 287 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 287 (unary_operator -> TIMES .)
    U8STRING_LITERAL reduce using rule 287 (unary_operator -> TIMES .)
    U16STRING_LITERAL reduce using rule 287 (unary_operator -> TIMES .)
    U32STRING_LITERAL reduce using rule 287 (unary_operator -> TIMES .)


state 148

    (288) unary_operator -> PLUS .

    LPAREN          reduce using rule 288 (unary_operator -> PLUS .)
    PLUSPLUS        reduce using rule 288 (unary_operator -> PLUS .)
    MINUSMINUS      reduce using rule 288 (unary_operator -> PLUS .)
    SIZEOF          reduce using rule 288 (unary_operator -> PLUS .)
    _ALIGNOF        reduce using rule 288 (unary_operator -> PLUS .)
    AND             reduce using rule 288 (unary_operator -> PLUS .)
    TIMES           reduce using rule 288 (unary_operator -> PLUS .)
    PLUS            reduce using rule 288 (unary_operator -> PLUS .)
    MINUS           reduce using rule 288 (unary_operator -> PLUS .)
    NOT             reduce using rule 288 (unary_operator -> PLUS .)
    LNOT            reduce using rule 288 (unary_operator -> PLUS .)
    OFFSETOF        reduce using rule 288 (unary_operator -> PLUS .)
    ID              reduce using rule 288 (unary_operator -> PLUS .)
    INT_CONST_DEC   reduce using rule 288 (unary_operator -> PLUS .)
    INT_CONST_OCT   reduce using rule 288 (unary_operator -> PLUS .)
    INT_CONST_HEX   reduce using rule 288 (unary_operator -> PLUS .)
    INT_CONST_BIN   reduce using rule 288 (unary_operator -> PLUS .)
    INT_CONST_CHAR  reduce using rule 288 (unary_operator -> PLUS .)
    FLOAT_CONST     reduce using rule 288 (unary_operator -> PLUS .)
    HEX_FLOAT_CONST reduce using rule 288 (unary_operator -> PLUS .)
    CHAR_CONST      reduce using rule 288 (unary_operator -> PLUS .)
    WCHAR_CONST     reduce using rule 288 (unary_operator -> PLUS .)
    U8CHAR_CONST    reduce using rule 288 (unary_operator -> PLUS .)
    U16CHAR_CONST   reduce using rule 288 (unary_operator -> PLUS .)
    U32CHAR_CONST   reduce using rule 288 (unary_operator -> PLUS .)
    STRING_LITERAL  reduce using rule 288 (unary_operator -> PLUS .)
    WSTRING_LITERAL reduce using rule 288 (unary_operator -> PLUS .)
    U8STRING_LITERAL reduce using rule 288 (unary_operator -> PLUS .)
    U16STRING_LITERAL reduce using rule 288 (unary_operator -> PLUS .)
    U32STRING_LITERAL reduce using rule 288 (unary_operator -> PLUS .)


state 149

    (289) unary_operator -> MINUS .

    LPAREN          reduce using rule 289 (unary_operator -> MINUS .)
    PLUSPLUS        reduce using rule 289 (unary_operator -> MINUS .)
    MINUSMINUS      reduce using rule 289 (unary_operator -> MINUS .)
    SIZEOF          reduce using rule 289 (unary_operator -> MINUS .)
    _ALIGNOF        reduce using rule 289 (unary_operator -> MINUS .)
    AND             reduce using rule 289 (unary_operator -> MINUS .)
    TIMES           reduce using rule 289 (unary_operator -> MINUS .)
    PLUS            reduce using rule 289 (unary_operator -> MINUS .)
    MINUS           reduce using rule 289 (unary_operator -> MINUS .)
    NOT             reduce using rule 289 (unary_operator -> MINUS .)
    LNOT            reduce using rule 289 (unary_operator -> MINUS .)
    OFFSETOF        reduce using rule 289 (unary_operator -> MINUS .)
    ID              reduce using rule 289 (unary_operator -> MINUS .)
    INT_CONST_DEC   reduce using rule 289 (unary_operator -> MINUS .)
    INT_CONST_OCT   reduce using rule 289 (unary_operator -> MINUS .)
    INT_CONST_HEX   reduce using rule 289 (unary_operator -> MINUS .)
    INT_CONST_BIN   reduce using rule 289 (unary_operator -> MINUS .)
    INT_CONST_CHAR  reduce using rule 289 (unary_operator -> MINUS .)
    FLOAT_CONST     reduce using rule 289 (unary_operator -> MINUS .)
    HEX_FLOAT_CONST reduce using rule 289 (unary_operator -> MINUS .)
    CHAR_CONST      reduce using rule 289 (unary_operator -> MINUS .)
    WCHAR_CONST     reduce using rule 289 (unary_operator -> MINUS .)
    U8CHAR_CONST    reduce using rule 289 (unary_operator -> MINUS .)
    U16CHAR_CONST   reduce using rule 289 (unary_operator -> MINUS .)
    U32CHAR_CONST   reduce using rule 289 (unary_operator -> MINUS .)
    STRING_LITERAL  reduce using rule 289 (unary_operator -> MINUS .)
    WSTRING_LITERAL reduce using rule 289 (unary_operator -> MINUS .)
    U8STRING_LITERAL reduce using rule 289 (unary_operator -> MINUS .)
    U16STRING_LITERAL reduce using rule 289 (unary_operator -> MINUS .)
    U32STRING_LITERAL reduce using rule 289 (unary_operator -> MINUS .)


state 150

    (286) unary_operator -> AND .

    LPAREN          reduce using rule 286 (unary_operator -> AND .)
    PLUSPLUS        reduce using rule 286 (unary_operator -> AND .)
    MINUSMINUS      reduce using rule 286 (unary_operator -> AND .)
    SIZEOF          reduce using rule 286 (unary_operator -> AND .)
    _ALIGNOF        reduce using rule 286 (unary_operator -> AND .)
    AND             reduce using rule 286 (unary_operator -> AND .)
    TIMES           reduce using rule 286 (unary_operator -> AND .)
    PLUS            reduce using rule 286 (unary_operator -> AND .)
    MINUS           reduce using rule 286 (unary_operator -> AND .)
    NOT             reduce using rule 286 (unary_operator -> AND .)
    LNOT            reduce using rule 286 (unary_operator -> AND .)
    OFFSETOF        reduce using rule 286 (unary_operator -> AND .)
    ID              reduce using rule 286 (unary_operator -> AND .)
    INT_CONST_DEC   reduce using rule 286 (unary_operator -> AND .)
    INT_CONST_OCT   reduce using rule 286 (unary_operator -> AND .)
    INT_CONST_HEX   reduce using rule 286 (unary_operator -> AND .)
    INT_CONST_BIN   reduce using rule 286 (unary_operator -> AND .)
    INT_CONST_CHAR  reduce using rule 286 (unary_operator -> AND .)
    FLOAT_CONST     reduce using rule 286 (unary_operator -> AND .)
    HEX_FLOAT_CONST reduce using rule 286 (unary_operator -> AND .)
    CHAR_CONST      reduce using rule 286 (unary_operator -> AND .)
    WCHAR_CONST     reduce using rule 286 (unary_operator -> AND .)
    U8CHAR_CONST    reduce using rule 286 (unary_operator -> AND .)
    U16CHAR_CONST   reduce using rule 286 (unary_operator -> AND .)
    U32CHAR_CONST   reduce using rule 286 (unary_operator -> AND .)
    STRING_LITERAL  reduce using rule 286 (unary_operator -> AND .)
    WSTRING_LITERAL reduce using rule 286 (unary_operator -> AND .)
    U8STRING_LITERAL reduce using rule 286 (unary_operator -> AND .)
    U16STRING_LITERAL reduce using rule 286 (unary_operator -> AND .)
    U32STRING_LITERAL reduce using rule 286 (unary_operator -> AND .)


state 151

    (277) cast_expression -> unary_expression .

    CONDOP          reduce using rule 277 (cast_expression -> unary_expression .)
    TIMES           reduce using rule 277 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 277 (cast_expression -> unary_expression .)
    MOD             reduce using rule 277 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 277 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 277 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 277 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 277 (cast_expression -> unary_expression .)
    LT              reduce using rule 277 (cast_expression -> unary_expression .)
    LE              reduce using rule 277 (cast_expression -> unary_expression .)
    GE              reduce using rule 277 (cast_expression -> unary_expression .)
    GT              reduce using rule 277 (cast_expression -> unary_expression .)
    EQ              reduce using rule 277 (cast_expression -> unary_expression .)
    NE              reduce using rule 277 (cast_expression -> unary_expression .)
    AND             reduce using rule 277 (cast_expression -> unary_expression .)
    OR              reduce using rule 277 (cast_expression -> unary_expression .)
    XOR             reduce using rule 277 (cast_expression -> unary_expression .)
    LAND            reduce using rule 277 (cast_expression -> unary_expression .)
    LOR             reduce using rule 277 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 277 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 277 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 277 (cast_expression -> unary_expression .)
    XOREQUAL        reduce using rule 277 (cast_expression -> unary_expression .)
    TIMESEQUAL      reduce using rule 277 (cast_expression -> unary_expression .)
    DIVEQUAL        reduce using rule 277 (cast_expression -> unary_expression .)
    MODEQUAL        reduce using rule 277 (cast_expression -> unary_expression .)
    PLUSEQUAL       reduce using rule 277 (cast_expression -> unary_expression .)
    MINUSEQUAL      reduce using rule 277 (cast_expression -> unary_expression .)
    LSHIFTEQUAL     reduce using rule 277 (cast_expression -> unary_expression .)
    RSHIFTEQUAL     reduce using rule 277 (cast_expression -> unary_expression .)
    ANDEQUAL        reduce using rule 277 (cast_expression -> unary_expression .)
    OREQUAL         reduce using rule 277 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 277 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 277 (cast_expression -> unary_expression .)
    COLON           reduce using rule 277 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 277 (cast_expression -> unary_expression .)


state 152

    (279) unary_expression -> postfix_expression .
    (293) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (294) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> postfix_expression . LPAREN RPAREN
    (296) postfix_expression -> postfix_expression . PERIOD ID
    (297) postfix_expression -> postfix_expression . PERIOD TYPEID
    (298) postfix_expression -> postfix_expression . ARROW ID
    (299) postfix_expression -> postfix_expression . ARROW TYPEID
    (300) postfix_expression -> postfix_expression . PLUSPLUS
    (301) postfix_expression -> postfix_expression . MINUSMINUS

    CONDOP          reduce using rule 279 (unary_expression -> postfix_expression .)
    TIMES           reduce using rule 279 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 279 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 279 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 279 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 279 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 279 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 279 (unary_expression -> postfix_expression .)
    LT              reduce using rule 279 (unary_expression -> postfix_expression .)
    LE              reduce using rule 279 (unary_expression -> postfix_expression .)
    GE              reduce using rule 279 (unary_expression -> postfix_expression .)
    GT              reduce using rule 279 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 279 (unary_expression -> postfix_expression .)
    NE              reduce using rule 279 (unary_expression -> postfix_expression .)
    AND             reduce using rule 279 (unary_expression -> postfix_expression .)
    OR              reduce using rule 279 (unary_expression -> postfix_expression .)
    XOR             reduce using rule 279 (unary_expression -> postfix_expression .)
    LAND            reduce using rule 279 (unary_expression -> postfix_expression .)
    LOR             reduce using rule 279 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 279 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 279 (unary_expression -> postfix_expression .)
    EQUALS          reduce using rule 279 (unary_expression -> postfix_expression .)
    XOREQUAL        reduce using rule 279 (unary_expression -> postfix_expression .)
    TIMESEQUAL      reduce using rule 279 (unary_expression -> postfix_expression .)
    DIVEQUAL        reduce using rule 279 (unary_expression -> postfix_expression .)
    MODEQUAL        reduce using rule 279 (unary_expression -> postfix_expression .)
    PLUSEQUAL       reduce using rule 279 (unary_expression -> postfix_expression .)
    MINUSEQUAL      reduce using rule 279 (unary_expression -> postfix_expression .)
    LSHIFTEQUAL     reduce using rule 279 (unary_expression -> postfix_expression .)
    RSHIFTEQUAL     reduce using rule 279 (unary_expression -> postfix_expression .)
    ANDEQUAL        reduce using rule 279 (unary_expression -> postfix_expression .)
    OREQUAL         reduce using rule 279 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 279 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 279 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 279 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 279 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 287
    LPAREN          shift and go to state 288
    PERIOD          shift and go to state 289
    ARROW           shift and go to state 290
    PLUSPLUS        shift and go to state 291
    MINUSMINUS      shift and go to state 292


state 153

    (280) unary_expression -> PLUSPLUS . unary_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    LPAREN          shift and go to state 294
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    unary_expression               shift and go to state 293
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 154

    (281) unary_expression -> MINUSMINUS . unary_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    LPAREN          shift and go to state 294
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    unary_expression               shift and go to state 295
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 155

    (282) unary_expression -> unary_operator . cast_expression
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 296
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 156

    (283) unary_expression -> SIZEOF . unary_expression
    (284) unary_expression -> SIZEOF . LPAREN type_name RPAREN
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 298
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    unary_expression               shift and go to state 297
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 157

    (285) unary_expression -> _ALIGNOF . LPAREN type_name RPAREN

    LPAREN          shift and go to state 299


state 158

    (292) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 292 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 292 (postfix_expression -> primary_expression .)
    PERIOD          reduce using rule 292 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 292 (postfix_expression -> primary_expression .)
    PLUSPLUS        reduce using rule 292 (postfix_expression -> primary_expression .)
    MINUSMINUS      reduce using rule 292 (postfix_expression -> primary_expression .)
    CONDOP          reduce using rule 292 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 292 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 292 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 292 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 292 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 292 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 292 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 292 (postfix_expression -> primary_expression .)
    LT              reduce using rule 292 (postfix_expression -> primary_expression .)
    LE              reduce using rule 292 (postfix_expression -> primary_expression .)
    GE              reduce using rule 292 (postfix_expression -> primary_expression .)
    GT              reduce using rule 292 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 292 (postfix_expression -> primary_expression .)
    NE              reduce using rule 292 (postfix_expression -> primary_expression .)
    AND             reduce using rule 292 (postfix_expression -> primary_expression .)
    OR              reduce using rule 292 (postfix_expression -> primary_expression .)
    XOR             reduce using rule 292 (postfix_expression -> primary_expression .)
    LAND            reduce using rule 292 (postfix_expression -> primary_expression .)
    LOR             reduce using rule 292 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 292 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 292 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 292 (postfix_expression -> primary_expression .)
    XOREQUAL        reduce using rule 292 (postfix_expression -> primary_expression .)
    TIMESEQUAL      reduce using rule 292 (postfix_expression -> primary_expression .)
    DIVEQUAL        reduce using rule 292 (postfix_expression -> primary_expression .)
    MODEQUAL        reduce using rule 292 (postfix_expression -> primary_expression .)
    PLUSEQUAL       reduce using rule 292 (postfix_expression -> primary_expression .)
    MINUSEQUAL      reduce using rule 292 (postfix_expression -> primary_expression .)
    LSHIFTEQUAL     reduce using rule 292 (postfix_expression -> primary_expression .)
    RSHIFTEQUAL     reduce using rule 292 (postfix_expression -> primary_expression .)
    ANDEQUAL        reduce using rule 292 (postfix_expression -> primary_expression .)
    OREQUAL         reduce using rule 292 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 292 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 292 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 292 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 292 (postfix_expression -> primary_expression .)


state 159

    (315) identifier -> ID .

    LBRACKET        reduce using rule 315 (identifier -> ID .)
    LPAREN          reduce using rule 315 (identifier -> ID .)
    PERIOD          reduce using rule 315 (identifier -> ID .)
    ARROW           reduce using rule 315 (identifier -> ID .)
    PLUSPLUS        reduce using rule 315 (identifier -> ID .)
    MINUSMINUS      reduce using rule 315 (identifier -> ID .)
    CONDOP          reduce using rule 315 (identifier -> ID .)
    TIMES           reduce using rule 315 (identifier -> ID .)
    DIVIDE          reduce using rule 315 (identifier -> ID .)
    MOD             reduce using rule 315 (identifier -> ID .)
    PLUS            reduce using rule 315 (identifier -> ID .)
    MINUS           reduce using rule 315 (identifier -> ID .)
    RSHIFT          reduce using rule 315 (identifier -> ID .)
    LSHIFT          reduce using rule 315 (identifier -> ID .)
    LT              reduce using rule 315 (identifier -> ID .)
    LE              reduce using rule 315 (identifier -> ID .)
    GE              reduce using rule 315 (identifier -> ID .)
    GT              reduce using rule 315 (identifier -> ID .)
    EQ              reduce using rule 315 (identifier -> ID .)
    NE              reduce using rule 315 (identifier -> ID .)
    AND             reduce using rule 315 (identifier -> ID .)
    OR              reduce using rule 315 (identifier -> ID .)
    XOR             reduce using rule 315 (identifier -> ID .)
    LAND            reduce using rule 315 (identifier -> ID .)
    LOR             reduce using rule 315 (identifier -> ID .)
    COMMA           reduce using rule 315 (identifier -> ID .)
    RPAREN          reduce using rule 315 (identifier -> ID .)
    EQUALS          reduce using rule 315 (identifier -> ID .)
    XOREQUAL        reduce using rule 315 (identifier -> ID .)
    TIMESEQUAL      reduce using rule 315 (identifier -> ID .)
    DIVEQUAL        reduce using rule 315 (identifier -> ID .)
    MODEQUAL        reduce using rule 315 (identifier -> ID .)
    PLUSEQUAL       reduce using rule 315 (identifier -> ID .)
    MINUSEQUAL      reduce using rule 315 (identifier -> ID .)
    LSHIFTEQUAL     reduce using rule 315 (identifier -> ID .)
    RSHIFTEQUAL     reduce using rule 315 (identifier -> ID .)
    ANDEQUAL        reduce using rule 315 (identifier -> ID .)
    OREQUAL         reduce using rule 315 (identifier -> ID .)
    SEMI            reduce using rule 315 (identifier -> ID .)
    RBRACKET        reduce using rule 315 (identifier -> ID .)
    COLON           reduce using rule 315 (identifier -> ID .)
    RBRACE          reduce using rule 315 (identifier -> ID .)


state 160

    (290) unary_operator -> NOT .

    LPAREN          reduce using rule 290 (unary_operator -> NOT .)
    PLUSPLUS        reduce using rule 290 (unary_operator -> NOT .)
    MINUSMINUS      reduce using rule 290 (unary_operator -> NOT .)
    SIZEOF          reduce using rule 290 (unary_operator -> NOT .)
    _ALIGNOF        reduce using rule 290 (unary_operator -> NOT .)
    AND             reduce using rule 290 (unary_operator -> NOT .)
    TIMES           reduce using rule 290 (unary_operator -> NOT .)
    PLUS            reduce using rule 290 (unary_operator -> NOT .)
    MINUS           reduce using rule 290 (unary_operator -> NOT .)
    NOT             reduce using rule 290 (unary_operator -> NOT .)
    LNOT            reduce using rule 290 (unary_operator -> NOT .)
    OFFSETOF        reduce using rule 290 (unary_operator -> NOT .)
    ID              reduce using rule 290 (unary_operator -> NOT .)
    INT_CONST_DEC   reduce using rule 290 (unary_operator -> NOT .)
    INT_CONST_OCT   reduce using rule 290 (unary_operator -> NOT .)
    INT_CONST_HEX   reduce using rule 290 (unary_operator -> NOT .)
    INT_CONST_BIN   reduce using rule 290 (unary_operator -> NOT .)
    INT_CONST_CHAR  reduce using rule 290 (unary_operator -> NOT .)
    FLOAT_CONST     reduce using rule 290 (unary_operator -> NOT .)
    HEX_FLOAT_CONST reduce using rule 290 (unary_operator -> NOT .)
    CHAR_CONST      reduce using rule 290 (unary_operator -> NOT .)
    WCHAR_CONST     reduce using rule 290 (unary_operator -> NOT .)
    U8CHAR_CONST    reduce using rule 290 (unary_operator -> NOT .)
    U16CHAR_CONST   reduce using rule 290 (unary_operator -> NOT .)
    U32CHAR_CONST   reduce using rule 290 (unary_operator -> NOT .)
    STRING_LITERAL  reduce using rule 290 (unary_operator -> NOT .)
    WSTRING_LITERAL reduce using rule 290 (unary_operator -> NOT .)
    U8STRING_LITERAL reduce using rule 290 (unary_operator -> NOT .)
    U16STRING_LITERAL reduce using rule 290 (unary_operator -> NOT .)
    U32STRING_LITERAL reduce using rule 290 (unary_operator -> NOT .)


state 161

    (291) unary_operator -> LNOT .

    LPAREN          reduce using rule 291 (unary_operator -> LNOT .)
    PLUSPLUS        reduce using rule 291 (unary_operator -> LNOT .)
    MINUSMINUS      reduce using rule 291 (unary_operator -> LNOT .)
    SIZEOF          reduce using rule 291 (unary_operator -> LNOT .)
    _ALIGNOF        reduce using rule 291 (unary_operator -> LNOT .)
    AND             reduce using rule 291 (unary_operator -> LNOT .)
    TIMES           reduce using rule 291 (unary_operator -> LNOT .)
    PLUS            reduce using rule 291 (unary_operator -> LNOT .)
    MINUS           reduce using rule 291 (unary_operator -> LNOT .)
    NOT             reduce using rule 291 (unary_operator -> LNOT .)
    LNOT            reduce using rule 291 (unary_operator -> LNOT .)
    OFFSETOF        reduce using rule 291 (unary_operator -> LNOT .)
    ID              reduce using rule 291 (unary_operator -> LNOT .)
    INT_CONST_DEC   reduce using rule 291 (unary_operator -> LNOT .)
    INT_CONST_OCT   reduce using rule 291 (unary_operator -> LNOT .)
    INT_CONST_HEX   reduce using rule 291 (unary_operator -> LNOT .)
    INT_CONST_BIN   reduce using rule 291 (unary_operator -> LNOT .)
    INT_CONST_CHAR  reduce using rule 291 (unary_operator -> LNOT .)
    FLOAT_CONST     reduce using rule 291 (unary_operator -> LNOT .)
    HEX_FLOAT_CONST reduce using rule 291 (unary_operator -> LNOT .)
    CHAR_CONST      reduce using rule 291 (unary_operator -> LNOT .)
    WCHAR_CONST     reduce using rule 291 (unary_operator -> LNOT .)
    U8CHAR_CONST    reduce using rule 291 (unary_operator -> LNOT .)
    U16CHAR_CONST   reduce using rule 291 (unary_operator -> LNOT .)
    U32CHAR_CONST   reduce using rule 291 (unary_operator -> LNOT .)
    STRING_LITERAL  reduce using rule 291 (unary_operator -> LNOT .)
    WSTRING_LITERAL reduce using rule 291 (unary_operator -> LNOT .)
    U8STRING_LITERAL reduce using rule 291 (unary_operator -> LNOT .)
    U16STRING_LITERAL reduce using rule 291 (unary_operator -> LNOT .)
    U32STRING_LITERAL reduce using rule 291 (unary_operator -> LNOT .)


state 162

    (304) primary_expression -> identifier .

    LBRACKET        reduce using rule 304 (primary_expression -> identifier .)
    LPAREN          reduce using rule 304 (primary_expression -> identifier .)
    PERIOD          reduce using rule 304 (primary_expression -> identifier .)
    ARROW           reduce using rule 304 (primary_expression -> identifier .)
    PLUSPLUS        reduce using rule 304 (primary_expression -> identifier .)
    MINUSMINUS      reduce using rule 304 (primary_expression -> identifier .)
    CONDOP          reduce using rule 304 (primary_expression -> identifier .)
    TIMES           reduce using rule 304 (primary_expression -> identifier .)
    DIVIDE          reduce using rule 304 (primary_expression -> identifier .)
    MOD             reduce using rule 304 (primary_expression -> identifier .)
    PLUS            reduce using rule 304 (primary_expression -> identifier .)
    MINUS           reduce using rule 304 (primary_expression -> identifier .)
    RSHIFT          reduce using rule 304 (primary_expression -> identifier .)
    LSHIFT          reduce using rule 304 (primary_expression -> identifier .)
    LT              reduce using rule 304 (primary_expression -> identifier .)
    LE              reduce using rule 304 (primary_expression -> identifier .)
    GE              reduce using rule 304 (primary_expression -> identifier .)
    GT              reduce using rule 304 (primary_expression -> identifier .)
    EQ              reduce using rule 304 (primary_expression -> identifier .)
    NE              reduce using rule 304 (primary_expression -> identifier .)
    AND             reduce using rule 304 (primary_expression -> identifier .)
    OR              reduce using rule 304 (primary_expression -> identifier .)
    XOR             reduce using rule 304 (primary_expression -> identifier .)
    LAND            reduce using rule 304 (primary_expression -> identifier .)
    LOR             reduce using rule 304 (primary_expression -> identifier .)
    COMMA           reduce using rule 304 (primary_expression -> identifier .)
    RPAREN          reduce using rule 304 (primary_expression -> identifier .)
    EQUALS          reduce using rule 304 (primary_expression -> identifier .)
    XOREQUAL        reduce using rule 304 (primary_expression -> identifier .)
    TIMESEQUAL      reduce using rule 304 (primary_expression -> identifier .)
    DIVEQUAL        reduce using rule 304 (primary_expression -> identifier .)
    MODEQUAL        reduce using rule 304 (primary_expression -> identifier .)
    PLUSEQUAL       reduce using rule 304 (primary_expression -> identifier .)
    MINUSEQUAL      reduce using rule 304 (primary_expression -> identifier .)
    LSHIFTEQUAL     reduce using rule 304 (primary_expression -> identifier .)
    RSHIFTEQUAL     reduce using rule 304 (primary_expression -> identifier .)
    ANDEQUAL        reduce using rule 304 (primary_expression -> identifier .)
    OREQUAL         reduce using rule 304 (primary_expression -> identifier .)
    SEMI            reduce using rule 304 (primary_expression -> identifier .)
    RBRACKET        reduce using rule 304 (primary_expression -> identifier .)
    COLON           reduce using rule 304 (primary_expression -> identifier .)
    RBRACE          reduce using rule 304 (primary_expression -> identifier .)


state 163

    (305) primary_expression -> constant .

    LBRACKET        reduce using rule 305 (primary_expression -> constant .)
    LPAREN          reduce using rule 305 (primary_expression -> constant .)
    PERIOD          reduce using rule 305 (primary_expression -> constant .)
    ARROW           reduce using rule 305 (primary_expression -> constant .)
    PLUSPLUS        reduce using rule 305 (primary_expression -> constant .)
    MINUSMINUS      reduce using rule 305 (primary_expression -> constant .)
    CONDOP          reduce using rule 305 (primary_expression -> constant .)
    TIMES           reduce using rule 305 (primary_expression -> constant .)
    DIVIDE          reduce using rule 305 (primary_expression -> constant .)
    MOD             reduce using rule 305 (primary_expression -> constant .)
    PLUS            reduce using rule 305 (primary_expression -> constant .)
    MINUS           reduce using rule 305 (primary_expression -> constant .)
    RSHIFT          reduce using rule 305 (primary_expression -> constant .)
    LSHIFT          reduce using rule 305 (primary_expression -> constant .)
    LT              reduce using rule 305 (primary_expression -> constant .)
    LE              reduce using rule 305 (primary_expression -> constant .)
    GE              reduce using rule 305 (primary_expression -> constant .)
    GT              reduce using rule 305 (primary_expression -> constant .)
    EQ              reduce using rule 305 (primary_expression -> constant .)
    NE              reduce using rule 305 (primary_expression -> constant .)
    AND             reduce using rule 305 (primary_expression -> constant .)
    OR              reduce using rule 305 (primary_expression -> constant .)
    XOR             reduce using rule 305 (primary_expression -> constant .)
    LAND            reduce using rule 305 (primary_expression -> constant .)
    LOR             reduce using rule 305 (primary_expression -> constant .)
    COMMA           reduce using rule 305 (primary_expression -> constant .)
    RPAREN          reduce using rule 305 (primary_expression -> constant .)
    EQUALS          reduce using rule 305 (primary_expression -> constant .)
    XOREQUAL        reduce using rule 305 (primary_expression -> constant .)
    TIMESEQUAL      reduce using rule 305 (primary_expression -> constant .)
    DIVEQUAL        reduce using rule 305 (primary_expression -> constant .)
    MODEQUAL        reduce using rule 305 (primary_expression -> constant .)
    PLUSEQUAL       reduce using rule 305 (primary_expression -> constant .)
    MINUSEQUAL      reduce using rule 305 (primary_expression -> constant .)
    LSHIFTEQUAL     reduce using rule 305 (primary_expression -> constant .)
    RSHIFTEQUAL     reduce using rule 305 (primary_expression -> constant .)
    ANDEQUAL        reduce using rule 305 (primary_expression -> constant .)
    OREQUAL         reduce using rule 305 (primary_expression -> constant .)
    SEMI            reduce using rule 305 (primary_expression -> constant .)
    RBRACKET        reduce using rule 305 (primary_expression -> constant .)
    COLON           reduce using rule 305 (primary_expression -> constant .)
    RBRACE          reduce using rule 305 (primary_expression -> constant .)


state 164

    (307) primary_expression -> unified_wstring_literal .
    (334) unified_wstring_literal -> unified_wstring_literal . WSTRING_LITERAL
    (335) unified_wstring_literal -> unified_wstring_literal . U8STRING_LITERAL
    (336) unified_wstring_literal -> unified_wstring_literal . U16STRING_LITERAL
    (337) unified_wstring_literal -> unified_wstring_literal . U32STRING_LITERAL

    LBRACKET        reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    LPAREN          reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    PERIOD          reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    ARROW           reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    PLUSPLUS        reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    MINUSMINUS      reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    CONDOP          reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    TIMES           reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    DIVIDE          reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    MOD             reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    PLUS            reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    MINUS           reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    RSHIFT          reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    LSHIFT          reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    LT              reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    LE              reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    GE              reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    GT              reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    EQ              reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    NE              reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    AND             reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    OR              reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    XOR             reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    LAND            reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    LOR             reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    COMMA           reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    RPAREN          reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    EQUALS          reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    XOREQUAL        reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    TIMESEQUAL      reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    DIVEQUAL        reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    MODEQUAL        reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    PLUSEQUAL       reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    MINUSEQUAL      reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    LSHIFTEQUAL     reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    RSHIFTEQUAL     reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    ANDEQUAL        reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    OREQUAL         reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    SEMI            reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    RBRACKET        reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    COLON           reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    RBRACE          reduce using rule 307 (primary_expression -> unified_wstring_literal .)
    WSTRING_LITERAL shift and go to state 300
    U8STRING_LITERAL shift and go to state 301
    U16STRING_LITERAL shift and go to state 302
    U32STRING_LITERAL shift and go to state 303


state 165

    (309) primary_expression -> OFFSETOF . LPAREN type_name COMMA offsetof_member_designator RPAREN

    LPAREN          shift and go to state 304


state 166

    (316) constant -> INT_CONST_DEC .

    LBRACKET        reduce using rule 316 (constant -> INT_CONST_DEC .)
    LPAREN          reduce using rule 316 (constant -> INT_CONST_DEC .)
    PERIOD          reduce using rule 316 (constant -> INT_CONST_DEC .)
    ARROW           reduce using rule 316 (constant -> INT_CONST_DEC .)
    PLUSPLUS        reduce using rule 316 (constant -> INT_CONST_DEC .)
    MINUSMINUS      reduce using rule 316 (constant -> INT_CONST_DEC .)
    CONDOP          reduce using rule 316 (constant -> INT_CONST_DEC .)
    TIMES           reduce using rule 316 (constant -> INT_CONST_DEC .)
    DIVIDE          reduce using rule 316 (constant -> INT_CONST_DEC .)
    MOD             reduce using rule 316 (constant -> INT_CONST_DEC .)
    PLUS            reduce using rule 316 (constant -> INT_CONST_DEC .)
    MINUS           reduce using rule 316 (constant -> INT_CONST_DEC .)
    RSHIFT          reduce using rule 316 (constant -> INT_CONST_DEC .)
    LSHIFT          reduce using rule 316 (constant -> INT_CONST_DEC .)
    LT              reduce using rule 316 (constant -> INT_CONST_DEC .)
    LE              reduce using rule 316 (constant -> INT_CONST_DEC .)
    GE              reduce using rule 316 (constant -> INT_CONST_DEC .)
    GT              reduce using rule 316 (constant -> INT_CONST_DEC .)
    EQ              reduce using rule 316 (constant -> INT_CONST_DEC .)
    NE              reduce using rule 316 (constant -> INT_CONST_DEC .)
    AND             reduce using rule 316 (constant -> INT_CONST_DEC .)
    OR              reduce using rule 316 (constant -> INT_CONST_DEC .)
    XOR             reduce using rule 316 (constant -> INT_CONST_DEC .)
    LAND            reduce using rule 316 (constant -> INT_CONST_DEC .)
    LOR             reduce using rule 316 (constant -> INT_CONST_DEC .)
    COMMA           reduce using rule 316 (constant -> INT_CONST_DEC .)
    RPAREN          reduce using rule 316 (constant -> INT_CONST_DEC .)
    EQUALS          reduce using rule 316 (constant -> INT_CONST_DEC .)
    XOREQUAL        reduce using rule 316 (constant -> INT_CONST_DEC .)
    TIMESEQUAL      reduce using rule 316 (constant -> INT_CONST_DEC .)
    DIVEQUAL        reduce using rule 316 (constant -> INT_CONST_DEC .)
    MODEQUAL        reduce using rule 316 (constant -> INT_CONST_DEC .)
    PLUSEQUAL       reduce using rule 316 (constant -> INT_CONST_DEC .)
    MINUSEQUAL      reduce using rule 316 (constant -> INT_CONST_DEC .)
    LSHIFTEQUAL     reduce using rule 316 (constant -> INT_CONST_DEC .)
    RSHIFTEQUAL     reduce using rule 316 (constant -> INT_CONST_DEC .)
    ANDEQUAL        reduce using rule 316 (constant -> INT_CONST_DEC .)
    OREQUAL         reduce using rule 316 (constant -> INT_CONST_DEC .)
    SEMI            reduce using rule 316 (constant -> INT_CONST_DEC .)
    RBRACKET        reduce using rule 316 (constant -> INT_CONST_DEC .)
    COLON           reduce using rule 316 (constant -> INT_CONST_DEC .)
    RBRACE          reduce using rule 316 (constant -> INT_CONST_DEC .)


state 167

    (317) constant -> INT_CONST_OCT .

    LBRACKET        reduce using rule 317 (constant -> INT_CONST_OCT .)
    LPAREN          reduce using rule 317 (constant -> INT_CONST_OCT .)
    PERIOD          reduce using rule 317 (constant -> INT_CONST_OCT .)
    ARROW           reduce using rule 317 (constant -> INT_CONST_OCT .)
    PLUSPLUS        reduce using rule 317 (constant -> INT_CONST_OCT .)
    MINUSMINUS      reduce using rule 317 (constant -> INT_CONST_OCT .)
    CONDOP          reduce using rule 317 (constant -> INT_CONST_OCT .)
    TIMES           reduce using rule 317 (constant -> INT_CONST_OCT .)
    DIVIDE          reduce using rule 317 (constant -> INT_CONST_OCT .)
    MOD             reduce using rule 317 (constant -> INT_CONST_OCT .)
    PLUS            reduce using rule 317 (constant -> INT_CONST_OCT .)
    MINUS           reduce using rule 317 (constant -> INT_CONST_OCT .)
    RSHIFT          reduce using rule 317 (constant -> INT_CONST_OCT .)
    LSHIFT          reduce using rule 317 (constant -> INT_CONST_OCT .)
    LT              reduce using rule 317 (constant -> INT_CONST_OCT .)
    LE              reduce using rule 317 (constant -> INT_CONST_OCT .)
    GE              reduce using rule 317 (constant -> INT_CONST_OCT .)
    GT              reduce using rule 317 (constant -> INT_CONST_OCT .)
    EQ              reduce using rule 317 (constant -> INT_CONST_OCT .)
    NE              reduce using rule 317 (constant -> INT_CONST_OCT .)
    AND             reduce using rule 317 (constant -> INT_CONST_OCT .)
    OR              reduce using rule 317 (constant -> INT_CONST_OCT .)
    XOR             reduce using rule 317 (constant -> INT_CONST_OCT .)
    LAND            reduce using rule 317 (constant -> INT_CONST_OCT .)
    LOR             reduce using rule 317 (constant -> INT_CONST_OCT .)
    COMMA           reduce using rule 317 (constant -> INT_CONST_OCT .)
    RPAREN          reduce using rule 317 (constant -> INT_CONST_OCT .)
    EQUALS          reduce using rule 317 (constant -> INT_CONST_OCT .)
    XOREQUAL        reduce using rule 317 (constant -> INT_CONST_OCT .)
    TIMESEQUAL      reduce using rule 317 (constant -> INT_CONST_OCT .)
    DIVEQUAL        reduce using rule 317 (constant -> INT_CONST_OCT .)
    MODEQUAL        reduce using rule 317 (constant -> INT_CONST_OCT .)
    PLUSEQUAL       reduce using rule 317 (constant -> INT_CONST_OCT .)
    MINUSEQUAL      reduce using rule 317 (constant -> INT_CONST_OCT .)
    LSHIFTEQUAL     reduce using rule 317 (constant -> INT_CONST_OCT .)
    RSHIFTEQUAL     reduce using rule 317 (constant -> INT_CONST_OCT .)
    ANDEQUAL        reduce using rule 317 (constant -> INT_CONST_OCT .)
    OREQUAL         reduce using rule 317 (constant -> INT_CONST_OCT .)
    SEMI            reduce using rule 317 (constant -> INT_CONST_OCT .)
    RBRACKET        reduce using rule 317 (constant -> INT_CONST_OCT .)
    COLON           reduce using rule 317 (constant -> INT_CONST_OCT .)
    RBRACE          reduce using rule 317 (constant -> INT_CONST_OCT .)


state 168

    (318) constant -> INT_CONST_HEX .

    LBRACKET        reduce using rule 318 (constant -> INT_CONST_HEX .)
    LPAREN          reduce using rule 318 (constant -> INT_CONST_HEX .)
    PERIOD          reduce using rule 318 (constant -> INT_CONST_HEX .)
    ARROW           reduce using rule 318 (constant -> INT_CONST_HEX .)
    PLUSPLUS        reduce using rule 318 (constant -> INT_CONST_HEX .)
    MINUSMINUS      reduce using rule 318 (constant -> INT_CONST_HEX .)
    CONDOP          reduce using rule 318 (constant -> INT_CONST_HEX .)
    TIMES           reduce using rule 318 (constant -> INT_CONST_HEX .)
    DIVIDE          reduce using rule 318 (constant -> INT_CONST_HEX .)
    MOD             reduce using rule 318 (constant -> INT_CONST_HEX .)
    PLUS            reduce using rule 318 (constant -> INT_CONST_HEX .)
    MINUS           reduce using rule 318 (constant -> INT_CONST_HEX .)
    RSHIFT          reduce using rule 318 (constant -> INT_CONST_HEX .)
    LSHIFT          reduce using rule 318 (constant -> INT_CONST_HEX .)
    LT              reduce using rule 318 (constant -> INT_CONST_HEX .)
    LE              reduce using rule 318 (constant -> INT_CONST_HEX .)
    GE              reduce using rule 318 (constant -> INT_CONST_HEX .)
    GT              reduce using rule 318 (constant -> INT_CONST_HEX .)
    EQ              reduce using rule 318 (constant -> INT_CONST_HEX .)
    NE              reduce using rule 318 (constant -> INT_CONST_HEX .)
    AND             reduce using rule 318 (constant -> INT_CONST_HEX .)
    OR              reduce using rule 318 (constant -> INT_CONST_HEX .)
    XOR             reduce using rule 318 (constant -> INT_CONST_HEX .)
    LAND            reduce using rule 318 (constant -> INT_CONST_HEX .)
    LOR             reduce using rule 318 (constant -> INT_CONST_HEX .)
    COMMA           reduce using rule 318 (constant -> INT_CONST_HEX .)
    RPAREN          reduce using rule 318 (constant -> INT_CONST_HEX .)
    EQUALS          reduce using rule 318 (constant -> INT_CONST_HEX .)
    XOREQUAL        reduce using rule 318 (constant -> INT_CONST_HEX .)
    TIMESEQUAL      reduce using rule 318 (constant -> INT_CONST_HEX .)
    DIVEQUAL        reduce using rule 318 (constant -> INT_CONST_HEX .)
    MODEQUAL        reduce using rule 318 (constant -> INT_CONST_HEX .)
    PLUSEQUAL       reduce using rule 318 (constant -> INT_CONST_HEX .)
    MINUSEQUAL      reduce using rule 318 (constant -> INT_CONST_HEX .)
    LSHIFTEQUAL     reduce using rule 318 (constant -> INT_CONST_HEX .)
    RSHIFTEQUAL     reduce using rule 318 (constant -> INT_CONST_HEX .)
    ANDEQUAL        reduce using rule 318 (constant -> INT_CONST_HEX .)
    OREQUAL         reduce using rule 318 (constant -> INT_CONST_HEX .)
    SEMI            reduce using rule 318 (constant -> INT_CONST_HEX .)
    RBRACKET        reduce using rule 318 (constant -> INT_CONST_HEX .)
    COLON           reduce using rule 318 (constant -> INT_CONST_HEX .)
    RBRACE          reduce using rule 318 (constant -> INT_CONST_HEX .)


state 169

    (319) constant -> INT_CONST_BIN .

    LBRACKET        reduce using rule 319 (constant -> INT_CONST_BIN .)
    LPAREN          reduce using rule 319 (constant -> INT_CONST_BIN .)
    PERIOD          reduce using rule 319 (constant -> INT_CONST_BIN .)
    ARROW           reduce using rule 319 (constant -> INT_CONST_BIN .)
    PLUSPLUS        reduce using rule 319 (constant -> INT_CONST_BIN .)
    MINUSMINUS      reduce using rule 319 (constant -> INT_CONST_BIN .)
    CONDOP          reduce using rule 319 (constant -> INT_CONST_BIN .)
    TIMES           reduce using rule 319 (constant -> INT_CONST_BIN .)
    DIVIDE          reduce using rule 319 (constant -> INT_CONST_BIN .)
    MOD             reduce using rule 319 (constant -> INT_CONST_BIN .)
    PLUS            reduce using rule 319 (constant -> INT_CONST_BIN .)
    MINUS           reduce using rule 319 (constant -> INT_CONST_BIN .)
    RSHIFT          reduce using rule 319 (constant -> INT_CONST_BIN .)
    LSHIFT          reduce using rule 319 (constant -> INT_CONST_BIN .)
    LT              reduce using rule 319 (constant -> INT_CONST_BIN .)
    LE              reduce using rule 319 (constant -> INT_CONST_BIN .)
    GE              reduce using rule 319 (constant -> INT_CONST_BIN .)
    GT              reduce using rule 319 (constant -> INT_CONST_BIN .)
    EQ              reduce using rule 319 (constant -> INT_CONST_BIN .)
    NE              reduce using rule 319 (constant -> INT_CONST_BIN .)
    AND             reduce using rule 319 (constant -> INT_CONST_BIN .)
    OR              reduce using rule 319 (constant -> INT_CONST_BIN .)
    XOR             reduce using rule 319 (constant -> INT_CONST_BIN .)
    LAND            reduce using rule 319 (constant -> INT_CONST_BIN .)
    LOR             reduce using rule 319 (constant -> INT_CONST_BIN .)
    COMMA           reduce using rule 319 (constant -> INT_CONST_BIN .)
    RPAREN          reduce using rule 319 (constant -> INT_CONST_BIN .)
    EQUALS          reduce using rule 319 (constant -> INT_CONST_BIN .)
    XOREQUAL        reduce using rule 319 (constant -> INT_CONST_BIN .)
    TIMESEQUAL      reduce using rule 319 (constant -> INT_CONST_BIN .)
    DIVEQUAL        reduce using rule 319 (constant -> INT_CONST_BIN .)
    MODEQUAL        reduce using rule 319 (constant -> INT_CONST_BIN .)
    PLUSEQUAL       reduce using rule 319 (constant -> INT_CONST_BIN .)
    MINUSEQUAL      reduce using rule 319 (constant -> INT_CONST_BIN .)
    LSHIFTEQUAL     reduce using rule 319 (constant -> INT_CONST_BIN .)
    RSHIFTEQUAL     reduce using rule 319 (constant -> INT_CONST_BIN .)
    ANDEQUAL        reduce using rule 319 (constant -> INT_CONST_BIN .)
    OREQUAL         reduce using rule 319 (constant -> INT_CONST_BIN .)
    SEMI            reduce using rule 319 (constant -> INT_CONST_BIN .)
    RBRACKET        reduce using rule 319 (constant -> INT_CONST_BIN .)
    COLON           reduce using rule 319 (constant -> INT_CONST_BIN .)
    RBRACE          reduce using rule 319 (constant -> INT_CONST_BIN .)


state 170

    (320) constant -> INT_CONST_CHAR .

    LBRACKET        reduce using rule 320 (constant -> INT_CONST_CHAR .)
    LPAREN          reduce using rule 320 (constant -> INT_CONST_CHAR .)
    PERIOD          reduce using rule 320 (constant -> INT_CONST_CHAR .)
    ARROW           reduce using rule 320 (constant -> INT_CONST_CHAR .)
    PLUSPLUS        reduce using rule 320 (constant -> INT_CONST_CHAR .)
    MINUSMINUS      reduce using rule 320 (constant -> INT_CONST_CHAR .)
    CONDOP          reduce using rule 320 (constant -> INT_CONST_CHAR .)
    TIMES           reduce using rule 320 (constant -> INT_CONST_CHAR .)
    DIVIDE          reduce using rule 320 (constant -> INT_CONST_CHAR .)
    MOD             reduce using rule 320 (constant -> INT_CONST_CHAR .)
    PLUS            reduce using rule 320 (constant -> INT_CONST_CHAR .)
    MINUS           reduce using rule 320 (constant -> INT_CONST_CHAR .)
    RSHIFT          reduce using rule 320 (constant -> INT_CONST_CHAR .)
    LSHIFT          reduce using rule 320 (constant -> INT_CONST_CHAR .)
    LT              reduce using rule 320 (constant -> INT_CONST_CHAR .)
    LE              reduce using rule 320 (constant -> INT_CONST_CHAR .)
    GE              reduce using rule 320 (constant -> INT_CONST_CHAR .)
    GT              reduce using rule 320 (constant -> INT_CONST_CHAR .)
    EQ              reduce using rule 320 (constant -> INT_CONST_CHAR .)
    NE              reduce using rule 320 (constant -> INT_CONST_CHAR .)
    AND             reduce using rule 320 (constant -> INT_CONST_CHAR .)
    OR              reduce using rule 320 (constant -> INT_CONST_CHAR .)
    XOR             reduce using rule 320 (constant -> INT_CONST_CHAR .)
    LAND            reduce using rule 320 (constant -> INT_CONST_CHAR .)
    LOR             reduce using rule 320 (constant -> INT_CONST_CHAR .)
    COMMA           reduce using rule 320 (constant -> INT_CONST_CHAR .)
    RPAREN          reduce using rule 320 (constant -> INT_CONST_CHAR .)
    EQUALS          reduce using rule 320 (constant -> INT_CONST_CHAR .)
    XOREQUAL        reduce using rule 320 (constant -> INT_CONST_CHAR .)
    TIMESEQUAL      reduce using rule 320 (constant -> INT_CONST_CHAR .)
    DIVEQUAL        reduce using rule 320 (constant -> INT_CONST_CHAR .)
    MODEQUAL        reduce using rule 320 (constant -> INT_CONST_CHAR .)
    PLUSEQUAL       reduce using rule 320 (constant -> INT_CONST_CHAR .)
    MINUSEQUAL      reduce using rule 320 (constant -> INT_CONST_CHAR .)
    LSHIFTEQUAL     reduce using rule 320 (constant -> INT_CONST_CHAR .)
    RSHIFTEQUAL     reduce using rule 320 (constant -> INT_CONST_CHAR .)
    ANDEQUAL        reduce using rule 320 (constant -> INT_CONST_CHAR .)
    OREQUAL         reduce using rule 320 (constant -> INT_CONST_CHAR .)
    SEMI            reduce using rule 320 (constant -> INT_CONST_CHAR .)
    RBRACKET        reduce using rule 320 (constant -> INT_CONST_CHAR .)
    COLON           reduce using rule 320 (constant -> INT_CONST_CHAR .)
    RBRACE          reduce using rule 320 (constant -> INT_CONST_CHAR .)


state 171

    (321) constant -> FLOAT_CONST .

    LBRACKET        reduce using rule 321 (constant -> FLOAT_CONST .)
    LPAREN          reduce using rule 321 (constant -> FLOAT_CONST .)
    PERIOD          reduce using rule 321 (constant -> FLOAT_CONST .)
    ARROW           reduce using rule 321 (constant -> FLOAT_CONST .)
    PLUSPLUS        reduce using rule 321 (constant -> FLOAT_CONST .)
    MINUSMINUS      reduce using rule 321 (constant -> FLOAT_CONST .)
    CONDOP          reduce using rule 321 (constant -> FLOAT_CONST .)
    TIMES           reduce using rule 321 (constant -> FLOAT_CONST .)
    DIVIDE          reduce using rule 321 (constant -> FLOAT_CONST .)
    MOD             reduce using rule 321 (constant -> FLOAT_CONST .)
    PLUS            reduce using rule 321 (constant -> FLOAT_CONST .)
    MINUS           reduce using rule 321 (constant -> FLOAT_CONST .)
    RSHIFT          reduce using rule 321 (constant -> FLOAT_CONST .)
    LSHIFT          reduce using rule 321 (constant -> FLOAT_CONST .)
    LT              reduce using rule 321 (constant -> FLOAT_CONST .)
    LE              reduce using rule 321 (constant -> FLOAT_CONST .)
    GE              reduce using rule 321 (constant -> FLOAT_CONST .)
    GT              reduce using rule 321 (constant -> FLOAT_CONST .)
    EQ              reduce using rule 321 (constant -> FLOAT_CONST .)
    NE              reduce using rule 321 (constant -> FLOAT_CONST .)
    AND             reduce using rule 321 (constant -> FLOAT_CONST .)
    OR              reduce using rule 321 (constant -> FLOAT_CONST .)
    XOR             reduce using rule 321 (constant -> FLOAT_CONST .)
    LAND            reduce using rule 321 (constant -> FLOAT_CONST .)
    LOR             reduce using rule 321 (constant -> FLOAT_CONST .)
    COMMA           reduce using rule 321 (constant -> FLOAT_CONST .)
    RPAREN          reduce using rule 321 (constant -> FLOAT_CONST .)
    EQUALS          reduce using rule 321 (constant -> FLOAT_CONST .)
    XOREQUAL        reduce using rule 321 (constant -> FLOAT_CONST .)
    TIMESEQUAL      reduce using rule 321 (constant -> FLOAT_CONST .)
    DIVEQUAL        reduce using rule 321 (constant -> FLOAT_CONST .)
    MODEQUAL        reduce using rule 321 (constant -> FLOAT_CONST .)
    PLUSEQUAL       reduce using rule 321 (constant -> FLOAT_CONST .)
    MINUSEQUAL      reduce using rule 321 (constant -> FLOAT_CONST .)
    LSHIFTEQUAL     reduce using rule 321 (constant -> FLOAT_CONST .)
    RSHIFTEQUAL     reduce using rule 321 (constant -> FLOAT_CONST .)
    ANDEQUAL        reduce using rule 321 (constant -> FLOAT_CONST .)
    OREQUAL         reduce using rule 321 (constant -> FLOAT_CONST .)
    SEMI            reduce using rule 321 (constant -> FLOAT_CONST .)
    RBRACKET        reduce using rule 321 (constant -> FLOAT_CONST .)
    COLON           reduce using rule 321 (constant -> FLOAT_CONST .)
    RBRACE          reduce using rule 321 (constant -> FLOAT_CONST .)


state 172

    (322) constant -> HEX_FLOAT_CONST .

    LBRACKET        reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    LPAREN          reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    PERIOD          reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    ARROW           reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    PLUSPLUS        reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    MINUSMINUS      reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    CONDOP          reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    TIMES           reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    DIVIDE          reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    MOD             reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    PLUS            reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    MINUS           reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    RSHIFT          reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    LSHIFT          reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    LT              reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    LE              reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    GE              reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    GT              reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    EQ              reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    NE              reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    AND             reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    OR              reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    XOR             reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    LAND            reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    LOR             reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    COMMA           reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    RPAREN          reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    EQUALS          reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    XOREQUAL        reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    TIMESEQUAL      reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    DIVEQUAL        reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    MODEQUAL        reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    PLUSEQUAL       reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    MINUSEQUAL      reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    LSHIFTEQUAL     reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    RSHIFTEQUAL     reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    ANDEQUAL        reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    OREQUAL         reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    SEMI            reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    RBRACKET        reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    COLON           reduce using rule 322 (constant -> HEX_FLOAT_CONST .)
    RBRACE          reduce using rule 322 (constant -> HEX_FLOAT_CONST .)


state 173

    (323) constant -> CHAR_CONST .

    LBRACKET        reduce using rule 323 (constant -> CHAR_CONST .)
    LPAREN          reduce using rule 323 (constant -> CHAR_CONST .)
    PERIOD          reduce using rule 323 (constant -> CHAR_CONST .)
    ARROW           reduce using rule 323 (constant -> CHAR_CONST .)
    PLUSPLUS        reduce using rule 323 (constant -> CHAR_CONST .)
    MINUSMINUS      reduce using rule 323 (constant -> CHAR_CONST .)
    CONDOP          reduce using rule 323 (constant -> CHAR_CONST .)
    TIMES           reduce using rule 323 (constant -> CHAR_CONST .)
    DIVIDE          reduce using rule 323 (constant -> CHAR_CONST .)
    MOD             reduce using rule 323 (constant -> CHAR_CONST .)
    PLUS            reduce using rule 323 (constant -> CHAR_CONST .)
    MINUS           reduce using rule 323 (constant -> CHAR_CONST .)
    RSHIFT          reduce using rule 323 (constant -> CHAR_CONST .)
    LSHIFT          reduce using rule 323 (constant -> CHAR_CONST .)
    LT              reduce using rule 323 (constant -> CHAR_CONST .)
    LE              reduce using rule 323 (constant -> CHAR_CONST .)
    GE              reduce using rule 323 (constant -> CHAR_CONST .)
    GT              reduce using rule 323 (constant -> CHAR_CONST .)
    EQ              reduce using rule 323 (constant -> CHAR_CONST .)
    NE              reduce using rule 323 (constant -> CHAR_CONST .)
    AND             reduce using rule 323 (constant -> CHAR_CONST .)
    OR              reduce using rule 323 (constant -> CHAR_CONST .)
    XOR             reduce using rule 323 (constant -> CHAR_CONST .)
    LAND            reduce using rule 323 (constant -> CHAR_CONST .)
    LOR             reduce using rule 323 (constant -> CHAR_CONST .)
    COMMA           reduce using rule 323 (constant -> CHAR_CONST .)
    RPAREN          reduce using rule 323 (constant -> CHAR_CONST .)
    EQUALS          reduce using rule 323 (constant -> CHAR_CONST .)
    XOREQUAL        reduce using rule 323 (constant -> CHAR_CONST .)
    TIMESEQUAL      reduce using rule 323 (constant -> CHAR_CONST .)
    DIVEQUAL        reduce using rule 323 (constant -> CHAR_CONST .)
    MODEQUAL        reduce using rule 323 (constant -> CHAR_CONST .)
    PLUSEQUAL       reduce using rule 323 (constant -> CHAR_CONST .)
    MINUSEQUAL      reduce using rule 323 (constant -> CHAR_CONST .)
    LSHIFTEQUAL     reduce using rule 323 (constant -> CHAR_CONST .)
    RSHIFTEQUAL     reduce using rule 323 (constant -> CHAR_CONST .)
    ANDEQUAL        reduce using rule 323 (constant -> CHAR_CONST .)
    OREQUAL         reduce using rule 323 (constant -> CHAR_CONST .)
    SEMI            reduce using rule 323 (constant -> CHAR_CONST .)
    RBRACKET        reduce using rule 323 (constant -> CHAR_CONST .)
    COLON           reduce using rule 323 (constant -> CHAR_CONST .)
    RBRACE          reduce using rule 323 (constant -> CHAR_CONST .)


state 174

    (324) constant -> WCHAR_CONST .

    LBRACKET        reduce using rule 324 (constant -> WCHAR_CONST .)
    LPAREN          reduce using rule 324 (constant -> WCHAR_CONST .)
    PERIOD          reduce using rule 324 (constant -> WCHAR_CONST .)
    ARROW           reduce using rule 324 (constant -> WCHAR_CONST .)
    PLUSPLUS        reduce using rule 324 (constant -> WCHAR_CONST .)
    MINUSMINUS      reduce using rule 324 (constant -> WCHAR_CONST .)
    CONDOP          reduce using rule 324 (constant -> WCHAR_CONST .)
    TIMES           reduce using rule 324 (constant -> WCHAR_CONST .)
    DIVIDE          reduce using rule 324 (constant -> WCHAR_CONST .)
    MOD             reduce using rule 324 (constant -> WCHAR_CONST .)
    PLUS            reduce using rule 324 (constant -> WCHAR_CONST .)
    MINUS           reduce using rule 324 (constant -> WCHAR_CONST .)
    RSHIFT          reduce using rule 324 (constant -> WCHAR_CONST .)
    LSHIFT          reduce using rule 324 (constant -> WCHAR_CONST .)
    LT              reduce using rule 324 (constant -> WCHAR_CONST .)
    LE              reduce using rule 324 (constant -> WCHAR_CONST .)
    GE              reduce using rule 324 (constant -> WCHAR_CONST .)
    GT              reduce using rule 324 (constant -> WCHAR_CONST .)
    EQ              reduce using rule 324 (constant -> WCHAR_CONST .)
    NE              reduce using rule 324 (constant -> WCHAR_CONST .)
    AND             reduce using rule 324 (constant -> WCHAR_CONST .)
    OR              reduce using rule 324 (constant -> WCHAR_CONST .)
    XOR             reduce using rule 324 (constant -> WCHAR_CONST .)
    LAND            reduce using rule 324 (constant -> WCHAR_CONST .)
    LOR             reduce using rule 324 (constant -> WCHAR_CONST .)
    COMMA           reduce using rule 324 (constant -> WCHAR_CONST .)
    RPAREN          reduce using rule 324 (constant -> WCHAR_CONST .)
    EQUALS          reduce using rule 324 (constant -> WCHAR_CONST .)
    XOREQUAL        reduce using rule 324 (constant -> WCHAR_CONST .)
    TIMESEQUAL      reduce using rule 324 (constant -> WCHAR_CONST .)
    DIVEQUAL        reduce using rule 324 (constant -> WCHAR_CONST .)
    MODEQUAL        reduce using rule 324 (constant -> WCHAR_CONST .)
    PLUSEQUAL       reduce using rule 324 (constant -> WCHAR_CONST .)
    MINUSEQUAL      reduce using rule 324 (constant -> WCHAR_CONST .)
    LSHIFTEQUAL     reduce using rule 324 (constant -> WCHAR_CONST .)
    RSHIFTEQUAL     reduce using rule 324 (constant -> WCHAR_CONST .)
    ANDEQUAL        reduce using rule 324 (constant -> WCHAR_CONST .)
    OREQUAL         reduce using rule 324 (constant -> WCHAR_CONST .)
    SEMI            reduce using rule 324 (constant -> WCHAR_CONST .)
    RBRACKET        reduce using rule 324 (constant -> WCHAR_CONST .)
    COLON           reduce using rule 324 (constant -> WCHAR_CONST .)
    RBRACE          reduce using rule 324 (constant -> WCHAR_CONST .)


state 175

    (325) constant -> U8CHAR_CONST .

    LBRACKET        reduce using rule 325 (constant -> U8CHAR_CONST .)
    LPAREN          reduce using rule 325 (constant -> U8CHAR_CONST .)
    PERIOD          reduce using rule 325 (constant -> U8CHAR_CONST .)
    ARROW           reduce using rule 325 (constant -> U8CHAR_CONST .)
    PLUSPLUS        reduce using rule 325 (constant -> U8CHAR_CONST .)
    MINUSMINUS      reduce using rule 325 (constant -> U8CHAR_CONST .)
    CONDOP          reduce using rule 325 (constant -> U8CHAR_CONST .)
    TIMES           reduce using rule 325 (constant -> U8CHAR_CONST .)
    DIVIDE          reduce using rule 325 (constant -> U8CHAR_CONST .)
    MOD             reduce using rule 325 (constant -> U8CHAR_CONST .)
    PLUS            reduce using rule 325 (constant -> U8CHAR_CONST .)
    MINUS           reduce using rule 325 (constant -> U8CHAR_CONST .)
    RSHIFT          reduce using rule 325 (constant -> U8CHAR_CONST .)
    LSHIFT          reduce using rule 325 (constant -> U8CHAR_CONST .)
    LT              reduce using rule 325 (constant -> U8CHAR_CONST .)
    LE              reduce using rule 325 (constant -> U8CHAR_CONST .)
    GE              reduce using rule 325 (constant -> U8CHAR_CONST .)
    GT              reduce using rule 325 (constant -> U8CHAR_CONST .)
    EQ              reduce using rule 325 (constant -> U8CHAR_CONST .)
    NE              reduce using rule 325 (constant -> U8CHAR_CONST .)
    AND             reduce using rule 325 (constant -> U8CHAR_CONST .)
    OR              reduce using rule 325 (constant -> U8CHAR_CONST .)
    XOR             reduce using rule 325 (constant -> U8CHAR_CONST .)
    LAND            reduce using rule 325 (constant -> U8CHAR_CONST .)
    LOR             reduce using rule 325 (constant -> U8CHAR_CONST .)
    COMMA           reduce using rule 325 (constant -> U8CHAR_CONST .)
    RPAREN          reduce using rule 325 (constant -> U8CHAR_CONST .)
    EQUALS          reduce using rule 325 (constant -> U8CHAR_CONST .)
    XOREQUAL        reduce using rule 325 (constant -> U8CHAR_CONST .)
    TIMESEQUAL      reduce using rule 325 (constant -> U8CHAR_CONST .)
    DIVEQUAL        reduce using rule 325 (constant -> U8CHAR_CONST .)
    MODEQUAL        reduce using rule 325 (constant -> U8CHAR_CONST .)
    PLUSEQUAL       reduce using rule 325 (constant -> U8CHAR_CONST .)
    MINUSEQUAL      reduce using rule 325 (constant -> U8CHAR_CONST .)
    LSHIFTEQUAL     reduce using rule 325 (constant -> U8CHAR_CONST .)
    RSHIFTEQUAL     reduce using rule 325 (constant -> U8CHAR_CONST .)
    ANDEQUAL        reduce using rule 325 (constant -> U8CHAR_CONST .)
    OREQUAL         reduce using rule 325 (constant -> U8CHAR_CONST .)
    SEMI            reduce using rule 325 (constant -> U8CHAR_CONST .)
    RBRACKET        reduce using rule 325 (constant -> U8CHAR_CONST .)
    COLON           reduce using rule 325 (constant -> U8CHAR_CONST .)
    RBRACE          reduce using rule 325 (constant -> U8CHAR_CONST .)


state 176

    (326) constant -> U16CHAR_CONST .

    LBRACKET        reduce using rule 326 (constant -> U16CHAR_CONST .)
    LPAREN          reduce using rule 326 (constant -> U16CHAR_CONST .)
    PERIOD          reduce using rule 326 (constant -> U16CHAR_CONST .)
    ARROW           reduce using rule 326 (constant -> U16CHAR_CONST .)
    PLUSPLUS        reduce using rule 326 (constant -> U16CHAR_CONST .)
    MINUSMINUS      reduce using rule 326 (constant -> U16CHAR_CONST .)
    CONDOP          reduce using rule 326 (constant -> U16CHAR_CONST .)
    TIMES           reduce using rule 326 (constant -> U16CHAR_CONST .)
    DIVIDE          reduce using rule 326 (constant -> U16CHAR_CONST .)
    MOD             reduce using rule 326 (constant -> U16CHAR_CONST .)
    PLUS            reduce using rule 326 (constant -> U16CHAR_CONST .)
    MINUS           reduce using rule 326 (constant -> U16CHAR_CONST .)
    RSHIFT          reduce using rule 326 (constant -> U16CHAR_CONST .)
    LSHIFT          reduce using rule 326 (constant -> U16CHAR_CONST .)
    LT              reduce using rule 326 (constant -> U16CHAR_CONST .)
    LE              reduce using rule 326 (constant -> U16CHAR_CONST .)
    GE              reduce using rule 326 (constant -> U16CHAR_CONST .)
    GT              reduce using rule 326 (constant -> U16CHAR_CONST .)
    EQ              reduce using rule 326 (constant -> U16CHAR_CONST .)
    NE              reduce using rule 326 (constant -> U16CHAR_CONST .)
    AND             reduce using rule 326 (constant -> U16CHAR_CONST .)
    OR              reduce using rule 326 (constant -> U16CHAR_CONST .)
    XOR             reduce using rule 326 (constant -> U16CHAR_CONST .)
    LAND            reduce using rule 326 (constant -> U16CHAR_CONST .)
    LOR             reduce using rule 326 (constant -> U16CHAR_CONST .)
    COMMA           reduce using rule 326 (constant -> U16CHAR_CONST .)
    RPAREN          reduce using rule 326 (constant -> U16CHAR_CONST .)
    EQUALS          reduce using rule 326 (constant -> U16CHAR_CONST .)
    XOREQUAL        reduce using rule 326 (constant -> U16CHAR_CONST .)
    TIMESEQUAL      reduce using rule 326 (constant -> U16CHAR_CONST .)
    DIVEQUAL        reduce using rule 326 (constant -> U16CHAR_CONST .)
    MODEQUAL        reduce using rule 326 (constant -> U16CHAR_CONST .)
    PLUSEQUAL       reduce using rule 326 (constant -> U16CHAR_CONST .)
    MINUSEQUAL      reduce using rule 326 (constant -> U16CHAR_CONST .)
    LSHIFTEQUAL     reduce using rule 326 (constant -> U16CHAR_CONST .)
    RSHIFTEQUAL     reduce using rule 326 (constant -> U16CHAR_CONST .)
    ANDEQUAL        reduce using rule 326 (constant -> U16CHAR_CONST .)
    OREQUAL         reduce using rule 326 (constant -> U16CHAR_CONST .)
    SEMI            reduce using rule 326 (constant -> U16CHAR_CONST .)
    RBRACKET        reduce using rule 326 (constant -> U16CHAR_CONST .)
    COLON           reduce using rule 326 (constant -> U16CHAR_CONST .)
    RBRACE          reduce using rule 326 (constant -> U16CHAR_CONST .)


state 177

    (327) constant -> U32CHAR_CONST .

    LBRACKET        reduce using rule 327 (constant -> U32CHAR_CONST .)
    LPAREN          reduce using rule 327 (constant -> U32CHAR_CONST .)
    PERIOD          reduce using rule 327 (constant -> U32CHAR_CONST .)
    ARROW           reduce using rule 327 (constant -> U32CHAR_CONST .)
    PLUSPLUS        reduce using rule 327 (constant -> U32CHAR_CONST .)
    MINUSMINUS      reduce using rule 327 (constant -> U32CHAR_CONST .)
    CONDOP          reduce using rule 327 (constant -> U32CHAR_CONST .)
    TIMES           reduce using rule 327 (constant -> U32CHAR_CONST .)
    DIVIDE          reduce using rule 327 (constant -> U32CHAR_CONST .)
    MOD             reduce using rule 327 (constant -> U32CHAR_CONST .)
    PLUS            reduce using rule 327 (constant -> U32CHAR_CONST .)
    MINUS           reduce using rule 327 (constant -> U32CHAR_CONST .)
    RSHIFT          reduce using rule 327 (constant -> U32CHAR_CONST .)
    LSHIFT          reduce using rule 327 (constant -> U32CHAR_CONST .)
    LT              reduce using rule 327 (constant -> U32CHAR_CONST .)
    LE              reduce using rule 327 (constant -> U32CHAR_CONST .)
    GE              reduce using rule 327 (constant -> U32CHAR_CONST .)
    GT              reduce using rule 327 (constant -> U32CHAR_CONST .)
    EQ              reduce using rule 327 (constant -> U32CHAR_CONST .)
    NE              reduce using rule 327 (constant -> U32CHAR_CONST .)
    AND             reduce using rule 327 (constant -> U32CHAR_CONST .)
    OR              reduce using rule 327 (constant -> U32CHAR_CONST .)
    XOR             reduce using rule 327 (constant -> U32CHAR_CONST .)
    LAND            reduce using rule 327 (constant -> U32CHAR_CONST .)
    LOR             reduce using rule 327 (constant -> U32CHAR_CONST .)
    COMMA           reduce using rule 327 (constant -> U32CHAR_CONST .)
    RPAREN          reduce using rule 327 (constant -> U32CHAR_CONST .)
    EQUALS          reduce using rule 327 (constant -> U32CHAR_CONST .)
    XOREQUAL        reduce using rule 327 (constant -> U32CHAR_CONST .)
    TIMESEQUAL      reduce using rule 327 (constant -> U32CHAR_CONST .)
    DIVEQUAL        reduce using rule 327 (constant -> U32CHAR_CONST .)
    MODEQUAL        reduce using rule 327 (constant -> U32CHAR_CONST .)
    PLUSEQUAL       reduce using rule 327 (constant -> U32CHAR_CONST .)
    MINUSEQUAL      reduce using rule 327 (constant -> U32CHAR_CONST .)
    LSHIFTEQUAL     reduce using rule 327 (constant -> U32CHAR_CONST .)
    RSHIFTEQUAL     reduce using rule 327 (constant -> U32CHAR_CONST .)
    ANDEQUAL        reduce using rule 327 (constant -> U32CHAR_CONST .)
    OREQUAL         reduce using rule 327 (constant -> U32CHAR_CONST .)
    SEMI            reduce using rule 327 (constant -> U32CHAR_CONST .)
    RBRACKET        reduce using rule 327 (constant -> U32CHAR_CONST .)
    COLON           reduce using rule 327 (constant -> U32CHAR_CONST .)
    RBRACE          reduce using rule 327 (constant -> U32CHAR_CONST .)


state 178

    (330) unified_wstring_literal -> WSTRING_LITERAL .

    WSTRING_LITERAL reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    U8STRING_LITERAL reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    U16STRING_LITERAL reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    U32STRING_LITERAL reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    LBRACKET        reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    LPAREN          reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    PERIOD          reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    ARROW           reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    PLUSPLUS        reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    MINUSMINUS      reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    CONDOP          reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    TIMES           reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    DIVIDE          reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    MOD             reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    PLUS            reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    MINUS           reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    RSHIFT          reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    LSHIFT          reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    LT              reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    LE              reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    GE              reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    GT              reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    EQ              reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    NE              reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    AND             reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    OR              reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    XOR             reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    LAND            reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    LOR             reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    COMMA           reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    RPAREN          reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    EQUALS          reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    XOREQUAL        reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    TIMESEQUAL      reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    DIVEQUAL        reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    MODEQUAL        reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    PLUSEQUAL       reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    MINUSEQUAL      reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    ANDEQUAL        reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    OREQUAL         reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    SEMI            reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    RBRACKET        reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    COLON           reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)
    RBRACE          reduce using rule 330 (unified_wstring_literal -> WSTRING_LITERAL .)


state 179

    (331) unified_wstring_literal -> U8STRING_LITERAL .

    WSTRING_LITERAL reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    U8STRING_LITERAL reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    U16STRING_LITERAL reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    U32STRING_LITERAL reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    LBRACKET        reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    LPAREN          reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    PERIOD          reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    ARROW           reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    PLUSPLUS        reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    MINUSMINUS      reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    CONDOP          reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    TIMES           reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    DIVIDE          reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    MOD             reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    PLUS            reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    MINUS           reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    RSHIFT          reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    LSHIFT          reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    LT              reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    LE              reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    GE              reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    GT              reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    EQ              reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    NE              reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    AND             reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    OR              reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    XOR             reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    LAND            reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    LOR             reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    COMMA           reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    RPAREN          reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    EQUALS          reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    XOREQUAL        reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    TIMESEQUAL      reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    DIVEQUAL        reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    MODEQUAL        reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    ANDEQUAL        reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    OREQUAL         reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    SEMI            reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    RBRACKET        reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    COLON           reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)
    RBRACE          reduce using rule 331 (unified_wstring_literal -> U8STRING_LITERAL .)


state 180

    (332) unified_wstring_literal -> U16STRING_LITERAL .

    WSTRING_LITERAL reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    U8STRING_LITERAL reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    U16STRING_LITERAL reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    U32STRING_LITERAL reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    LBRACKET        reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    LPAREN          reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    PERIOD          reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    ARROW           reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    PLUSPLUS        reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    MINUSMINUS      reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    CONDOP          reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    TIMES           reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    DIVIDE          reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    MOD             reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    PLUS            reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    MINUS           reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    RSHIFT          reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    LSHIFT          reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    LT              reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    LE              reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    GE              reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    GT              reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    EQ              reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    NE              reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    AND             reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    OR              reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    XOR             reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    LAND            reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    LOR             reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    COMMA           reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    RPAREN          reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    EQUALS          reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    XOREQUAL        reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    TIMESEQUAL      reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    DIVEQUAL        reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    MODEQUAL        reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    ANDEQUAL        reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    OREQUAL         reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    SEMI            reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    RBRACKET        reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    COLON           reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)
    RBRACE          reduce using rule 332 (unified_wstring_literal -> U16STRING_LITERAL .)


state 181

    (333) unified_wstring_literal -> U32STRING_LITERAL .

    WSTRING_LITERAL reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    U8STRING_LITERAL reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    U16STRING_LITERAL reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    U32STRING_LITERAL reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    LBRACKET        reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    LPAREN          reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    PERIOD          reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    ARROW           reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    PLUSPLUS        reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    MINUSMINUS      reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    CONDOP          reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    TIMES           reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    DIVIDE          reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    MOD             reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    PLUS            reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    MINUS           reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    RSHIFT          reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    LSHIFT          reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    LT              reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    LE              reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    GE              reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    GT              reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    EQ              reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    NE              reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    AND             reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    OR              reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    XOR             reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    LAND            reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    LOR             reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    COMMA           reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    RPAREN          reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    EQUALS          reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    XOREQUAL        reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    TIMESEQUAL      reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    DIVEQUAL        reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    MODEQUAL        reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    ANDEQUAL        reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    OREQUAL         reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    SEMI            reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    RBRACKET        reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    COLON           reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)
    RBRACE          reduce using rule 333 (unified_wstring_literal -> U32STRING_LITERAL .)


state 182

    (31) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt . assignment_expression_opt RBRACKET
    (34) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt . TIMES RBRACKET
    (3) assignment_expression_opt -> . empty
    (4) assignment_expression_opt -> . assignment_expression
    (340) empty -> .
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    TIMES           shift and go to state 306
    RBRACKET        reduce using rule 340 (empty -> .)
    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    assignment_expression_opt      shift and go to state 305
    empty                          shift and go to state 307
    assignment_expression          shift and go to state 308
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 183

    (32) direct_id_declarator -> direct_id_declarator LBRACKET STATIC . type_qualifier_list_opt assignment_expression RBRACKET
    (27) type_qualifier_list_opt -> . empty
    (28) type_qualifier_list_opt -> . type_qualifier_list
    (340) empty -> .
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC

    LPAREN          reduce using rule 340 (empty -> .)
    PLUSPLUS        reduce using rule 340 (empty -> .)
    MINUSMINUS      reduce using rule 340 (empty -> .)
    SIZEOF          reduce using rule 340 (empty -> .)
    _ALIGNOF        reduce using rule 340 (empty -> .)
    AND             reduce using rule 340 (empty -> .)
    TIMES           reduce using rule 340 (empty -> .)
    PLUS            reduce using rule 340 (empty -> .)
    MINUS           reduce using rule 340 (empty -> .)
    NOT             reduce using rule 340 (empty -> .)
    LNOT            reduce using rule 340 (empty -> .)
    OFFSETOF        reduce using rule 340 (empty -> .)
    ID              reduce using rule 340 (empty -> .)
    INT_CONST_DEC   reduce using rule 340 (empty -> .)
    INT_CONST_OCT   reduce using rule 340 (empty -> .)
    INT_CONST_HEX   reduce using rule 340 (empty -> .)
    INT_CONST_BIN   reduce using rule 340 (empty -> .)
    INT_CONST_CHAR  reduce using rule 340 (empty -> .)
    FLOAT_CONST     reduce using rule 340 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 340 (empty -> .)
    CHAR_CONST      reduce using rule 340 (empty -> .)
    WCHAR_CONST     reduce using rule 340 (empty -> .)
    U8CHAR_CONST    reduce using rule 340 (empty -> .)
    U16CHAR_CONST   reduce using rule 340 (empty -> .)
    U32CHAR_CONST   reduce using rule 340 (empty -> .)
    STRING_LITERAL  reduce using rule 340 (empty -> .)
    WSTRING_LITERAL reduce using rule 340 (empty -> .)
    U8STRING_LITERAL reduce using rule 340 (empty -> .)
    U16STRING_LITERAL reduce using rule 340 (empty -> .)
    U32STRING_LITERAL reduce using rule 340 (empty -> .)
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 81

    type_qualifier_list_opt        shift and go to state 309
    empty                          shift and go to state 114
    type_qualifier_list            shift and go to state 115
    type_qualifier                 shift and go to state 116

state 184

    (33) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list . STATIC assignment_expression RBRACKET
    (28) type_qualifier_list_opt -> type_qualifier_list .
    (186) type_qualifier_list -> type_qualifier_list . type_qualifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC

    STATIC          shift and go to state 310
    TIMES           reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    LPAREN          reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUSPLUS        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUSMINUS      reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    SIZEOF          reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    _ALIGNOF        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    AND             reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUS            reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUS           reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    NOT             reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    LNOT            reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    OFFSETOF        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    ID              reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_DEC   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_OCT   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_HEX   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_BIN   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_CHAR  reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    FLOAT_CONST     reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    HEX_FLOAT_CONST reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    CHAR_CONST      reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    WCHAR_CONST     reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    U8CHAR_CONST    reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    U16CHAR_CONST   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    U32CHAR_CONST   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    STRING_LITERAL  reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    WSTRING_LITERAL reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    U8STRING_LITERAL reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    U16STRING_LITERAL reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    U32STRING_LITERAL reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    RBRACKET        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 81

    type_qualifier                 shift and go to state 197

state 185

    (35) direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 311


state 186

    (36) direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt . RPAREN

    RPAREN          shift and go to state 312


state 187

    (187) parameter_type_list -> parameter_list .
    (188) parameter_type_list -> parameter_list . COMMA ELLIPSIS
    (190) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          reduce using rule 187 (parameter_type_list -> parameter_list .)
    COMMA           shift and go to state 313


state 188

    (17) identifier_list_opt -> empty .

    RPAREN          reduce using rule 17 (identifier_list_opt -> empty .)


state 189

    (18) identifier_list_opt -> identifier_list .
    (195) identifier_list -> identifier_list . COMMA identifier

    RPAREN          reduce using rule 18 (identifier_list_opt -> identifier_list .)
    COMMA           shift and go to state 314


state 190

    (189) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 189 (parameter_list -> parameter_declaration .)
    RPAREN          reduce using rule 189 (parameter_list -> parameter_declaration .)


state 191

    (194) identifier_list -> identifier .

    COMMA           reduce using rule 194 (identifier_list -> identifier .)
    RPAREN          reduce using rule 194 (identifier_list -> identifier .)


state 192

    (191) parameter_declaration -> declaration_specifiers . id_declarator
    (192) parameter_declaration -> declaration_specifiers . typeid_noparen_declarator
    (193) parameter_declaration -> declaration_specifiers . abstract_declarator_opt
    (98) declaration_specifiers -> declaration_specifiers . type_qualifier
    (99) declaration_specifiers -> declaration_specifiers . storage_class_specifier
    (100) declaration_specifiers -> declaration_specifiers . function_specifier
    (101) declaration_specifiers -> declaration_specifiers . type_specifier_no_typeid
    (104) declaration_specifiers -> declaration_specifiers . alignment_specifier
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (56) typeid_noparen_declarator -> . direct_typeid_noparen_declarator
    (57) typeid_noparen_declarator -> . pointer direct_typeid_noparen_declarator
    (1) abstract_declarator_opt -> . empty
    (2) abstract_declarator_opt -> . abstract_declarator
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) storage_class_specifier -> . STATIC
    (108) storage_class_specifier -> . EXTERN
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . _THREAD_LOCAL
    (111) function_specifier -> . INLINE
    (112) function_specifier -> . _NORETURN
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (183) pointer -> . TIMES type_qualifier_list_opt
    (184) pointer -> . TIMES type_qualifier_list_opt pointer
    (45) direct_typeid_noparen_declarator -> . TYPEID
    (46) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (47) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (48) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (49) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (50) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LPAREN parameter_type_list RPAREN
    (51) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LPAREN identifier_list_opt RPAREN
    (340) empty -> .
    (207) abstract_declarator -> . pointer
    (208) abstract_declarator -> . pointer direct_abstract_declarator
    (209) abstract_declarator -> . direct_abstract_declarator
    (210) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (211) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (212) direct_abstract_declarator -> . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (213) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (214) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (215) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (216) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 81
    AUTO            shift and go to state 54
    REGISTER        shift and go to state 55
    STATIC          shift and go to state 29
    EXTERN          shift and go to state 56
    TYPEDEF         shift and go to state 57
    _THREAD_LOCAL   shift and go to state 58
    INLINE          shift and go to state 59
    _NORETURN       shift and go to state 60
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ALIGNAS        shift and go to state 61
    ID              shift and go to state 28
    LPAREN          shift and go to state 322
    TIMES           shift and go to state 30
    TYPEID          shift and go to state 324
    COMMA           reduce using rule 340 (empty -> .)
    RPAREN          reduce using rule 340 (empty -> .)
    LBRACKET        shift and go to state 323

    id_declarator                  shift and go to state 315
    typeid_noparen_declarator      shift and go to state 316
    abstract_declarator_opt        shift and go to state 317
    type_qualifier                 shift and go to state 74
    storage_class_specifier        shift and go to state 75
    function_specifier             shift and go to state 76
    type_specifier_no_typeid       shift and go to state 77
    alignment_specifier            shift and go to state 78
    direct_id_declarator           shift and go to state 19
    pointer                        shift and go to state 318
    direct_typeid_noparen_declarator shift and go to state 319
    empty                          shift and go to state 320
    abstract_declarator            shift and go to state 321
    direct_abstract_declarator     shift and go to state 325

state 193

    (103) declaration_specifiers -> declaration_specifiers_no_type . type_specifier
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION

    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ATOMIC         shift and go to state 109
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63

    type_specifier                 shift and go to state 104
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    type_specifier_no_typeid       shift and go to state 24
    atomic_specifier               shift and go to state 106
    struct_or_union                shift and go to state 37

state 194

    (140) id_init_declarator_list -> id_init_declarator_list COMMA . init_declarator
    (137) init_declarator -> . declarator
    (138) init_declarator -> . declarator EQUALS initializer
    (181) declarator -> . id_declarator
    (182) declarator -> . typeid_declarator
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (54) typeid_declarator -> . direct_typeid_declarator
    (55) typeid_declarator -> . pointer direct_typeid_declarator
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (183) pointer -> . TIMES type_qualifier_list_opt
    (184) pointer -> . TIMES type_qualifier_list_opt pointer
    (37) direct_typeid_declarator -> . TYPEID
    (38) direct_typeid_declarator -> . LPAREN typeid_declarator RPAREN
    (39) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (40) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (41) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (42) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (43) direct_typeid_declarator -> . direct_typeid_declarator LPAREN parameter_type_list RPAREN
    (44) direct_typeid_declarator -> . direct_typeid_declarator LPAREN identifier_list_opt RPAREN

    ID              shift and go to state 28
    LPAREN          shift and go to state 82
    TIMES           shift and go to state 30
    TYPEID          shift and go to state 89

    init_declarator                shift and go to state 326
    declarator                     shift and go to state 86
    id_declarator                  shift and go to state 130
    typeid_declarator              shift and go to state 87
    direct_id_declarator           shift and go to state 19
    pointer                        shift and go to state 80
    direct_typeid_declarator       shift and go to state 88

state 195

    (142) id_init_declarator -> id_declarator EQUALS . initializer
    (196) initializer -> . assignment_expression
    (197) initializer -> . brace_open initializer_list_opt brace_close
    (198) initializer -> . brace_open initializer_list COMMA brace_close
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (338) brace_open -> . LBRACE
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 238
    LBRACE          shift and go to state 121
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    initializer                    shift and go to state 327
    assignment_expression          shift and go to state 255
    brace_open                     shift and go to state 256
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 196

    (184) pointer -> TIMES type_qualifier_list_opt pointer .

    ID              reduce using rule 184 (pointer -> TIMES type_qualifier_list_opt pointer .)
    LPAREN          reduce using rule 184 (pointer -> TIMES type_qualifier_list_opt pointer .)
    TYPEID          reduce using rule 184 (pointer -> TIMES type_qualifier_list_opt pointer .)
    LBRACKET        reduce using rule 184 (pointer -> TIMES type_qualifier_list_opt pointer .)
    COMMA           reduce using rule 184 (pointer -> TIMES type_qualifier_list_opt pointer .)
    RPAREN          reduce using rule 184 (pointer -> TIMES type_qualifier_list_opt pointer .)


state 197

    (186) type_qualifier_list -> type_qualifier_list type_qualifier .

    CONST           reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RESTRICT        reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    _ATOMIC         reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    TIMES           reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ID              reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LPAREN          reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    TYPEID          reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LBRACKET        reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    COMMA           reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RPAREN          reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STATIC          reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    PLUSPLUS        reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    MINUSMINUS      reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    SIZEOF          reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    _ALIGNOF        reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    AND             reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    PLUS            reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    MINUS           reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    NOT             reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LNOT            reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    OFFSETOF        reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INT_CONST_DEC   reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INT_CONST_OCT   reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INT_CONST_HEX   reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INT_CONST_BIN   reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INT_CONST_CHAR  reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    FLOAT_CONST     reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    HEX_FLOAT_CONST reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CHAR_CONST      reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    WCHAR_CONST     reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    U8CHAR_CONST    reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    U16CHAR_CONST   reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    U32CHAR_CONST   reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STRING_LITERAL  reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    WSTRING_LITERAL reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    U8STRING_LITERAL reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    U16STRING_LITERAL reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    U32STRING_LITERAL reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RBRACKET        reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ENUM            reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOID            reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    _BOOL           reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CHAR            reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    SHORT           reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INT             reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LONG            reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    FLOAT           reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    DOUBLE          reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    _COMPLEX        reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    SIGNED          reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    UNSIGNED        reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    __INT128        reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STRUCT          reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    UNION           reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 198

    (172) enum_specifier -> ENUM ID brace_open . enumerator_list brace_close
    (174) enumerator_list -> . enumerator
    (175) enumerator_list -> . enumerator_list COMMA
    (176) enumerator_list -> . enumerator_list COMMA enumerator
    (179) enumerator -> . ID
    (180) enumerator -> . ID EQUALS constant_expression

    ID              shift and go to state 202

    enumerator_list                shift and go to state 328
    enumerator                     shift and go to state 201

state 199

    (173) enum_specifier -> ENUM TYPEID brace_open . enumerator_list brace_close
    (174) enumerator_list -> . enumerator
    (175) enumerator_list -> . enumerator_list COMMA
    (176) enumerator_list -> . enumerator_list COMMA enumerator
    (179) enumerator -> . ID
    (180) enumerator -> . ID EQUALS constant_expression

    ID              shift and go to state 202

    enumerator_list                shift and go to state 329
    enumerator                     shift and go to state 201

state 200

    (171) enum_specifier -> ENUM brace_open enumerator_list . brace_close
    (175) enumerator_list -> enumerator_list . COMMA
    (176) enumerator_list -> enumerator_list . COMMA enumerator
    (339) brace_close -> . RBRACE

    COMMA           shift and go to state 331
    RBRACE          shift and go to state 208

    brace_close                    shift and go to state 330

state 201

    (174) enumerator_list -> enumerator .

    COMMA           reduce using rule 174 (enumerator_list -> enumerator .)
    RBRACE          reduce using rule 174 (enumerator_list -> enumerator .)


state 202

    (179) enumerator -> ID .
    (180) enumerator -> ID . EQUALS constant_expression

    COMMA           reduce using rule 179 (enumerator -> ID .)
    RBRACE          reduce using rule 179 (enumerator -> ID .)
    EQUALS          shift and go to state 332


state 203

    (153) struct_or_union_specifier -> struct_or_union ID brace_open . struct_declaration_list brace_close
    (154) struct_or_union_specifier -> struct_or_union ID brace_open . brace_close
    (159) struct_declaration_list -> . struct_declaration
    (160) struct_declaration_list -> . struct_declaration_list struct_declaration
    (339) brace_close -> . RBRACE
    (161) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt SEMI
    (162) struct_declaration -> . SEMI
    (163) struct_declaration -> . pppragma_directive
    (143) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (144) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (145) specifier_qualifier_list -> . type_specifier
    (146) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (147) specifier_qualifier_list -> . alignment_specifier
    (148) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (71) pppragma_directive -> . PPPRAGMA
    (72) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (73) pppragma_directive -> . _PRAGMA LPAREN unified_string_literal RPAREN
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION

    RBRACE          shift and go to state 208
    SEMI            shift and go to state 210
    PPPRAGMA        shift and go to state 15
    _PRAGMA         shift and go to state 16
    _ALIGNAS        shift and go to state 61
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ATOMIC         shift and go to state 50
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63

    struct_or_union                shift and go to state 37
    struct_declaration_list        shift and go to state 333
    brace_close                    shift and go to state 334
    struct_declaration             shift and go to state 207
    specifier_qualifier_list       shift and go to state 209
    pppragma_directive             shift and go to state 211
    type_specifier_no_typeid       shift and go to state 24
    type_qualifier                 shift and go to state 116
    type_specifier                 shift and go to state 212
    type_qualifier_list            shift and go to state 213
    alignment_specifier            shift and go to state 214
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    atomic_specifier               shift and go to state 106

state 204

    (155) struct_or_union_specifier -> struct_or_union TYPEID brace_open . struct_declaration_list brace_close
    (156) struct_or_union_specifier -> struct_or_union TYPEID brace_open . brace_close
    (159) struct_declaration_list -> . struct_declaration
    (160) struct_declaration_list -> . struct_declaration_list struct_declaration
    (339) brace_close -> . RBRACE
    (161) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt SEMI
    (162) struct_declaration -> . SEMI
    (163) struct_declaration -> . pppragma_directive
    (143) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (144) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (145) specifier_qualifier_list -> . type_specifier
    (146) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (147) specifier_qualifier_list -> . alignment_specifier
    (148) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (71) pppragma_directive -> . PPPRAGMA
    (72) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (73) pppragma_directive -> . _PRAGMA LPAREN unified_string_literal RPAREN
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION

    RBRACE          shift and go to state 208
    SEMI            shift and go to state 210
    PPPRAGMA        shift and go to state 15
    _PRAGMA         shift and go to state 16
    _ALIGNAS        shift and go to state 61
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ATOMIC         shift and go to state 50
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63

    struct_or_union                shift and go to state 37
    struct_declaration_list        shift and go to state 335
    brace_close                    shift and go to state 336
    struct_declaration             shift and go to state 207
    specifier_qualifier_list       shift and go to state 209
    pppragma_directive             shift and go to state 211
    type_specifier_no_typeid       shift and go to state 24
    type_qualifier                 shift and go to state 116
    type_specifier                 shift and go to state 212
    type_qualifier_list            shift and go to state 213
    alignment_specifier            shift and go to state 214
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    atomic_specifier               shift and go to state 106

state 205

    (151) struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list . brace_close
    (160) struct_declaration_list -> struct_declaration_list . struct_declaration
    (339) brace_close -> . RBRACE
    (161) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt SEMI
    (162) struct_declaration -> . SEMI
    (163) struct_declaration -> . pppragma_directive
    (143) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (144) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (145) specifier_qualifier_list -> . type_specifier
    (146) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (147) specifier_qualifier_list -> . alignment_specifier
    (148) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (71) pppragma_directive -> . PPPRAGMA
    (72) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (73) pppragma_directive -> . _PRAGMA LPAREN unified_string_literal RPAREN
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION

    RBRACE          shift and go to state 208
    SEMI            shift and go to state 210
    PPPRAGMA        shift and go to state 15
    _PRAGMA         shift and go to state 16
    _ALIGNAS        shift and go to state 61
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ATOMIC         shift and go to state 50
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63

    struct_or_union                shift and go to state 37
    brace_close                    shift and go to state 337
    struct_declaration             shift and go to state 338
    specifier_qualifier_list       shift and go to state 209
    pppragma_directive             shift and go to state 211
    type_specifier_no_typeid       shift and go to state 24
    type_qualifier                 shift and go to state 116
    type_specifier                 shift and go to state 212
    type_qualifier_list            shift and go to state 213
    alignment_specifier            shift and go to state 214
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    atomic_specifier               shift and go to state 106

state 206

    (152) struct_or_union_specifier -> struct_or_union brace_open brace_close .

    CONST           reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    RESTRICT        reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    VOLATILE        reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    _ATOMIC         reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    AUTO            reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    REGISTER        reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    STATIC          reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    EXTERN          reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    TYPEDEF         reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    _THREAD_LOCAL   reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    INLINE          reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    _NORETURN       reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    VOID            reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    _BOOL           reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    CHAR            reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    SHORT           reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    INT             reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    LONG            reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    FLOAT           reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    DOUBLE          reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    _COMPLEX        reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    SIGNED          reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    UNSIGNED        reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    __INT128        reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    _ALIGNAS        reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    ID              reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    LPAREN          reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    TIMES           reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    TYPEID          reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    SEMI            reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    LBRACKET        reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    COMMA           reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    RPAREN          reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    COLON           reduce using rule 152 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)


state 207

    (159) struct_declaration_list -> struct_declaration .

    RBRACE          reduce using rule 159 (struct_declaration_list -> struct_declaration .)
    SEMI            reduce using rule 159 (struct_declaration_list -> struct_declaration .)
    PPPRAGMA        reduce using rule 159 (struct_declaration_list -> struct_declaration .)
    _PRAGMA         reduce using rule 159 (struct_declaration_list -> struct_declaration .)
    _ALIGNAS        reduce using rule 159 (struct_declaration_list -> struct_declaration .)
    TYPEID          reduce using rule 159 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 159 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 159 (struct_declaration_list -> struct_declaration .)
    _BOOL           reduce using rule 159 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 159 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 159 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 159 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 159 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 159 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 159 (struct_declaration_list -> struct_declaration .)
    _COMPLEX        reduce using rule 159 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 159 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 159 (struct_declaration_list -> struct_declaration .)
    __INT128        reduce using rule 159 (struct_declaration_list -> struct_declaration .)
    _ATOMIC         reduce using rule 159 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 159 (struct_declaration_list -> struct_declaration .)
    RESTRICT        reduce using rule 159 (struct_declaration_list -> struct_declaration .)
    VOLATILE        reduce using rule 159 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 159 (struct_declaration_list -> struct_declaration .)
    UNION           reduce using rule 159 (struct_declaration_list -> struct_declaration .)


state 208

    (339) brace_close -> RBRACE .

    CONST           reduce using rule 339 (brace_close -> RBRACE .)
    RESTRICT        reduce using rule 339 (brace_close -> RBRACE .)
    VOLATILE        reduce using rule 339 (brace_close -> RBRACE .)
    _ATOMIC         reduce using rule 339 (brace_close -> RBRACE .)
    AUTO            reduce using rule 339 (brace_close -> RBRACE .)
    REGISTER        reduce using rule 339 (brace_close -> RBRACE .)
    STATIC          reduce using rule 339 (brace_close -> RBRACE .)
    EXTERN          reduce using rule 339 (brace_close -> RBRACE .)
    TYPEDEF         reduce using rule 339 (brace_close -> RBRACE .)
    _THREAD_LOCAL   reduce using rule 339 (brace_close -> RBRACE .)
    INLINE          reduce using rule 339 (brace_close -> RBRACE .)
    _NORETURN       reduce using rule 339 (brace_close -> RBRACE .)
    VOID            reduce using rule 339 (brace_close -> RBRACE .)
    _BOOL           reduce using rule 339 (brace_close -> RBRACE .)
    CHAR            reduce using rule 339 (brace_close -> RBRACE .)
    SHORT           reduce using rule 339 (brace_close -> RBRACE .)
    INT             reduce using rule 339 (brace_close -> RBRACE .)
    LONG            reduce using rule 339 (brace_close -> RBRACE .)
    FLOAT           reduce using rule 339 (brace_close -> RBRACE .)
    DOUBLE          reduce using rule 339 (brace_close -> RBRACE .)
    _COMPLEX        reduce using rule 339 (brace_close -> RBRACE .)
    SIGNED          reduce using rule 339 (brace_close -> RBRACE .)
    UNSIGNED        reduce using rule 339 (brace_close -> RBRACE .)
    __INT128        reduce using rule 339 (brace_close -> RBRACE .)
    _ALIGNAS        reduce using rule 339 (brace_close -> RBRACE .)
    ID              reduce using rule 339 (brace_close -> RBRACE .)
    LPAREN          reduce using rule 339 (brace_close -> RBRACE .)
    TIMES           reduce using rule 339 (brace_close -> RBRACE .)
    TYPEID          reduce using rule 339 (brace_close -> RBRACE .)
    SEMI            reduce using rule 339 (brace_close -> RBRACE .)
    LBRACKET        reduce using rule 339 (brace_close -> RBRACE .)
    COMMA           reduce using rule 339 (brace_close -> RBRACE .)
    RPAREN          reduce using rule 339 (brace_close -> RBRACE .)
    COLON           reduce using rule 339 (brace_close -> RBRACE .)
    PPHASH          reduce using rule 339 (brace_close -> RBRACE .)
    PPPRAGMA        reduce using rule 339 (brace_close -> RBRACE .)
    _PRAGMA         reduce using rule 339 (brace_close -> RBRACE .)
    _STATIC_ASSERT  reduce using rule 339 (brace_close -> RBRACE .)
    ENUM            reduce using rule 339 (brace_close -> RBRACE .)
    STRUCT          reduce using rule 339 (brace_close -> RBRACE .)
    UNION           reduce using rule 339 (brace_close -> RBRACE .)
    $end            reduce using rule 339 (brace_close -> RBRACE .)
    CASE            reduce using rule 339 (brace_close -> RBRACE .)
    DEFAULT         reduce using rule 339 (brace_close -> RBRACE .)
    IF              reduce using rule 339 (brace_close -> RBRACE .)
    SWITCH          reduce using rule 339 (brace_close -> RBRACE .)
    WHILE           reduce using rule 339 (brace_close -> RBRACE .)
    DO              reduce using rule 339 (brace_close -> RBRACE .)
    FOR             reduce using rule 339 (brace_close -> RBRACE .)
    GOTO            reduce using rule 339 (brace_close -> RBRACE .)
    BREAK           reduce using rule 339 (brace_close -> RBRACE .)
    CONTINUE        reduce using rule 339 (brace_close -> RBRACE .)
    RETURN          reduce using rule 339 (brace_close -> RBRACE .)
    LBRACE          reduce using rule 339 (brace_close -> RBRACE .)
    PLUSPLUS        reduce using rule 339 (brace_close -> RBRACE .)
    MINUSMINUS      reduce using rule 339 (brace_close -> RBRACE .)
    SIZEOF          reduce using rule 339 (brace_close -> RBRACE .)
    _ALIGNOF        reduce using rule 339 (brace_close -> RBRACE .)
    AND             reduce using rule 339 (brace_close -> RBRACE .)
    PLUS            reduce using rule 339 (brace_close -> RBRACE .)
    MINUS           reduce using rule 339 (brace_close -> RBRACE .)
    NOT             reduce using rule 339 (brace_close -> RBRACE .)
    LNOT            reduce using rule 339 (brace_close -> RBRACE .)
    OFFSETOF        reduce using rule 339 (brace_close -> RBRACE .)
    INT_CONST_DEC   reduce using rule 339 (brace_close -> RBRACE .)
    INT_CONST_OCT   reduce using rule 339 (brace_close -> RBRACE .)
    INT_CONST_HEX   reduce using rule 339 (brace_close -> RBRACE .)
    INT_CONST_BIN   reduce using rule 339 (brace_close -> RBRACE .)
    INT_CONST_CHAR  reduce using rule 339 (brace_close -> RBRACE .)
    FLOAT_CONST     reduce using rule 339 (brace_close -> RBRACE .)
    HEX_FLOAT_CONST reduce using rule 339 (brace_close -> RBRACE .)
    CHAR_CONST      reduce using rule 339 (brace_close -> RBRACE .)
    WCHAR_CONST     reduce using rule 339 (brace_close -> RBRACE .)
    U8CHAR_CONST    reduce using rule 339 (brace_close -> RBRACE .)
    U16CHAR_CONST   reduce using rule 339 (brace_close -> RBRACE .)
    U32CHAR_CONST   reduce using rule 339 (brace_close -> RBRACE .)
    STRING_LITERAL  reduce using rule 339 (brace_close -> RBRACE .)
    WSTRING_LITERAL reduce using rule 339 (brace_close -> RBRACE .)
    U8STRING_LITERAL reduce using rule 339 (brace_close -> RBRACE .)
    U16STRING_LITERAL reduce using rule 339 (brace_close -> RBRACE .)
    U32STRING_LITERAL reduce using rule 339 (brace_close -> RBRACE .)
    RBRACE          reduce using rule 339 (brace_close -> RBRACE .)
    ELSE            reduce using rule 339 (brace_close -> RBRACE .)
    PERIOD          reduce using rule 339 (brace_close -> RBRACE .)
    ARROW           reduce using rule 339 (brace_close -> RBRACE .)
    CONDOP          reduce using rule 339 (brace_close -> RBRACE .)
    DIVIDE          reduce using rule 339 (brace_close -> RBRACE .)
    MOD             reduce using rule 339 (brace_close -> RBRACE .)
    RSHIFT          reduce using rule 339 (brace_close -> RBRACE .)
    LSHIFT          reduce using rule 339 (brace_close -> RBRACE .)
    LT              reduce using rule 339 (brace_close -> RBRACE .)
    LE              reduce using rule 339 (brace_close -> RBRACE .)
    GE              reduce using rule 339 (brace_close -> RBRACE .)
    GT              reduce using rule 339 (brace_close -> RBRACE .)
    EQ              reduce using rule 339 (brace_close -> RBRACE .)
    NE              reduce using rule 339 (brace_close -> RBRACE .)
    OR              reduce using rule 339 (brace_close -> RBRACE .)
    XOR             reduce using rule 339 (brace_close -> RBRACE .)
    LAND            reduce using rule 339 (brace_close -> RBRACE .)
    LOR             reduce using rule 339 (brace_close -> RBRACE .)
    EQUALS          reduce using rule 339 (brace_close -> RBRACE .)
    XOREQUAL        reduce using rule 339 (brace_close -> RBRACE .)
    TIMESEQUAL      reduce using rule 339 (brace_close -> RBRACE .)
    DIVEQUAL        reduce using rule 339 (brace_close -> RBRACE .)
    MODEQUAL        reduce using rule 339 (brace_close -> RBRACE .)
    PLUSEQUAL       reduce using rule 339 (brace_close -> RBRACE .)
    MINUSEQUAL      reduce using rule 339 (brace_close -> RBRACE .)
    LSHIFTEQUAL     reduce using rule 339 (brace_close -> RBRACE .)
    RSHIFTEQUAL     reduce using rule 339 (brace_close -> RBRACE .)
    ANDEQUAL        reduce using rule 339 (brace_close -> RBRACE .)
    OREQUAL         reduce using rule 339 (brace_close -> RBRACE .)
    RBRACKET        reduce using rule 339 (brace_close -> RBRACE .)


state 209

    (161) struct_declaration -> specifier_qualifier_list . struct_declarator_list_opt SEMI
    (143) specifier_qualifier_list -> specifier_qualifier_list . type_specifier_no_typeid
    (144) specifier_qualifier_list -> specifier_qualifier_list . type_qualifier
    (148) specifier_qualifier_list -> specifier_qualifier_list . alignment_specifier
    (25) struct_declarator_list_opt -> . empty
    (26) struct_declarator_list_opt -> . struct_declarator_list
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (340) empty -> .
    (164) struct_declarator_list -> . struct_declarator
    (165) struct_declarator_list -> . struct_declarator_list COMMA struct_declarator
    (166) struct_declarator -> . declarator
    (167) struct_declarator -> . declarator COLON constant_expression
    (168) struct_declarator -> . COLON constant_expression
    (181) declarator -> . id_declarator
    (182) declarator -> . typeid_declarator
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (54) typeid_declarator -> . direct_typeid_declarator
    (55) typeid_declarator -> . pointer direct_typeid_declarator
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (183) pointer -> . TIMES type_qualifier_list_opt
    (184) pointer -> . TIMES type_qualifier_list_opt pointer
    (37) direct_typeid_declarator -> . TYPEID
    (38) direct_typeid_declarator -> . LPAREN typeid_declarator RPAREN
    (39) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (40) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (41) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (42) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (43) direct_typeid_declarator -> . direct_typeid_declarator LPAREN parameter_type_list RPAREN
    (44) direct_typeid_declarator -> . direct_typeid_declarator LPAREN identifier_list_opt RPAREN

    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 81
    _ALIGNAS        shift and go to state 61
    SEMI            reduce using rule 340 (empty -> .)
    COLON           shift and go to state 347
    ID              shift and go to state 28
    LPAREN          shift and go to state 82
    TIMES           shift and go to state 30
    TYPEID          shift and go to state 89

    struct_declarator_list_opt     shift and go to state 339
    type_specifier_no_typeid       shift and go to state 340
    type_qualifier                 shift and go to state 341
    alignment_specifier            shift and go to state 342
    empty                          shift and go to state 343
    struct_declarator_list         shift and go to state 344
    struct_declarator              shift and go to state 345
    declarator                     shift and go to state 346
    id_declarator                  shift and go to state 130
    typeid_declarator              shift and go to state 87
    direct_id_declarator           shift and go to state 19
    pointer                        shift and go to state 80
    direct_typeid_declarator       shift and go to state 88

state 210

    (162) struct_declaration -> SEMI .

    RBRACE          reduce using rule 162 (struct_declaration -> SEMI .)
    SEMI            reduce using rule 162 (struct_declaration -> SEMI .)
    PPPRAGMA        reduce using rule 162 (struct_declaration -> SEMI .)
    _PRAGMA         reduce using rule 162 (struct_declaration -> SEMI .)
    _ALIGNAS        reduce using rule 162 (struct_declaration -> SEMI .)
    TYPEID          reduce using rule 162 (struct_declaration -> SEMI .)
    ENUM            reduce using rule 162 (struct_declaration -> SEMI .)
    VOID            reduce using rule 162 (struct_declaration -> SEMI .)
    _BOOL           reduce using rule 162 (struct_declaration -> SEMI .)
    CHAR            reduce using rule 162 (struct_declaration -> SEMI .)
    SHORT           reduce using rule 162 (struct_declaration -> SEMI .)
    INT             reduce using rule 162 (struct_declaration -> SEMI .)
    LONG            reduce using rule 162 (struct_declaration -> SEMI .)
    FLOAT           reduce using rule 162 (struct_declaration -> SEMI .)
    DOUBLE          reduce using rule 162 (struct_declaration -> SEMI .)
    _COMPLEX        reduce using rule 162 (struct_declaration -> SEMI .)
    SIGNED          reduce using rule 162 (struct_declaration -> SEMI .)
    UNSIGNED        reduce using rule 162 (struct_declaration -> SEMI .)
    __INT128        reduce using rule 162 (struct_declaration -> SEMI .)
    _ATOMIC         reduce using rule 162 (struct_declaration -> SEMI .)
    CONST           reduce using rule 162 (struct_declaration -> SEMI .)
    RESTRICT        reduce using rule 162 (struct_declaration -> SEMI .)
    VOLATILE        reduce using rule 162 (struct_declaration -> SEMI .)
    STRUCT          reduce using rule 162 (struct_declaration -> SEMI .)
    UNION           reduce using rule 162 (struct_declaration -> SEMI .)


state 211

    (163) struct_declaration -> pppragma_directive .

    RBRACE          reduce using rule 163 (struct_declaration -> pppragma_directive .)
    SEMI            reduce using rule 163 (struct_declaration -> pppragma_directive .)
    PPPRAGMA        reduce using rule 163 (struct_declaration -> pppragma_directive .)
    _PRAGMA         reduce using rule 163 (struct_declaration -> pppragma_directive .)
    _ALIGNAS        reduce using rule 163 (struct_declaration -> pppragma_directive .)
    TYPEID          reduce using rule 163 (struct_declaration -> pppragma_directive .)
    ENUM            reduce using rule 163 (struct_declaration -> pppragma_directive .)
    VOID            reduce using rule 163 (struct_declaration -> pppragma_directive .)
    _BOOL           reduce using rule 163 (struct_declaration -> pppragma_directive .)
    CHAR            reduce using rule 163 (struct_declaration -> pppragma_directive .)
    SHORT           reduce using rule 163 (struct_declaration -> pppragma_directive .)
    INT             reduce using rule 163 (struct_declaration -> pppragma_directive .)
    LONG            reduce using rule 163 (struct_declaration -> pppragma_directive .)
    FLOAT           reduce using rule 163 (struct_declaration -> pppragma_directive .)
    DOUBLE          reduce using rule 163 (struct_declaration -> pppragma_directive .)
    _COMPLEX        reduce using rule 163 (struct_declaration -> pppragma_directive .)
    SIGNED          reduce using rule 163 (struct_declaration -> pppragma_directive .)
    UNSIGNED        reduce using rule 163 (struct_declaration -> pppragma_directive .)
    __INT128        reduce using rule 163 (struct_declaration -> pppragma_directive .)
    _ATOMIC         reduce using rule 163 (struct_declaration -> pppragma_directive .)
    CONST           reduce using rule 163 (struct_declaration -> pppragma_directive .)
    RESTRICT        reduce using rule 163 (struct_declaration -> pppragma_directive .)
    VOLATILE        reduce using rule 163 (struct_declaration -> pppragma_directive .)
    STRUCT          reduce using rule 163 (struct_declaration -> pppragma_directive .)
    UNION           reduce using rule 163 (struct_declaration -> pppragma_directive .)


state 212

    (145) specifier_qualifier_list -> type_specifier .

    VOID            reduce using rule 145 (specifier_qualifier_list -> type_specifier .)
    _BOOL           reduce using rule 145 (specifier_qualifier_list -> type_specifier .)
    CHAR            reduce using rule 145 (specifier_qualifier_list -> type_specifier .)
    SHORT           reduce using rule 145 (specifier_qualifier_list -> type_specifier .)
    INT             reduce using rule 145 (specifier_qualifier_list -> type_specifier .)
    LONG            reduce using rule 145 (specifier_qualifier_list -> type_specifier .)
    FLOAT           reduce using rule 145 (specifier_qualifier_list -> type_specifier .)
    DOUBLE          reduce using rule 145 (specifier_qualifier_list -> type_specifier .)
    _COMPLEX        reduce using rule 145 (specifier_qualifier_list -> type_specifier .)
    SIGNED          reduce using rule 145 (specifier_qualifier_list -> type_specifier .)
    UNSIGNED        reduce using rule 145 (specifier_qualifier_list -> type_specifier .)
    __INT128        reduce using rule 145 (specifier_qualifier_list -> type_specifier .)
    CONST           reduce using rule 145 (specifier_qualifier_list -> type_specifier .)
    RESTRICT        reduce using rule 145 (specifier_qualifier_list -> type_specifier .)
    VOLATILE        reduce using rule 145 (specifier_qualifier_list -> type_specifier .)
    _ATOMIC         reduce using rule 145 (specifier_qualifier_list -> type_specifier .)
    _ALIGNAS        reduce using rule 145 (specifier_qualifier_list -> type_specifier .)
    COLON           reduce using rule 145 (specifier_qualifier_list -> type_specifier .)
    ID              reduce using rule 145 (specifier_qualifier_list -> type_specifier .)
    LPAREN          reduce using rule 145 (specifier_qualifier_list -> type_specifier .)
    TIMES           reduce using rule 145 (specifier_qualifier_list -> type_specifier .)
    TYPEID          reduce using rule 145 (specifier_qualifier_list -> type_specifier .)
    SEMI            reduce using rule 145 (specifier_qualifier_list -> type_specifier .)
    LBRACKET        reduce using rule 145 (specifier_qualifier_list -> type_specifier .)
    RPAREN          reduce using rule 145 (specifier_qualifier_list -> type_specifier .)
    COMMA           reduce using rule 145 (specifier_qualifier_list -> type_specifier .)


state 213

    (146) specifier_qualifier_list -> type_qualifier_list . type_specifier
    (186) type_qualifier_list -> type_qualifier_list . type_qualifier
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION

    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 72
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63

    type_specifier                 shift and go to state 348
    type_qualifier                 shift and go to state 197
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    type_specifier_no_typeid       shift and go to state 24
    atomic_specifier               shift and go to state 106
    struct_or_union                shift and go to state 37

state 214

    (147) specifier_qualifier_list -> alignment_specifier .

    VOID            reduce using rule 147 (specifier_qualifier_list -> alignment_specifier .)
    _BOOL           reduce using rule 147 (specifier_qualifier_list -> alignment_specifier .)
    CHAR            reduce using rule 147 (specifier_qualifier_list -> alignment_specifier .)
    SHORT           reduce using rule 147 (specifier_qualifier_list -> alignment_specifier .)
    INT             reduce using rule 147 (specifier_qualifier_list -> alignment_specifier .)
    LONG            reduce using rule 147 (specifier_qualifier_list -> alignment_specifier .)
    FLOAT           reduce using rule 147 (specifier_qualifier_list -> alignment_specifier .)
    DOUBLE          reduce using rule 147 (specifier_qualifier_list -> alignment_specifier .)
    _COMPLEX        reduce using rule 147 (specifier_qualifier_list -> alignment_specifier .)
    SIGNED          reduce using rule 147 (specifier_qualifier_list -> alignment_specifier .)
    UNSIGNED        reduce using rule 147 (specifier_qualifier_list -> alignment_specifier .)
    __INT128        reduce using rule 147 (specifier_qualifier_list -> alignment_specifier .)
    CONST           reduce using rule 147 (specifier_qualifier_list -> alignment_specifier .)
    RESTRICT        reduce using rule 147 (specifier_qualifier_list -> alignment_specifier .)
    VOLATILE        reduce using rule 147 (specifier_qualifier_list -> alignment_specifier .)
    _ATOMIC         reduce using rule 147 (specifier_qualifier_list -> alignment_specifier .)
    _ALIGNAS        reduce using rule 147 (specifier_qualifier_list -> alignment_specifier .)
    COLON           reduce using rule 147 (specifier_qualifier_list -> alignment_specifier .)
    ID              reduce using rule 147 (specifier_qualifier_list -> alignment_specifier .)
    LPAREN          reduce using rule 147 (specifier_qualifier_list -> alignment_specifier .)
    TIMES           reduce using rule 147 (specifier_qualifier_list -> alignment_specifier .)
    TYPEID          reduce using rule 147 (specifier_qualifier_list -> alignment_specifier .)
    SEMI            reduce using rule 147 (specifier_qualifier_list -> alignment_specifier .)
    LBRACKET        reduce using rule 147 (specifier_qualifier_list -> alignment_specifier .)
    RPAREN          reduce using rule 147 (specifier_qualifier_list -> alignment_specifier .)
    COMMA           reduce using rule 147 (specifier_qualifier_list -> alignment_specifier .)


state 215

    (130) atomic_specifier -> _ATOMIC LPAREN type_name . RPAREN

    RPAREN          shift and go to state 349


state 216

    (206) type_name -> specifier_qualifier_list . abstract_declarator_opt
    (143) specifier_qualifier_list -> specifier_qualifier_list . type_specifier_no_typeid
    (144) specifier_qualifier_list -> specifier_qualifier_list . type_qualifier
    (148) specifier_qualifier_list -> specifier_qualifier_list . alignment_specifier
    (1) abstract_declarator_opt -> . empty
    (2) abstract_declarator_opt -> . abstract_declarator
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (340) empty -> .
    (207) abstract_declarator -> . pointer
    (208) abstract_declarator -> . pointer direct_abstract_declarator
    (209) abstract_declarator -> . direct_abstract_declarator
    (183) pointer -> . TIMES type_qualifier_list_opt
    (184) pointer -> . TIMES type_qualifier_list_opt pointer
    (210) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (211) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (212) direct_abstract_declarator -> . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (213) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (214) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (215) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (216) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 81
    _ALIGNAS        shift and go to state 61
    RPAREN          reduce using rule 340 (empty -> .)
    COMMA           reduce using rule 340 (empty -> .)
    TIMES           shift and go to state 30
    LPAREN          shift and go to state 351
    LBRACKET        shift and go to state 323

    abstract_declarator_opt        shift and go to state 350
    type_specifier_no_typeid       shift and go to state 340
    type_qualifier                 shift and go to state 341
    alignment_specifier            shift and go to state 342
    empty                          shift and go to state 320
    abstract_declarator            shift and go to state 321
    pointer                        shift and go to state 352
    direct_abstract_declarator     shift and go to state 325

state 217

    (177) alignment_specifier -> _ALIGNAS LPAREN type_name . RPAREN

    RPAREN          shift and go to state 353


state 218

    (178) alignment_specifier -> _ALIGNAS LPAREN constant_expression . RPAREN

    RPAREN          shift and go to state 354


state 219

    (221) compound_statement -> brace_open block_item_list_opt . brace_close
    (339) brace_close -> . RBRACE

    RBRACE          shift and go to state 208

    brace_close                    shift and go to state 355

state 220

    (5) block_item_list_opt -> empty .
    (13) expression_opt -> empty .

    RBRACE          reduce using rule 5 (block_item_list_opt -> empty .)
    SEMI            reduce using rule 13 (expression_opt -> empty .)


state 221

    (6) block_item_list_opt -> block_item_list .
    (220) block_item_list -> block_item_list . block_item
    (217) block_item -> . declaration
    (218) block_item -> . statement
    (90) declaration -> . decl_body SEMI
    (78) statement -> . labeled_statement
    (79) statement -> . expression_statement
    (80) statement -> . compound_statement
    (81) statement -> . selection_statement
    (82) statement -> . iteration_statement
    (83) statement -> . jump_statement
    (84) statement -> . pppragma_directive
    (85) statement -> . static_assert
    (88) decl_body -> . declaration_specifiers init_declarator_list_opt
    (89) decl_body -> . declaration_specifiers_no_type id_init_declarator_list_opt
    (222) labeled_statement -> . ID COLON pragmacomp_or_statement
    (223) labeled_statement -> . CASE constant_expression COLON pragmacomp_or_statement
    (224) labeled_statement -> . DEFAULT COLON pragmacomp_or_statement
    (237) expression_statement -> . expression_opt SEMI
    (221) compound_statement -> . brace_open block_item_list_opt brace_close
    (225) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (226) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (227) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (228) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (229) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (230) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (231) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (232) jump_statement -> . GOTO ID SEMI
    (233) jump_statement -> . BREAK SEMI
    (234) jump_statement -> . CONTINUE SEMI
    (235) jump_statement -> . RETURN expression SEMI
    (236) jump_statement -> . RETURN SEMI
    (71) pppragma_directive -> . PPPRAGMA
    (72) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (73) pppragma_directive -> . _PRAGMA LPAREN unified_string_literal RPAREN
    (68) static_assert -> . _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN
    (69) static_assert -> . _STATIC_ASSERT LPAREN constant_expression RPAREN
    (98) declaration_specifiers -> . declaration_specifiers type_qualifier
    (99) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (100) declaration_specifiers -> . declaration_specifiers function_specifier
    (101) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (102) declaration_specifiers -> . type_specifier
    (103) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (104) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (93) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (94) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (95) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (96) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (97) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (338) brace_open -> . LBRACE
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) storage_class_specifier -> . STATIC
    (108) storage_class_specifier -> . EXTERN
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . _THREAD_LOCAL
    (111) function_specifier -> . INLINE
    (112) function_specifier -> . _NORETURN
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (340) empty -> .
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    RBRACE          reduce using rule 6 (block_item_list_opt -> block_item_list .)
    ID              shift and go to state 233
    CASE            shift and go to state 234
    DEFAULT         shift and go to state 235
    IF              shift and go to state 237
    SWITCH          shift and go to state 240
    WHILE           shift and go to state 241
    DO              shift and go to state 242
    FOR             shift and go to state 243
    GOTO            shift and go to state 244
    BREAK           shift and go to state 245
    CONTINUE        shift and go to state 246
    RETURN          shift and go to state 247
    PPPRAGMA        shift and go to state 15
    _PRAGMA         shift and go to state 16
    _STATIC_ASSERT  shift and go to state 18
    LBRACE          shift and go to state 121
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 72
    AUTO            shift and go to state 54
    REGISTER        shift and go to state 55
    STATIC          shift and go to state 29
    EXTERN          shift and go to state 56
    TYPEDEF         shift and go to state 57
    _THREAD_LOCAL   shift and go to state 58
    INLINE          shift and go to state 59
    _NORETURN       shift and go to state 60
    _ALIGNAS        shift and go to state 61
    SEMI            reduce using rule 340 (empty -> .)
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    LPAREN          shift and go to state 238
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    block_item                     shift and go to state 356
    declaration                    shift and go to state 223
    statement                      shift and go to state 224
    decl_body                      shift and go to state 13
    labeled_statement              shift and go to state 225
    expression_statement           shift and go to state 226
    compound_statement             shift and go to state 227
    selection_statement            shift and go to state 228
    iteration_statement            shift and go to state 229
    jump_statement                 shift and go to state 230
    pppragma_directive             shift and go to state 231
    static_assert                  shift and go to state 232
    declaration_specifiers         shift and go to state 69
    declaration_specifiers_no_type shift and go to state 70
    expression_opt                 shift and go to state 236
    brace_open                     shift and go to state 128
    expression                     shift and go to state 239
    unified_string_literal         shift and go to state 143
    type_qualifier                 shift and go to state 21
    storage_class_specifier        shift and go to state 22
    function_specifier             shift and go to state 23
    type_specifier_no_typeid       shift and go to state 24
    type_specifier                 shift and go to state 25
    alignment_specifier            shift and go to state 27
    atomic_specifier               shift and go to state 71
    empty                          shift and go to state 357
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    assignment_expression          shift and go to state 248
    struct_or_union                shift and go to state 37
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_wstring_literal        shift and go to state 164

state 222

    (219) block_item_list -> block_item .

    ID              reduce using rule 219 (block_item_list -> block_item .)
    CASE            reduce using rule 219 (block_item_list -> block_item .)
    DEFAULT         reduce using rule 219 (block_item_list -> block_item .)
    IF              reduce using rule 219 (block_item_list -> block_item .)
    SWITCH          reduce using rule 219 (block_item_list -> block_item .)
    WHILE           reduce using rule 219 (block_item_list -> block_item .)
    DO              reduce using rule 219 (block_item_list -> block_item .)
    FOR             reduce using rule 219 (block_item_list -> block_item .)
    GOTO            reduce using rule 219 (block_item_list -> block_item .)
    BREAK           reduce using rule 219 (block_item_list -> block_item .)
    CONTINUE        reduce using rule 219 (block_item_list -> block_item .)
    RETURN          reduce using rule 219 (block_item_list -> block_item .)
    PPPRAGMA        reduce using rule 219 (block_item_list -> block_item .)
    _PRAGMA         reduce using rule 219 (block_item_list -> block_item .)
    _STATIC_ASSERT  reduce using rule 219 (block_item_list -> block_item .)
    LBRACE          reduce using rule 219 (block_item_list -> block_item .)
    CONST           reduce using rule 219 (block_item_list -> block_item .)
    RESTRICT        reduce using rule 219 (block_item_list -> block_item .)
    VOLATILE        reduce using rule 219 (block_item_list -> block_item .)
    _ATOMIC         reduce using rule 219 (block_item_list -> block_item .)
    AUTO            reduce using rule 219 (block_item_list -> block_item .)
    REGISTER        reduce using rule 219 (block_item_list -> block_item .)
    STATIC          reduce using rule 219 (block_item_list -> block_item .)
    EXTERN          reduce using rule 219 (block_item_list -> block_item .)
    TYPEDEF         reduce using rule 219 (block_item_list -> block_item .)
    _THREAD_LOCAL   reduce using rule 219 (block_item_list -> block_item .)
    INLINE          reduce using rule 219 (block_item_list -> block_item .)
    _NORETURN       reduce using rule 219 (block_item_list -> block_item .)
    _ALIGNAS        reduce using rule 219 (block_item_list -> block_item .)
    TYPEID          reduce using rule 219 (block_item_list -> block_item .)
    ENUM            reduce using rule 219 (block_item_list -> block_item .)
    VOID            reduce using rule 219 (block_item_list -> block_item .)
    _BOOL           reduce using rule 219 (block_item_list -> block_item .)
    CHAR            reduce using rule 219 (block_item_list -> block_item .)
    SHORT           reduce using rule 219 (block_item_list -> block_item .)
    INT             reduce using rule 219 (block_item_list -> block_item .)
    LONG            reduce using rule 219 (block_item_list -> block_item .)
    FLOAT           reduce using rule 219 (block_item_list -> block_item .)
    DOUBLE          reduce using rule 219 (block_item_list -> block_item .)
    _COMPLEX        reduce using rule 219 (block_item_list -> block_item .)
    SIGNED          reduce using rule 219 (block_item_list -> block_item .)
    UNSIGNED        reduce using rule 219 (block_item_list -> block_item .)
    __INT128        reduce using rule 219 (block_item_list -> block_item .)
    LPAREN          reduce using rule 219 (block_item_list -> block_item .)
    STRUCT          reduce using rule 219 (block_item_list -> block_item .)
    UNION           reduce using rule 219 (block_item_list -> block_item .)
    PLUSPLUS        reduce using rule 219 (block_item_list -> block_item .)
    MINUSMINUS      reduce using rule 219 (block_item_list -> block_item .)
    SIZEOF          reduce using rule 219 (block_item_list -> block_item .)
    _ALIGNOF        reduce using rule 219 (block_item_list -> block_item .)
    AND             reduce using rule 219 (block_item_list -> block_item .)
    TIMES           reduce using rule 219 (block_item_list -> block_item .)
    PLUS            reduce using rule 219 (block_item_list -> block_item .)
    MINUS           reduce using rule 219 (block_item_list -> block_item .)
    NOT             reduce using rule 219 (block_item_list -> block_item .)
    LNOT            reduce using rule 219 (block_item_list -> block_item .)
    OFFSETOF        reduce using rule 219 (block_item_list -> block_item .)
    INT_CONST_DEC   reduce using rule 219 (block_item_list -> block_item .)
    INT_CONST_OCT   reduce using rule 219 (block_item_list -> block_item .)
    INT_CONST_HEX   reduce using rule 219 (block_item_list -> block_item .)
    INT_CONST_BIN   reduce using rule 219 (block_item_list -> block_item .)
    INT_CONST_CHAR  reduce using rule 219 (block_item_list -> block_item .)
    FLOAT_CONST     reduce using rule 219 (block_item_list -> block_item .)
    HEX_FLOAT_CONST reduce using rule 219 (block_item_list -> block_item .)
    CHAR_CONST      reduce using rule 219 (block_item_list -> block_item .)
    WCHAR_CONST     reduce using rule 219 (block_item_list -> block_item .)
    U8CHAR_CONST    reduce using rule 219 (block_item_list -> block_item .)
    U16CHAR_CONST   reduce using rule 219 (block_item_list -> block_item .)
    U32CHAR_CONST   reduce using rule 219 (block_item_list -> block_item .)
    STRING_LITERAL  reduce using rule 219 (block_item_list -> block_item .)
    WSTRING_LITERAL reduce using rule 219 (block_item_list -> block_item .)
    U8STRING_LITERAL reduce using rule 219 (block_item_list -> block_item .)
    U16STRING_LITERAL reduce using rule 219 (block_item_list -> block_item .)
    U32STRING_LITERAL reduce using rule 219 (block_item_list -> block_item .)
    SEMI            reduce using rule 219 (block_item_list -> block_item .)
    RBRACE          reduce using rule 219 (block_item_list -> block_item .)


state 223

    (217) block_item -> declaration .

    ID              reduce using rule 217 (block_item -> declaration .)
    CASE            reduce using rule 217 (block_item -> declaration .)
    DEFAULT         reduce using rule 217 (block_item -> declaration .)
    IF              reduce using rule 217 (block_item -> declaration .)
    SWITCH          reduce using rule 217 (block_item -> declaration .)
    WHILE           reduce using rule 217 (block_item -> declaration .)
    DO              reduce using rule 217 (block_item -> declaration .)
    FOR             reduce using rule 217 (block_item -> declaration .)
    GOTO            reduce using rule 217 (block_item -> declaration .)
    BREAK           reduce using rule 217 (block_item -> declaration .)
    CONTINUE        reduce using rule 217 (block_item -> declaration .)
    RETURN          reduce using rule 217 (block_item -> declaration .)
    PPPRAGMA        reduce using rule 217 (block_item -> declaration .)
    _PRAGMA         reduce using rule 217 (block_item -> declaration .)
    _STATIC_ASSERT  reduce using rule 217 (block_item -> declaration .)
    LBRACE          reduce using rule 217 (block_item -> declaration .)
    CONST           reduce using rule 217 (block_item -> declaration .)
    RESTRICT        reduce using rule 217 (block_item -> declaration .)
    VOLATILE        reduce using rule 217 (block_item -> declaration .)
    _ATOMIC         reduce using rule 217 (block_item -> declaration .)
    AUTO            reduce using rule 217 (block_item -> declaration .)
    REGISTER        reduce using rule 217 (block_item -> declaration .)
    STATIC          reduce using rule 217 (block_item -> declaration .)
    EXTERN          reduce using rule 217 (block_item -> declaration .)
    TYPEDEF         reduce using rule 217 (block_item -> declaration .)
    _THREAD_LOCAL   reduce using rule 217 (block_item -> declaration .)
    INLINE          reduce using rule 217 (block_item -> declaration .)
    _NORETURN       reduce using rule 217 (block_item -> declaration .)
    _ALIGNAS        reduce using rule 217 (block_item -> declaration .)
    TYPEID          reduce using rule 217 (block_item -> declaration .)
    ENUM            reduce using rule 217 (block_item -> declaration .)
    VOID            reduce using rule 217 (block_item -> declaration .)
    _BOOL           reduce using rule 217 (block_item -> declaration .)
    CHAR            reduce using rule 217 (block_item -> declaration .)
    SHORT           reduce using rule 217 (block_item -> declaration .)
    INT             reduce using rule 217 (block_item -> declaration .)
    LONG            reduce using rule 217 (block_item -> declaration .)
    FLOAT           reduce using rule 217 (block_item -> declaration .)
    DOUBLE          reduce using rule 217 (block_item -> declaration .)
    _COMPLEX        reduce using rule 217 (block_item -> declaration .)
    SIGNED          reduce using rule 217 (block_item -> declaration .)
    UNSIGNED        reduce using rule 217 (block_item -> declaration .)
    __INT128        reduce using rule 217 (block_item -> declaration .)
    LPAREN          reduce using rule 217 (block_item -> declaration .)
    STRUCT          reduce using rule 217 (block_item -> declaration .)
    UNION           reduce using rule 217 (block_item -> declaration .)
    PLUSPLUS        reduce using rule 217 (block_item -> declaration .)
    MINUSMINUS      reduce using rule 217 (block_item -> declaration .)
    SIZEOF          reduce using rule 217 (block_item -> declaration .)
    _ALIGNOF        reduce using rule 217 (block_item -> declaration .)
    AND             reduce using rule 217 (block_item -> declaration .)
    TIMES           reduce using rule 217 (block_item -> declaration .)
    PLUS            reduce using rule 217 (block_item -> declaration .)
    MINUS           reduce using rule 217 (block_item -> declaration .)
    NOT             reduce using rule 217 (block_item -> declaration .)
    LNOT            reduce using rule 217 (block_item -> declaration .)
    OFFSETOF        reduce using rule 217 (block_item -> declaration .)
    INT_CONST_DEC   reduce using rule 217 (block_item -> declaration .)
    INT_CONST_OCT   reduce using rule 217 (block_item -> declaration .)
    INT_CONST_HEX   reduce using rule 217 (block_item -> declaration .)
    INT_CONST_BIN   reduce using rule 217 (block_item -> declaration .)
    INT_CONST_CHAR  reduce using rule 217 (block_item -> declaration .)
    FLOAT_CONST     reduce using rule 217 (block_item -> declaration .)
    HEX_FLOAT_CONST reduce using rule 217 (block_item -> declaration .)
    CHAR_CONST      reduce using rule 217 (block_item -> declaration .)
    WCHAR_CONST     reduce using rule 217 (block_item -> declaration .)
    U8CHAR_CONST    reduce using rule 217 (block_item -> declaration .)
    U16CHAR_CONST   reduce using rule 217 (block_item -> declaration .)
    U32CHAR_CONST   reduce using rule 217 (block_item -> declaration .)
    STRING_LITERAL  reduce using rule 217 (block_item -> declaration .)
    WSTRING_LITERAL reduce using rule 217 (block_item -> declaration .)
    U8STRING_LITERAL reduce using rule 217 (block_item -> declaration .)
    U16STRING_LITERAL reduce using rule 217 (block_item -> declaration .)
    U32STRING_LITERAL reduce using rule 217 (block_item -> declaration .)
    SEMI            reduce using rule 217 (block_item -> declaration .)
    RBRACE          reduce using rule 217 (block_item -> declaration .)


state 224

    (218) block_item -> statement .

    ID              reduce using rule 218 (block_item -> statement .)
    CASE            reduce using rule 218 (block_item -> statement .)
    DEFAULT         reduce using rule 218 (block_item -> statement .)
    IF              reduce using rule 218 (block_item -> statement .)
    SWITCH          reduce using rule 218 (block_item -> statement .)
    WHILE           reduce using rule 218 (block_item -> statement .)
    DO              reduce using rule 218 (block_item -> statement .)
    FOR             reduce using rule 218 (block_item -> statement .)
    GOTO            reduce using rule 218 (block_item -> statement .)
    BREAK           reduce using rule 218 (block_item -> statement .)
    CONTINUE        reduce using rule 218 (block_item -> statement .)
    RETURN          reduce using rule 218 (block_item -> statement .)
    PPPRAGMA        reduce using rule 218 (block_item -> statement .)
    _PRAGMA         reduce using rule 218 (block_item -> statement .)
    _STATIC_ASSERT  reduce using rule 218 (block_item -> statement .)
    LBRACE          reduce using rule 218 (block_item -> statement .)
    CONST           reduce using rule 218 (block_item -> statement .)
    RESTRICT        reduce using rule 218 (block_item -> statement .)
    VOLATILE        reduce using rule 218 (block_item -> statement .)
    _ATOMIC         reduce using rule 218 (block_item -> statement .)
    AUTO            reduce using rule 218 (block_item -> statement .)
    REGISTER        reduce using rule 218 (block_item -> statement .)
    STATIC          reduce using rule 218 (block_item -> statement .)
    EXTERN          reduce using rule 218 (block_item -> statement .)
    TYPEDEF         reduce using rule 218 (block_item -> statement .)
    _THREAD_LOCAL   reduce using rule 218 (block_item -> statement .)
    INLINE          reduce using rule 218 (block_item -> statement .)
    _NORETURN       reduce using rule 218 (block_item -> statement .)
    _ALIGNAS        reduce using rule 218 (block_item -> statement .)
    TYPEID          reduce using rule 218 (block_item -> statement .)
    ENUM            reduce using rule 218 (block_item -> statement .)
    VOID            reduce using rule 218 (block_item -> statement .)
    _BOOL           reduce using rule 218 (block_item -> statement .)
    CHAR            reduce using rule 218 (block_item -> statement .)
    SHORT           reduce using rule 218 (block_item -> statement .)
    INT             reduce using rule 218 (block_item -> statement .)
    LONG            reduce using rule 218 (block_item -> statement .)
    FLOAT           reduce using rule 218 (block_item -> statement .)
    DOUBLE          reduce using rule 218 (block_item -> statement .)
    _COMPLEX        reduce using rule 218 (block_item -> statement .)
    SIGNED          reduce using rule 218 (block_item -> statement .)
    UNSIGNED        reduce using rule 218 (block_item -> statement .)
    __INT128        reduce using rule 218 (block_item -> statement .)
    LPAREN          reduce using rule 218 (block_item -> statement .)
    STRUCT          reduce using rule 218 (block_item -> statement .)
    UNION           reduce using rule 218 (block_item -> statement .)
    PLUSPLUS        reduce using rule 218 (block_item -> statement .)
    MINUSMINUS      reduce using rule 218 (block_item -> statement .)
    SIZEOF          reduce using rule 218 (block_item -> statement .)
    _ALIGNOF        reduce using rule 218 (block_item -> statement .)
    AND             reduce using rule 218 (block_item -> statement .)
    TIMES           reduce using rule 218 (block_item -> statement .)
    PLUS            reduce using rule 218 (block_item -> statement .)
    MINUS           reduce using rule 218 (block_item -> statement .)
    NOT             reduce using rule 218 (block_item -> statement .)
    LNOT            reduce using rule 218 (block_item -> statement .)
    OFFSETOF        reduce using rule 218 (block_item -> statement .)
    INT_CONST_DEC   reduce using rule 218 (block_item -> statement .)
    INT_CONST_OCT   reduce using rule 218 (block_item -> statement .)
    INT_CONST_HEX   reduce using rule 218 (block_item -> statement .)
    INT_CONST_BIN   reduce using rule 218 (block_item -> statement .)
    INT_CONST_CHAR  reduce using rule 218 (block_item -> statement .)
    FLOAT_CONST     reduce using rule 218 (block_item -> statement .)
    HEX_FLOAT_CONST reduce using rule 218 (block_item -> statement .)
    CHAR_CONST      reduce using rule 218 (block_item -> statement .)
    WCHAR_CONST     reduce using rule 218 (block_item -> statement .)
    U8CHAR_CONST    reduce using rule 218 (block_item -> statement .)
    U16CHAR_CONST   reduce using rule 218 (block_item -> statement .)
    U32CHAR_CONST   reduce using rule 218 (block_item -> statement .)
    STRING_LITERAL  reduce using rule 218 (block_item -> statement .)
    WSTRING_LITERAL reduce using rule 218 (block_item -> statement .)
    U8STRING_LITERAL reduce using rule 218 (block_item -> statement .)
    U16STRING_LITERAL reduce using rule 218 (block_item -> statement .)
    U32STRING_LITERAL reduce using rule 218 (block_item -> statement .)
    SEMI            reduce using rule 218 (block_item -> statement .)
    RBRACE          reduce using rule 218 (block_item -> statement .)


state 225

    (78) statement -> labeled_statement .

    ID              reduce using rule 78 (statement -> labeled_statement .)
    CASE            reduce using rule 78 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 78 (statement -> labeled_statement .)
    IF              reduce using rule 78 (statement -> labeled_statement .)
    SWITCH          reduce using rule 78 (statement -> labeled_statement .)
    WHILE           reduce using rule 78 (statement -> labeled_statement .)
    DO              reduce using rule 78 (statement -> labeled_statement .)
    FOR             reduce using rule 78 (statement -> labeled_statement .)
    GOTO            reduce using rule 78 (statement -> labeled_statement .)
    BREAK           reduce using rule 78 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 78 (statement -> labeled_statement .)
    RETURN          reduce using rule 78 (statement -> labeled_statement .)
    PPPRAGMA        reduce using rule 78 (statement -> labeled_statement .)
    _PRAGMA         reduce using rule 78 (statement -> labeled_statement .)
    _STATIC_ASSERT  reduce using rule 78 (statement -> labeled_statement .)
    LBRACE          reduce using rule 78 (statement -> labeled_statement .)
    CONST           reduce using rule 78 (statement -> labeled_statement .)
    RESTRICT        reduce using rule 78 (statement -> labeled_statement .)
    VOLATILE        reduce using rule 78 (statement -> labeled_statement .)
    _ATOMIC         reduce using rule 78 (statement -> labeled_statement .)
    AUTO            reduce using rule 78 (statement -> labeled_statement .)
    REGISTER        reduce using rule 78 (statement -> labeled_statement .)
    STATIC          reduce using rule 78 (statement -> labeled_statement .)
    EXTERN          reduce using rule 78 (statement -> labeled_statement .)
    TYPEDEF         reduce using rule 78 (statement -> labeled_statement .)
    _THREAD_LOCAL   reduce using rule 78 (statement -> labeled_statement .)
    INLINE          reduce using rule 78 (statement -> labeled_statement .)
    _NORETURN       reduce using rule 78 (statement -> labeled_statement .)
    _ALIGNAS        reduce using rule 78 (statement -> labeled_statement .)
    TYPEID          reduce using rule 78 (statement -> labeled_statement .)
    ENUM            reduce using rule 78 (statement -> labeled_statement .)
    VOID            reduce using rule 78 (statement -> labeled_statement .)
    _BOOL           reduce using rule 78 (statement -> labeled_statement .)
    CHAR            reduce using rule 78 (statement -> labeled_statement .)
    SHORT           reduce using rule 78 (statement -> labeled_statement .)
    INT             reduce using rule 78 (statement -> labeled_statement .)
    LONG            reduce using rule 78 (statement -> labeled_statement .)
    FLOAT           reduce using rule 78 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 78 (statement -> labeled_statement .)
    _COMPLEX        reduce using rule 78 (statement -> labeled_statement .)
    SIGNED          reduce using rule 78 (statement -> labeled_statement .)
    UNSIGNED        reduce using rule 78 (statement -> labeled_statement .)
    __INT128        reduce using rule 78 (statement -> labeled_statement .)
    LPAREN          reduce using rule 78 (statement -> labeled_statement .)
    STRUCT          reduce using rule 78 (statement -> labeled_statement .)
    UNION           reduce using rule 78 (statement -> labeled_statement .)
    PLUSPLUS        reduce using rule 78 (statement -> labeled_statement .)
    MINUSMINUS      reduce using rule 78 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 78 (statement -> labeled_statement .)
    _ALIGNOF        reduce using rule 78 (statement -> labeled_statement .)
    AND             reduce using rule 78 (statement -> labeled_statement .)
    TIMES           reduce using rule 78 (statement -> labeled_statement .)
    PLUS            reduce using rule 78 (statement -> labeled_statement .)
    MINUS           reduce using rule 78 (statement -> labeled_statement .)
    NOT             reduce using rule 78 (statement -> labeled_statement .)
    LNOT            reduce using rule 78 (statement -> labeled_statement .)
    OFFSETOF        reduce using rule 78 (statement -> labeled_statement .)
    INT_CONST_DEC   reduce using rule 78 (statement -> labeled_statement .)
    INT_CONST_OCT   reduce using rule 78 (statement -> labeled_statement .)
    INT_CONST_HEX   reduce using rule 78 (statement -> labeled_statement .)
    INT_CONST_BIN   reduce using rule 78 (statement -> labeled_statement .)
    INT_CONST_CHAR  reduce using rule 78 (statement -> labeled_statement .)
    FLOAT_CONST     reduce using rule 78 (statement -> labeled_statement .)
    HEX_FLOAT_CONST reduce using rule 78 (statement -> labeled_statement .)
    CHAR_CONST      reduce using rule 78 (statement -> labeled_statement .)
    WCHAR_CONST     reduce using rule 78 (statement -> labeled_statement .)
    U8CHAR_CONST    reduce using rule 78 (statement -> labeled_statement .)
    U16CHAR_CONST   reduce using rule 78 (statement -> labeled_statement .)
    U32CHAR_CONST   reduce using rule 78 (statement -> labeled_statement .)
    STRING_LITERAL  reduce using rule 78 (statement -> labeled_statement .)
    WSTRING_LITERAL reduce using rule 78 (statement -> labeled_statement .)
    U8STRING_LITERAL reduce using rule 78 (statement -> labeled_statement .)
    U16STRING_LITERAL reduce using rule 78 (statement -> labeled_statement .)
    U32STRING_LITERAL reduce using rule 78 (statement -> labeled_statement .)
    SEMI            reduce using rule 78 (statement -> labeled_statement .)
    RBRACE          reduce using rule 78 (statement -> labeled_statement .)
    ELSE            reduce using rule 78 (statement -> labeled_statement .)


state 226

    (79) statement -> expression_statement .

    ID              reduce using rule 79 (statement -> expression_statement .)
    CASE            reduce using rule 79 (statement -> expression_statement .)
    DEFAULT         reduce using rule 79 (statement -> expression_statement .)
    IF              reduce using rule 79 (statement -> expression_statement .)
    SWITCH          reduce using rule 79 (statement -> expression_statement .)
    WHILE           reduce using rule 79 (statement -> expression_statement .)
    DO              reduce using rule 79 (statement -> expression_statement .)
    FOR             reduce using rule 79 (statement -> expression_statement .)
    GOTO            reduce using rule 79 (statement -> expression_statement .)
    BREAK           reduce using rule 79 (statement -> expression_statement .)
    CONTINUE        reduce using rule 79 (statement -> expression_statement .)
    RETURN          reduce using rule 79 (statement -> expression_statement .)
    PPPRAGMA        reduce using rule 79 (statement -> expression_statement .)
    _PRAGMA         reduce using rule 79 (statement -> expression_statement .)
    _STATIC_ASSERT  reduce using rule 79 (statement -> expression_statement .)
    LBRACE          reduce using rule 79 (statement -> expression_statement .)
    CONST           reduce using rule 79 (statement -> expression_statement .)
    RESTRICT        reduce using rule 79 (statement -> expression_statement .)
    VOLATILE        reduce using rule 79 (statement -> expression_statement .)
    _ATOMIC         reduce using rule 79 (statement -> expression_statement .)
    AUTO            reduce using rule 79 (statement -> expression_statement .)
    REGISTER        reduce using rule 79 (statement -> expression_statement .)
    STATIC          reduce using rule 79 (statement -> expression_statement .)
    EXTERN          reduce using rule 79 (statement -> expression_statement .)
    TYPEDEF         reduce using rule 79 (statement -> expression_statement .)
    _THREAD_LOCAL   reduce using rule 79 (statement -> expression_statement .)
    INLINE          reduce using rule 79 (statement -> expression_statement .)
    _NORETURN       reduce using rule 79 (statement -> expression_statement .)
    _ALIGNAS        reduce using rule 79 (statement -> expression_statement .)
    TYPEID          reduce using rule 79 (statement -> expression_statement .)
    ENUM            reduce using rule 79 (statement -> expression_statement .)
    VOID            reduce using rule 79 (statement -> expression_statement .)
    _BOOL           reduce using rule 79 (statement -> expression_statement .)
    CHAR            reduce using rule 79 (statement -> expression_statement .)
    SHORT           reduce using rule 79 (statement -> expression_statement .)
    INT             reduce using rule 79 (statement -> expression_statement .)
    LONG            reduce using rule 79 (statement -> expression_statement .)
    FLOAT           reduce using rule 79 (statement -> expression_statement .)
    DOUBLE          reduce using rule 79 (statement -> expression_statement .)
    _COMPLEX        reduce using rule 79 (statement -> expression_statement .)
    SIGNED          reduce using rule 79 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 79 (statement -> expression_statement .)
    __INT128        reduce using rule 79 (statement -> expression_statement .)
    LPAREN          reduce using rule 79 (statement -> expression_statement .)
    STRUCT          reduce using rule 79 (statement -> expression_statement .)
    UNION           reduce using rule 79 (statement -> expression_statement .)
    PLUSPLUS        reduce using rule 79 (statement -> expression_statement .)
    MINUSMINUS      reduce using rule 79 (statement -> expression_statement .)
    SIZEOF          reduce using rule 79 (statement -> expression_statement .)
    _ALIGNOF        reduce using rule 79 (statement -> expression_statement .)
    AND             reduce using rule 79 (statement -> expression_statement .)
    TIMES           reduce using rule 79 (statement -> expression_statement .)
    PLUS            reduce using rule 79 (statement -> expression_statement .)
    MINUS           reduce using rule 79 (statement -> expression_statement .)
    NOT             reduce using rule 79 (statement -> expression_statement .)
    LNOT            reduce using rule 79 (statement -> expression_statement .)
    OFFSETOF        reduce using rule 79 (statement -> expression_statement .)
    INT_CONST_DEC   reduce using rule 79 (statement -> expression_statement .)
    INT_CONST_OCT   reduce using rule 79 (statement -> expression_statement .)
    INT_CONST_HEX   reduce using rule 79 (statement -> expression_statement .)
    INT_CONST_BIN   reduce using rule 79 (statement -> expression_statement .)
    INT_CONST_CHAR  reduce using rule 79 (statement -> expression_statement .)
    FLOAT_CONST     reduce using rule 79 (statement -> expression_statement .)
    HEX_FLOAT_CONST reduce using rule 79 (statement -> expression_statement .)
    CHAR_CONST      reduce using rule 79 (statement -> expression_statement .)
    WCHAR_CONST     reduce using rule 79 (statement -> expression_statement .)
    U8CHAR_CONST    reduce using rule 79 (statement -> expression_statement .)
    U16CHAR_CONST   reduce using rule 79 (statement -> expression_statement .)
    U32CHAR_CONST   reduce using rule 79 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 79 (statement -> expression_statement .)
    WSTRING_LITERAL reduce using rule 79 (statement -> expression_statement .)
    U8STRING_LITERAL reduce using rule 79 (statement -> expression_statement .)
    U16STRING_LITERAL reduce using rule 79 (statement -> expression_statement .)
    U32STRING_LITERAL reduce using rule 79 (statement -> expression_statement .)
    SEMI            reduce using rule 79 (statement -> expression_statement .)
    RBRACE          reduce using rule 79 (statement -> expression_statement .)
    ELSE            reduce using rule 79 (statement -> expression_statement .)


state 227

    (80) statement -> compound_statement .

    ID              reduce using rule 80 (statement -> compound_statement .)
    CASE            reduce using rule 80 (statement -> compound_statement .)
    DEFAULT         reduce using rule 80 (statement -> compound_statement .)
    IF              reduce using rule 80 (statement -> compound_statement .)
    SWITCH          reduce using rule 80 (statement -> compound_statement .)
    WHILE           reduce using rule 80 (statement -> compound_statement .)
    DO              reduce using rule 80 (statement -> compound_statement .)
    FOR             reduce using rule 80 (statement -> compound_statement .)
    GOTO            reduce using rule 80 (statement -> compound_statement .)
    BREAK           reduce using rule 80 (statement -> compound_statement .)
    CONTINUE        reduce using rule 80 (statement -> compound_statement .)
    RETURN          reduce using rule 80 (statement -> compound_statement .)
    PPPRAGMA        reduce using rule 80 (statement -> compound_statement .)
    _PRAGMA         reduce using rule 80 (statement -> compound_statement .)
    _STATIC_ASSERT  reduce using rule 80 (statement -> compound_statement .)
    LBRACE          reduce using rule 80 (statement -> compound_statement .)
    CONST           reduce using rule 80 (statement -> compound_statement .)
    RESTRICT        reduce using rule 80 (statement -> compound_statement .)
    VOLATILE        reduce using rule 80 (statement -> compound_statement .)
    _ATOMIC         reduce using rule 80 (statement -> compound_statement .)
    AUTO            reduce using rule 80 (statement -> compound_statement .)
    REGISTER        reduce using rule 80 (statement -> compound_statement .)
    STATIC          reduce using rule 80 (statement -> compound_statement .)
    EXTERN          reduce using rule 80 (statement -> compound_statement .)
    TYPEDEF         reduce using rule 80 (statement -> compound_statement .)
    _THREAD_LOCAL   reduce using rule 80 (statement -> compound_statement .)
    INLINE          reduce using rule 80 (statement -> compound_statement .)
    _NORETURN       reduce using rule 80 (statement -> compound_statement .)
    _ALIGNAS        reduce using rule 80 (statement -> compound_statement .)
    TYPEID          reduce using rule 80 (statement -> compound_statement .)
    ENUM            reduce using rule 80 (statement -> compound_statement .)
    VOID            reduce using rule 80 (statement -> compound_statement .)
    _BOOL           reduce using rule 80 (statement -> compound_statement .)
    CHAR            reduce using rule 80 (statement -> compound_statement .)
    SHORT           reduce using rule 80 (statement -> compound_statement .)
    INT             reduce using rule 80 (statement -> compound_statement .)
    LONG            reduce using rule 80 (statement -> compound_statement .)
    FLOAT           reduce using rule 80 (statement -> compound_statement .)
    DOUBLE          reduce using rule 80 (statement -> compound_statement .)
    _COMPLEX        reduce using rule 80 (statement -> compound_statement .)
    SIGNED          reduce using rule 80 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 80 (statement -> compound_statement .)
    __INT128        reduce using rule 80 (statement -> compound_statement .)
    LPAREN          reduce using rule 80 (statement -> compound_statement .)
    STRUCT          reduce using rule 80 (statement -> compound_statement .)
    UNION           reduce using rule 80 (statement -> compound_statement .)
    PLUSPLUS        reduce using rule 80 (statement -> compound_statement .)
    MINUSMINUS      reduce using rule 80 (statement -> compound_statement .)
    SIZEOF          reduce using rule 80 (statement -> compound_statement .)
    _ALIGNOF        reduce using rule 80 (statement -> compound_statement .)
    AND             reduce using rule 80 (statement -> compound_statement .)
    TIMES           reduce using rule 80 (statement -> compound_statement .)
    PLUS            reduce using rule 80 (statement -> compound_statement .)
    MINUS           reduce using rule 80 (statement -> compound_statement .)
    NOT             reduce using rule 80 (statement -> compound_statement .)
    LNOT            reduce using rule 80 (statement -> compound_statement .)
    OFFSETOF        reduce using rule 80 (statement -> compound_statement .)
    INT_CONST_DEC   reduce using rule 80 (statement -> compound_statement .)
    INT_CONST_OCT   reduce using rule 80 (statement -> compound_statement .)
    INT_CONST_HEX   reduce using rule 80 (statement -> compound_statement .)
    INT_CONST_BIN   reduce using rule 80 (statement -> compound_statement .)
    INT_CONST_CHAR  reduce using rule 80 (statement -> compound_statement .)
    FLOAT_CONST     reduce using rule 80 (statement -> compound_statement .)
    HEX_FLOAT_CONST reduce using rule 80 (statement -> compound_statement .)
    CHAR_CONST      reduce using rule 80 (statement -> compound_statement .)
    WCHAR_CONST     reduce using rule 80 (statement -> compound_statement .)
    U8CHAR_CONST    reduce using rule 80 (statement -> compound_statement .)
    U16CHAR_CONST   reduce using rule 80 (statement -> compound_statement .)
    U32CHAR_CONST   reduce using rule 80 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 80 (statement -> compound_statement .)
    WSTRING_LITERAL reduce using rule 80 (statement -> compound_statement .)
    U8STRING_LITERAL reduce using rule 80 (statement -> compound_statement .)
    U16STRING_LITERAL reduce using rule 80 (statement -> compound_statement .)
    U32STRING_LITERAL reduce using rule 80 (statement -> compound_statement .)
    SEMI            reduce using rule 80 (statement -> compound_statement .)
    RBRACE          reduce using rule 80 (statement -> compound_statement .)
    ELSE            reduce using rule 80 (statement -> compound_statement .)


state 228

    (81) statement -> selection_statement .

    ID              reduce using rule 81 (statement -> selection_statement .)
    CASE            reduce using rule 81 (statement -> selection_statement .)
    DEFAULT         reduce using rule 81 (statement -> selection_statement .)
    IF              reduce using rule 81 (statement -> selection_statement .)
    SWITCH          reduce using rule 81 (statement -> selection_statement .)
    WHILE           reduce using rule 81 (statement -> selection_statement .)
    DO              reduce using rule 81 (statement -> selection_statement .)
    FOR             reduce using rule 81 (statement -> selection_statement .)
    GOTO            reduce using rule 81 (statement -> selection_statement .)
    BREAK           reduce using rule 81 (statement -> selection_statement .)
    CONTINUE        reduce using rule 81 (statement -> selection_statement .)
    RETURN          reduce using rule 81 (statement -> selection_statement .)
    PPPRAGMA        reduce using rule 81 (statement -> selection_statement .)
    _PRAGMA         reduce using rule 81 (statement -> selection_statement .)
    _STATIC_ASSERT  reduce using rule 81 (statement -> selection_statement .)
    LBRACE          reduce using rule 81 (statement -> selection_statement .)
    CONST           reduce using rule 81 (statement -> selection_statement .)
    RESTRICT        reduce using rule 81 (statement -> selection_statement .)
    VOLATILE        reduce using rule 81 (statement -> selection_statement .)
    _ATOMIC         reduce using rule 81 (statement -> selection_statement .)
    AUTO            reduce using rule 81 (statement -> selection_statement .)
    REGISTER        reduce using rule 81 (statement -> selection_statement .)
    STATIC          reduce using rule 81 (statement -> selection_statement .)
    EXTERN          reduce using rule 81 (statement -> selection_statement .)
    TYPEDEF         reduce using rule 81 (statement -> selection_statement .)
    _THREAD_LOCAL   reduce using rule 81 (statement -> selection_statement .)
    INLINE          reduce using rule 81 (statement -> selection_statement .)
    _NORETURN       reduce using rule 81 (statement -> selection_statement .)
    _ALIGNAS        reduce using rule 81 (statement -> selection_statement .)
    TYPEID          reduce using rule 81 (statement -> selection_statement .)
    ENUM            reduce using rule 81 (statement -> selection_statement .)
    VOID            reduce using rule 81 (statement -> selection_statement .)
    _BOOL           reduce using rule 81 (statement -> selection_statement .)
    CHAR            reduce using rule 81 (statement -> selection_statement .)
    SHORT           reduce using rule 81 (statement -> selection_statement .)
    INT             reduce using rule 81 (statement -> selection_statement .)
    LONG            reduce using rule 81 (statement -> selection_statement .)
    FLOAT           reduce using rule 81 (statement -> selection_statement .)
    DOUBLE          reduce using rule 81 (statement -> selection_statement .)
    _COMPLEX        reduce using rule 81 (statement -> selection_statement .)
    SIGNED          reduce using rule 81 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 81 (statement -> selection_statement .)
    __INT128        reduce using rule 81 (statement -> selection_statement .)
    LPAREN          reduce using rule 81 (statement -> selection_statement .)
    STRUCT          reduce using rule 81 (statement -> selection_statement .)
    UNION           reduce using rule 81 (statement -> selection_statement .)
    PLUSPLUS        reduce using rule 81 (statement -> selection_statement .)
    MINUSMINUS      reduce using rule 81 (statement -> selection_statement .)
    SIZEOF          reduce using rule 81 (statement -> selection_statement .)
    _ALIGNOF        reduce using rule 81 (statement -> selection_statement .)
    AND             reduce using rule 81 (statement -> selection_statement .)
    TIMES           reduce using rule 81 (statement -> selection_statement .)
    PLUS            reduce using rule 81 (statement -> selection_statement .)
    MINUS           reduce using rule 81 (statement -> selection_statement .)
    NOT             reduce using rule 81 (statement -> selection_statement .)
    LNOT            reduce using rule 81 (statement -> selection_statement .)
    OFFSETOF        reduce using rule 81 (statement -> selection_statement .)
    INT_CONST_DEC   reduce using rule 81 (statement -> selection_statement .)
    INT_CONST_OCT   reduce using rule 81 (statement -> selection_statement .)
    INT_CONST_HEX   reduce using rule 81 (statement -> selection_statement .)
    INT_CONST_BIN   reduce using rule 81 (statement -> selection_statement .)
    INT_CONST_CHAR  reduce using rule 81 (statement -> selection_statement .)
    FLOAT_CONST     reduce using rule 81 (statement -> selection_statement .)
    HEX_FLOAT_CONST reduce using rule 81 (statement -> selection_statement .)
    CHAR_CONST      reduce using rule 81 (statement -> selection_statement .)
    WCHAR_CONST     reduce using rule 81 (statement -> selection_statement .)
    U8CHAR_CONST    reduce using rule 81 (statement -> selection_statement .)
    U16CHAR_CONST   reduce using rule 81 (statement -> selection_statement .)
    U32CHAR_CONST   reduce using rule 81 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 81 (statement -> selection_statement .)
    WSTRING_LITERAL reduce using rule 81 (statement -> selection_statement .)
    U8STRING_LITERAL reduce using rule 81 (statement -> selection_statement .)
    U16STRING_LITERAL reduce using rule 81 (statement -> selection_statement .)
    U32STRING_LITERAL reduce using rule 81 (statement -> selection_statement .)
    SEMI            reduce using rule 81 (statement -> selection_statement .)
    RBRACE          reduce using rule 81 (statement -> selection_statement .)
    ELSE            reduce using rule 81 (statement -> selection_statement .)


state 229

    (82) statement -> iteration_statement .

    ID              reduce using rule 82 (statement -> iteration_statement .)
    CASE            reduce using rule 82 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 82 (statement -> iteration_statement .)
    IF              reduce using rule 82 (statement -> iteration_statement .)
    SWITCH          reduce using rule 82 (statement -> iteration_statement .)
    WHILE           reduce using rule 82 (statement -> iteration_statement .)
    DO              reduce using rule 82 (statement -> iteration_statement .)
    FOR             reduce using rule 82 (statement -> iteration_statement .)
    GOTO            reduce using rule 82 (statement -> iteration_statement .)
    BREAK           reduce using rule 82 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 82 (statement -> iteration_statement .)
    RETURN          reduce using rule 82 (statement -> iteration_statement .)
    PPPRAGMA        reduce using rule 82 (statement -> iteration_statement .)
    _PRAGMA         reduce using rule 82 (statement -> iteration_statement .)
    _STATIC_ASSERT  reduce using rule 82 (statement -> iteration_statement .)
    LBRACE          reduce using rule 82 (statement -> iteration_statement .)
    CONST           reduce using rule 82 (statement -> iteration_statement .)
    RESTRICT        reduce using rule 82 (statement -> iteration_statement .)
    VOLATILE        reduce using rule 82 (statement -> iteration_statement .)
    _ATOMIC         reduce using rule 82 (statement -> iteration_statement .)
    AUTO            reduce using rule 82 (statement -> iteration_statement .)
    REGISTER        reduce using rule 82 (statement -> iteration_statement .)
    STATIC          reduce using rule 82 (statement -> iteration_statement .)
    EXTERN          reduce using rule 82 (statement -> iteration_statement .)
    TYPEDEF         reduce using rule 82 (statement -> iteration_statement .)
    _THREAD_LOCAL   reduce using rule 82 (statement -> iteration_statement .)
    INLINE          reduce using rule 82 (statement -> iteration_statement .)
    _NORETURN       reduce using rule 82 (statement -> iteration_statement .)
    _ALIGNAS        reduce using rule 82 (statement -> iteration_statement .)
    TYPEID          reduce using rule 82 (statement -> iteration_statement .)
    ENUM            reduce using rule 82 (statement -> iteration_statement .)
    VOID            reduce using rule 82 (statement -> iteration_statement .)
    _BOOL           reduce using rule 82 (statement -> iteration_statement .)
    CHAR            reduce using rule 82 (statement -> iteration_statement .)
    SHORT           reduce using rule 82 (statement -> iteration_statement .)
    INT             reduce using rule 82 (statement -> iteration_statement .)
    LONG            reduce using rule 82 (statement -> iteration_statement .)
    FLOAT           reduce using rule 82 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 82 (statement -> iteration_statement .)
    _COMPLEX        reduce using rule 82 (statement -> iteration_statement .)
    SIGNED          reduce using rule 82 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 82 (statement -> iteration_statement .)
    __INT128        reduce using rule 82 (statement -> iteration_statement .)
    LPAREN          reduce using rule 82 (statement -> iteration_statement .)
    STRUCT          reduce using rule 82 (statement -> iteration_statement .)
    UNION           reduce using rule 82 (statement -> iteration_statement .)
    PLUSPLUS        reduce using rule 82 (statement -> iteration_statement .)
    MINUSMINUS      reduce using rule 82 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 82 (statement -> iteration_statement .)
    _ALIGNOF        reduce using rule 82 (statement -> iteration_statement .)
    AND             reduce using rule 82 (statement -> iteration_statement .)
    TIMES           reduce using rule 82 (statement -> iteration_statement .)
    PLUS            reduce using rule 82 (statement -> iteration_statement .)
    MINUS           reduce using rule 82 (statement -> iteration_statement .)
    NOT             reduce using rule 82 (statement -> iteration_statement .)
    LNOT            reduce using rule 82 (statement -> iteration_statement .)
    OFFSETOF        reduce using rule 82 (statement -> iteration_statement .)
    INT_CONST_DEC   reduce using rule 82 (statement -> iteration_statement .)
    INT_CONST_OCT   reduce using rule 82 (statement -> iteration_statement .)
    INT_CONST_HEX   reduce using rule 82 (statement -> iteration_statement .)
    INT_CONST_BIN   reduce using rule 82 (statement -> iteration_statement .)
    INT_CONST_CHAR  reduce using rule 82 (statement -> iteration_statement .)
    FLOAT_CONST     reduce using rule 82 (statement -> iteration_statement .)
    HEX_FLOAT_CONST reduce using rule 82 (statement -> iteration_statement .)
    CHAR_CONST      reduce using rule 82 (statement -> iteration_statement .)
    WCHAR_CONST     reduce using rule 82 (statement -> iteration_statement .)
    U8CHAR_CONST    reduce using rule 82 (statement -> iteration_statement .)
    U16CHAR_CONST   reduce using rule 82 (statement -> iteration_statement .)
    U32CHAR_CONST   reduce using rule 82 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 82 (statement -> iteration_statement .)
    WSTRING_LITERAL reduce using rule 82 (statement -> iteration_statement .)
    U8STRING_LITERAL reduce using rule 82 (statement -> iteration_statement .)
    U16STRING_LITERAL reduce using rule 82 (statement -> iteration_statement .)
    U32STRING_LITERAL reduce using rule 82 (statement -> iteration_statement .)
    SEMI            reduce using rule 82 (statement -> iteration_statement .)
    RBRACE          reduce using rule 82 (statement -> iteration_statement .)
    ELSE            reduce using rule 82 (statement -> iteration_statement .)


state 230

    (83) statement -> jump_statement .

    ID              reduce using rule 83 (statement -> jump_statement .)
    CASE            reduce using rule 83 (statement -> jump_statement .)
    DEFAULT         reduce using rule 83 (statement -> jump_statement .)
    IF              reduce using rule 83 (statement -> jump_statement .)
    SWITCH          reduce using rule 83 (statement -> jump_statement .)
    WHILE           reduce using rule 83 (statement -> jump_statement .)
    DO              reduce using rule 83 (statement -> jump_statement .)
    FOR             reduce using rule 83 (statement -> jump_statement .)
    GOTO            reduce using rule 83 (statement -> jump_statement .)
    BREAK           reduce using rule 83 (statement -> jump_statement .)
    CONTINUE        reduce using rule 83 (statement -> jump_statement .)
    RETURN          reduce using rule 83 (statement -> jump_statement .)
    PPPRAGMA        reduce using rule 83 (statement -> jump_statement .)
    _PRAGMA         reduce using rule 83 (statement -> jump_statement .)
    _STATIC_ASSERT  reduce using rule 83 (statement -> jump_statement .)
    LBRACE          reduce using rule 83 (statement -> jump_statement .)
    CONST           reduce using rule 83 (statement -> jump_statement .)
    RESTRICT        reduce using rule 83 (statement -> jump_statement .)
    VOLATILE        reduce using rule 83 (statement -> jump_statement .)
    _ATOMIC         reduce using rule 83 (statement -> jump_statement .)
    AUTO            reduce using rule 83 (statement -> jump_statement .)
    REGISTER        reduce using rule 83 (statement -> jump_statement .)
    STATIC          reduce using rule 83 (statement -> jump_statement .)
    EXTERN          reduce using rule 83 (statement -> jump_statement .)
    TYPEDEF         reduce using rule 83 (statement -> jump_statement .)
    _THREAD_LOCAL   reduce using rule 83 (statement -> jump_statement .)
    INLINE          reduce using rule 83 (statement -> jump_statement .)
    _NORETURN       reduce using rule 83 (statement -> jump_statement .)
    _ALIGNAS        reduce using rule 83 (statement -> jump_statement .)
    TYPEID          reduce using rule 83 (statement -> jump_statement .)
    ENUM            reduce using rule 83 (statement -> jump_statement .)
    VOID            reduce using rule 83 (statement -> jump_statement .)
    _BOOL           reduce using rule 83 (statement -> jump_statement .)
    CHAR            reduce using rule 83 (statement -> jump_statement .)
    SHORT           reduce using rule 83 (statement -> jump_statement .)
    INT             reduce using rule 83 (statement -> jump_statement .)
    LONG            reduce using rule 83 (statement -> jump_statement .)
    FLOAT           reduce using rule 83 (statement -> jump_statement .)
    DOUBLE          reduce using rule 83 (statement -> jump_statement .)
    _COMPLEX        reduce using rule 83 (statement -> jump_statement .)
    SIGNED          reduce using rule 83 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 83 (statement -> jump_statement .)
    __INT128        reduce using rule 83 (statement -> jump_statement .)
    LPAREN          reduce using rule 83 (statement -> jump_statement .)
    STRUCT          reduce using rule 83 (statement -> jump_statement .)
    UNION           reduce using rule 83 (statement -> jump_statement .)
    PLUSPLUS        reduce using rule 83 (statement -> jump_statement .)
    MINUSMINUS      reduce using rule 83 (statement -> jump_statement .)
    SIZEOF          reduce using rule 83 (statement -> jump_statement .)
    _ALIGNOF        reduce using rule 83 (statement -> jump_statement .)
    AND             reduce using rule 83 (statement -> jump_statement .)
    TIMES           reduce using rule 83 (statement -> jump_statement .)
    PLUS            reduce using rule 83 (statement -> jump_statement .)
    MINUS           reduce using rule 83 (statement -> jump_statement .)
    NOT             reduce using rule 83 (statement -> jump_statement .)
    LNOT            reduce using rule 83 (statement -> jump_statement .)
    OFFSETOF        reduce using rule 83 (statement -> jump_statement .)
    INT_CONST_DEC   reduce using rule 83 (statement -> jump_statement .)
    INT_CONST_OCT   reduce using rule 83 (statement -> jump_statement .)
    INT_CONST_HEX   reduce using rule 83 (statement -> jump_statement .)
    INT_CONST_BIN   reduce using rule 83 (statement -> jump_statement .)
    INT_CONST_CHAR  reduce using rule 83 (statement -> jump_statement .)
    FLOAT_CONST     reduce using rule 83 (statement -> jump_statement .)
    HEX_FLOAT_CONST reduce using rule 83 (statement -> jump_statement .)
    CHAR_CONST      reduce using rule 83 (statement -> jump_statement .)
    WCHAR_CONST     reduce using rule 83 (statement -> jump_statement .)
    U8CHAR_CONST    reduce using rule 83 (statement -> jump_statement .)
    U16CHAR_CONST   reduce using rule 83 (statement -> jump_statement .)
    U32CHAR_CONST   reduce using rule 83 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 83 (statement -> jump_statement .)
    WSTRING_LITERAL reduce using rule 83 (statement -> jump_statement .)
    U8STRING_LITERAL reduce using rule 83 (statement -> jump_statement .)
    U16STRING_LITERAL reduce using rule 83 (statement -> jump_statement .)
    U32STRING_LITERAL reduce using rule 83 (statement -> jump_statement .)
    SEMI            reduce using rule 83 (statement -> jump_statement .)
    RBRACE          reduce using rule 83 (statement -> jump_statement .)
    ELSE            reduce using rule 83 (statement -> jump_statement .)


state 231

    (84) statement -> pppragma_directive .

    ID              reduce using rule 84 (statement -> pppragma_directive .)
    CASE            reduce using rule 84 (statement -> pppragma_directive .)
    DEFAULT         reduce using rule 84 (statement -> pppragma_directive .)
    IF              reduce using rule 84 (statement -> pppragma_directive .)
    SWITCH          reduce using rule 84 (statement -> pppragma_directive .)
    WHILE           reduce using rule 84 (statement -> pppragma_directive .)
    DO              reduce using rule 84 (statement -> pppragma_directive .)
    FOR             reduce using rule 84 (statement -> pppragma_directive .)
    GOTO            reduce using rule 84 (statement -> pppragma_directive .)
    BREAK           reduce using rule 84 (statement -> pppragma_directive .)
    CONTINUE        reduce using rule 84 (statement -> pppragma_directive .)
    RETURN          reduce using rule 84 (statement -> pppragma_directive .)
    PPPRAGMA        reduce using rule 84 (statement -> pppragma_directive .)
    _PRAGMA         reduce using rule 84 (statement -> pppragma_directive .)
    _STATIC_ASSERT  reduce using rule 84 (statement -> pppragma_directive .)
    LBRACE          reduce using rule 84 (statement -> pppragma_directive .)
    CONST           reduce using rule 84 (statement -> pppragma_directive .)
    RESTRICT        reduce using rule 84 (statement -> pppragma_directive .)
    VOLATILE        reduce using rule 84 (statement -> pppragma_directive .)
    _ATOMIC         reduce using rule 84 (statement -> pppragma_directive .)
    AUTO            reduce using rule 84 (statement -> pppragma_directive .)
    REGISTER        reduce using rule 84 (statement -> pppragma_directive .)
    STATIC          reduce using rule 84 (statement -> pppragma_directive .)
    EXTERN          reduce using rule 84 (statement -> pppragma_directive .)
    TYPEDEF         reduce using rule 84 (statement -> pppragma_directive .)
    _THREAD_LOCAL   reduce using rule 84 (statement -> pppragma_directive .)
    INLINE          reduce using rule 84 (statement -> pppragma_directive .)
    _NORETURN       reduce using rule 84 (statement -> pppragma_directive .)
    _ALIGNAS        reduce using rule 84 (statement -> pppragma_directive .)
    TYPEID          reduce using rule 84 (statement -> pppragma_directive .)
    ENUM            reduce using rule 84 (statement -> pppragma_directive .)
    VOID            reduce using rule 84 (statement -> pppragma_directive .)
    _BOOL           reduce using rule 84 (statement -> pppragma_directive .)
    CHAR            reduce using rule 84 (statement -> pppragma_directive .)
    SHORT           reduce using rule 84 (statement -> pppragma_directive .)
    INT             reduce using rule 84 (statement -> pppragma_directive .)
    LONG            reduce using rule 84 (statement -> pppragma_directive .)
    FLOAT           reduce using rule 84 (statement -> pppragma_directive .)
    DOUBLE          reduce using rule 84 (statement -> pppragma_directive .)
    _COMPLEX        reduce using rule 84 (statement -> pppragma_directive .)
    SIGNED          reduce using rule 84 (statement -> pppragma_directive .)
    UNSIGNED        reduce using rule 84 (statement -> pppragma_directive .)
    __INT128        reduce using rule 84 (statement -> pppragma_directive .)
    LPAREN          reduce using rule 84 (statement -> pppragma_directive .)
    STRUCT          reduce using rule 84 (statement -> pppragma_directive .)
    UNION           reduce using rule 84 (statement -> pppragma_directive .)
    PLUSPLUS        reduce using rule 84 (statement -> pppragma_directive .)
    MINUSMINUS      reduce using rule 84 (statement -> pppragma_directive .)
    SIZEOF          reduce using rule 84 (statement -> pppragma_directive .)
    _ALIGNOF        reduce using rule 84 (statement -> pppragma_directive .)
    AND             reduce using rule 84 (statement -> pppragma_directive .)
    TIMES           reduce using rule 84 (statement -> pppragma_directive .)
    PLUS            reduce using rule 84 (statement -> pppragma_directive .)
    MINUS           reduce using rule 84 (statement -> pppragma_directive .)
    NOT             reduce using rule 84 (statement -> pppragma_directive .)
    LNOT            reduce using rule 84 (statement -> pppragma_directive .)
    OFFSETOF        reduce using rule 84 (statement -> pppragma_directive .)
    INT_CONST_DEC   reduce using rule 84 (statement -> pppragma_directive .)
    INT_CONST_OCT   reduce using rule 84 (statement -> pppragma_directive .)
    INT_CONST_HEX   reduce using rule 84 (statement -> pppragma_directive .)
    INT_CONST_BIN   reduce using rule 84 (statement -> pppragma_directive .)
    INT_CONST_CHAR  reduce using rule 84 (statement -> pppragma_directive .)
    FLOAT_CONST     reduce using rule 84 (statement -> pppragma_directive .)
    HEX_FLOAT_CONST reduce using rule 84 (statement -> pppragma_directive .)
    CHAR_CONST      reduce using rule 84 (statement -> pppragma_directive .)
    WCHAR_CONST     reduce using rule 84 (statement -> pppragma_directive .)
    U8CHAR_CONST    reduce using rule 84 (statement -> pppragma_directive .)
    U16CHAR_CONST   reduce using rule 84 (statement -> pppragma_directive .)
    U32CHAR_CONST   reduce using rule 84 (statement -> pppragma_directive .)
    STRING_LITERAL  reduce using rule 84 (statement -> pppragma_directive .)
    WSTRING_LITERAL reduce using rule 84 (statement -> pppragma_directive .)
    U8STRING_LITERAL reduce using rule 84 (statement -> pppragma_directive .)
    U16STRING_LITERAL reduce using rule 84 (statement -> pppragma_directive .)
    U32STRING_LITERAL reduce using rule 84 (statement -> pppragma_directive .)
    SEMI            reduce using rule 84 (statement -> pppragma_directive .)
    RBRACE          reduce using rule 84 (statement -> pppragma_directive .)


state 232

    (85) statement -> static_assert .

    ID              reduce using rule 85 (statement -> static_assert .)
    CASE            reduce using rule 85 (statement -> static_assert .)
    DEFAULT         reduce using rule 85 (statement -> static_assert .)
    IF              reduce using rule 85 (statement -> static_assert .)
    SWITCH          reduce using rule 85 (statement -> static_assert .)
    WHILE           reduce using rule 85 (statement -> static_assert .)
    DO              reduce using rule 85 (statement -> static_assert .)
    FOR             reduce using rule 85 (statement -> static_assert .)
    GOTO            reduce using rule 85 (statement -> static_assert .)
    BREAK           reduce using rule 85 (statement -> static_assert .)
    CONTINUE        reduce using rule 85 (statement -> static_assert .)
    RETURN          reduce using rule 85 (statement -> static_assert .)
    PPPRAGMA        reduce using rule 85 (statement -> static_assert .)
    _PRAGMA         reduce using rule 85 (statement -> static_assert .)
    _STATIC_ASSERT  reduce using rule 85 (statement -> static_assert .)
    LBRACE          reduce using rule 85 (statement -> static_assert .)
    CONST           reduce using rule 85 (statement -> static_assert .)
    RESTRICT        reduce using rule 85 (statement -> static_assert .)
    VOLATILE        reduce using rule 85 (statement -> static_assert .)
    _ATOMIC         reduce using rule 85 (statement -> static_assert .)
    AUTO            reduce using rule 85 (statement -> static_assert .)
    REGISTER        reduce using rule 85 (statement -> static_assert .)
    STATIC          reduce using rule 85 (statement -> static_assert .)
    EXTERN          reduce using rule 85 (statement -> static_assert .)
    TYPEDEF         reduce using rule 85 (statement -> static_assert .)
    _THREAD_LOCAL   reduce using rule 85 (statement -> static_assert .)
    INLINE          reduce using rule 85 (statement -> static_assert .)
    _NORETURN       reduce using rule 85 (statement -> static_assert .)
    _ALIGNAS        reduce using rule 85 (statement -> static_assert .)
    TYPEID          reduce using rule 85 (statement -> static_assert .)
    ENUM            reduce using rule 85 (statement -> static_assert .)
    VOID            reduce using rule 85 (statement -> static_assert .)
    _BOOL           reduce using rule 85 (statement -> static_assert .)
    CHAR            reduce using rule 85 (statement -> static_assert .)
    SHORT           reduce using rule 85 (statement -> static_assert .)
    INT             reduce using rule 85 (statement -> static_assert .)
    LONG            reduce using rule 85 (statement -> static_assert .)
    FLOAT           reduce using rule 85 (statement -> static_assert .)
    DOUBLE          reduce using rule 85 (statement -> static_assert .)
    _COMPLEX        reduce using rule 85 (statement -> static_assert .)
    SIGNED          reduce using rule 85 (statement -> static_assert .)
    UNSIGNED        reduce using rule 85 (statement -> static_assert .)
    __INT128        reduce using rule 85 (statement -> static_assert .)
    LPAREN          reduce using rule 85 (statement -> static_assert .)
    STRUCT          reduce using rule 85 (statement -> static_assert .)
    UNION           reduce using rule 85 (statement -> static_assert .)
    PLUSPLUS        reduce using rule 85 (statement -> static_assert .)
    MINUSMINUS      reduce using rule 85 (statement -> static_assert .)
    SIZEOF          reduce using rule 85 (statement -> static_assert .)
    _ALIGNOF        reduce using rule 85 (statement -> static_assert .)
    AND             reduce using rule 85 (statement -> static_assert .)
    TIMES           reduce using rule 85 (statement -> static_assert .)
    PLUS            reduce using rule 85 (statement -> static_assert .)
    MINUS           reduce using rule 85 (statement -> static_assert .)
    NOT             reduce using rule 85 (statement -> static_assert .)
    LNOT            reduce using rule 85 (statement -> static_assert .)
    OFFSETOF        reduce using rule 85 (statement -> static_assert .)
    INT_CONST_DEC   reduce using rule 85 (statement -> static_assert .)
    INT_CONST_OCT   reduce using rule 85 (statement -> static_assert .)
    INT_CONST_HEX   reduce using rule 85 (statement -> static_assert .)
    INT_CONST_BIN   reduce using rule 85 (statement -> static_assert .)
    INT_CONST_CHAR  reduce using rule 85 (statement -> static_assert .)
    FLOAT_CONST     reduce using rule 85 (statement -> static_assert .)
    HEX_FLOAT_CONST reduce using rule 85 (statement -> static_assert .)
    CHAR_CONST      reduce using rule 85 (statement -> static_assert .)
    WCHAR_CONST     reduce using rule 85 (statement -> static_assert .)
    U8CHAR_CONST    reduce using rule 85 (statement -> static_assert .)
    U16CHAR_CONST   reduce using rule 85 (statement -> static_assert .)
    U32CHAR_CONST   reduce using rule 85 (statement -> static_assert .)
    STRING_LITERAL  reduce using rule 85 (statement -> static_assert .)
    WSTRING_LITERAL reduce using rule 85 (statement -> static_assert .)
    U8STRING_LITERAL reduce using rule 85 (statement -> static_assert .)
    U16STRING_LITERAL reduce using rule 85 (statement -> static_assert .)
    U32STRING_LITERAL reduce using rule 85 (statement -> static_assert .)
    SEMI            reduce using rule 85 (statement -> static_assert .)
    RBRACE          reduce using rule 85 (statement -> static_assert .)
    ELSE            reduce using rule 85 (statement -> static_assert .)


state 233

    (222) labeled_statement -> ID . COLON pragmacomp_or_statement
    (315) identifier -> ID .

    COLON           shift and go to state 358
    LBRACKET        reduce using rule 315 (identifier -> ID .)
    LPAREN          reduce using rule 315 (identifier -> ID .)
    PERIOD          reduce using rule 315 (identifier -> ID .)
    ARROW           reduce using rule 315 (identifier -> ID .)
    PLUSPLUS        reduce using rule 315 (identifier -> ID .)
    MINUSMINUS      reduce using rule 315 (identifier -> ID .)
    EQUALS          reduce using rule 315 (identifier -> ID .)
    XOREQUAL        reduce using rule 315 (identifier -> ID .)
    TIMESEQUAL      reduce using rule 315 (identifier -> ID .)
    DIVEQUAL        reduce using rule 315 (identifier -> ID .)
    MODEQUAL        reduce using rule 315 (identifier -> ID .)
    PLUSEQUAL       reduce using rule 315 (identifier -> ID .)
    MINUSEQUAL      reduce using rule 315 (identifier -> ID .)
    LSHIFTEQUAL     reduce using rule 315 (identifier -> ID .)
    RSHIFTEQUAL     reduce using rule 315 (identifier -> ID .)
    ANDEQUAL        reduce using rule 315 (identifier -> ID .)
    OREQUAL         reduce using rule 315 (identifier -> ID .)
    CONDOP          reduce using rule 315 (identifier -> ID .)
    TIMES           reduce using rule 315 (identifier -> ID .)
    DIVIDE          reduce using rule 315 (identifier -> ID .)
    MOD             reduce using rule 315 (identifier -> ID .)
    PLUS            reduce using rule 315 (identifier -> ID .)
    MINUS           reduce using rule 315 (identifier -> ID .)
    RSHIFT          reduce using rule 315 (identifier -> ID .)
    LSHIFT          reduce using rule 315 (identifier -> ID .)
    LT              reduce using rule 315 (identifier -> ID .)
    LE              reduce using rule 315 (identifier -> ID .)
    GE              reduce using rule 315 (identifier -> ID .)
    GT              reduce using rule 315 (identifier -> ID .)
    EQ              reduce using rule 315 (identifier -> ID .)
    NE              reduce using rule 315 (identifier -> ID .)
    AND             reduce using rule 315 (identifier -> ID .)
    OR              reduce using rule 315 (identifier -> ID .)
    XOR             reduce using rule 315 (identifier -> ID .)
    LAND            reduce using rule 315 (identifier -> ID .)
    LOR             reduce using rule 315 (identifier -> ID .)
    COMMA           reduce using rule 315 (identifier -> ID .)
    SEMI            reduce using rule 315 (identifier -> ID .)


state 234

    (223) labeled_statement -> CASE . constant_expression COLON pragmacomp_or_statement
    (255) constant_expression -> . conditional_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    constant_expression            shift and go to state 359
    conditional_expression         shift and go to state 144
    binary_expression              shift and go to state 145
    cast_expression                shift and go to state 146
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 235

    (224) labeled_statement -> DEFAULT . COLON pragmacomp_or_statement

    COLON           shift and go to state 360


state 236

    (237) expression_statement -> expression_opt . SEMI

    SEMI            shift and go to state 361


state 237

    (225) selection_statement -> IF . LPAREN expression RPAREN pragmacomp_or_statement
    (226) selection_statement -> IF . LPAREN expression RPAREN statement ELSE pragmacomp_or_statement

    LPAREN          shift and go to state 362


state 238

    (240) assignment_expression -> LPAREN . compound_statement RPAREN
    (302) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list COMMA brace_close
    (278) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (308) primary_expression -> LPAREN . expression RPAREN
    (221) compound_statement -> . brace_open block_item_list_opt brace_close
    (206) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (338) brace_open -> . LBRACE
    (143) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (144) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (145) specifier_qualifier_list -> . type_specifier
    (146) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (147) specifier_qualifier_list -> . alignment_specifier
    (148) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LBRACE          shift and go to state 121
    LPAREN          shift and go to state 238
    _ALIGNAS        shift and go to state 61
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ATOMIC         shift and go to state 50
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    compound_statement             shift and go to state 363
    type_name                      shift and go to state 364
    brace_open                     shift and go to state 128
    cast_expression                shift and go to state 146
    expression                     shift and go to state 265
    specifier_qualifier_list       shift and go to state 216
    assignment_expression          shift and go to state 248
    type_specifier_no_typeid       shift and go to state 24
    type_qualifier                 shift and go to state 116
    type_specifier                 shift and go to state 212
    type_qualifier_list            shift and go to state 213
    alignment_specifier            shift and go to state 214
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    atomic_specifier               shift and go to state 106
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    struct_or_union                shift and go to state 37
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 239

    (14) expression_opt -> expression .
    (239) expression -> expression . COMMA assignment_expression

    SEMI            reduce using rule 14 (expression_opt -> expression .)
    RPAREN          reduce using rule 14 (expression_opt -> expression .)
    COMMA           shift and go to state 365


state 240

    (227) selection_statement -> SWITCH . LPAREN expression RPAREN pragmacomp_or_statement

    LPAREN          shift and go to state 366


state 241

    (228) iteration_statement -> WHILE . LPAREN expression RPAREN pragmacomp_or_statement

    LPAREN          shift and go to state 367


state 242

    (229) iteration_statement -> DO . pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (86) pragmacomp_or_statement -> . pppragma_directive_list statement
    (87) pragmacomp_or_statement -> . statement
    (74) pppragma_directive_list -> . pppragma_directive
    (75) pppragma_directive_list -> . pppragma_directive_list pppragma_directive
    (78) statement -> . labeled_statement
    (79) statement -> . expression_statement
    (80) statement -> . compound_statement
    (81) statement -> . selection_statement
    (82) statement -> . iteration_statement
    (83) statement -> . jump_statement
    (84) statement -> . pppragma_directive
    (85) statement -> . static_assert
    (71) pppragma_directive -> . PPPRAGMA
    (72) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (73) pppragma_directive -> . _PRAGMA LPAREN unified_string_literal RPAREN
    (222) labeled_statement -> . ID COLON pragmacomp_or_statement
    (223) labeled_statement -> . CASE constant_expression COLON pragmacomp_or_statement
    (224) labeled_statement -> . DEFAULT COLON pragmacomp_or_statement
    (237) expression_statement -> . expression_opt SEMI
    (221) compound_statement -> . brace_open block_item_list_opt brace_close
    (225) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (226) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (227) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (228) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (229) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (230) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (231) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (232) jump_statement -> . GOTO ID SEMI
    (233) jump_statement -> . BREAK SEMI
    (234) jump_statement -> . CONTINUE SEMI
    (235) jump_statement -> . RETURN expression SEMI
    (236) jump_statement -> . RETURN SEMI
    (68) static_assert -> . _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN
    (69) static_assert -> . _STATIC_ASSERT LPAREN constant_expression RPAREN
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (338) brace_open -> . LBRACE
    (340) empty -> .
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    PPPRAGMA        shift and go to state 15
    _PRAGMA         shift and go to state 16
    ID              shift and go to state 233
    CASE            shift and go to state 234
    DEFAULT         shift and go to state 235
    IF              shift and go to state 237
    SWITCH          shift and go to state 240
    WHILE           shift and go to state 241
    DO              shift and go to state 242
    FOR             shift and go to state 243
    GOTO            shift and go to state 244
    BREAK           shift and go to state 245
    CONTINUE        shift and go to state 246
    RETURN          shift and go to state 247
    _STATIC_ASSERT  shift and go to state 18
    LBRACE          shift and go to state 121
    SEMI            reduce using rule 340 (empty -> .)
    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    pragmacomp_or_statement        shift and go to state 368
    expression                     shift and go to state 239
    pppragma_directive_list        shift and go to state 369
    statement                      shift and go to state 370
    pppragma_directive             shift and go to state 371
    labeled_statement              shift and go to state 225
    expression_statement           shift and go to state 226
    compound_statement             shift and go to state 227
    selection_statement            shift and go to state 228
    iteration_statement            shift and go to state 229
    jump_statement                 shift and go to state 230
    static_assert                  shift and go to state 232
    unified_string_literal         shift and go to state 143
    expression_opt                 shift and go to state 236
    brace_open                     shift and go to state 128
    empty                          shift and go to state 357
    assignment_expression          shift and go to state 248
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_wstring_literal        shift and go to state 164

state 243

    (230) iteration_statement -> FOR . LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (231) iteration_statement -> FOR . LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement

    LPAREN          shift and go to state 372


state 244

    (232) jump_statement -> GOTO . ID SEMI

    ID              shift and go to state 373


state 245

    (233) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 374


state 246

    (234) jump_statement -> CONTINUE . SEMI

    SEMI            shift and go to state 375


state 247

    (235) jump_statement -> RETURN . expression SEMI
    (236) jump_statement -> RETURN . SEMI
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    SEMI            shift and go to state 377
    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    expression                     shift and go to state 376
    assignment_expression          shift and go to state 248
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 248

    (238) expression -> assignment_expression .

    COMMA           reduce using rule 238 (expression -> assignment_expression .)
    SEMI            reduce using rule 238 (expression -> assignment_expression .)
    RPAREN          reduce using rule 238 (expression -> assignment_expression .)
    COLON           reduce using rule 238 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 238 (expression -> assignment_expression .)


state 249

    (242) assignment_expression -> conditional_expression .

    COMMA           reduce using rule 242 (assignment_expression -> conditional_expression .)
    SEMI            reduce using rule 242 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 242 (assignment_expression -> conditional_expression .)
    RBRACKET        reduce using rule 242 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 242 (assignment_expression -> conditional_expression .)
    RBRACE          reduce using rule 242 (assignment_expression -> conditional_expression .)


state 250

    (243) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (277) cast_expression -> unary_expression .
    (244) assignment_operator -> . EQUALS
    (245) assignment_operator -> . XOREQUAL
    (246) assignment_operator -> . TIMESEQUAL
    (247) assignment_operator -> . DIVEQUAL
    (248) assignment_operator -> . MODEQUAL
    (249) assignment_operator -> . PLUSEQUAL
    (250) assignment_operator -> . MINUSEQUAL
    (251) assignment_operator -> . LSHIFTEQUAL
    (252) assignment_operator -> . RSHIFTEQUAL
    (253) assignment_operator -> . ANDEQUAL
    (254) assignment_operator -> . OREQUAL

    CONDOP          reduce using rule 277 (cast_expression -> unary_expression .)
    TIMES           reduce using rule 277 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 277 (cast_expression -> unary_expression .)
    MOD             reduce using rule 277 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 277 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 277 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 277 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 277 (cast_expression -> unary_expression .)
    LT              reduce using rule 277 (cast_expression -> unary_expression .)
    LE              reduce using rule 277 (cast_expression -> unary_expression .)
    GE              reduce using rule 277 (cast_expression -> unary_expression .)
    GT              reduce using rule 277 (cast_expression -> unary_expression .)
    EQ              reduce using rule 277 (cast_expression -> unary_expression .)
    NE              reduce using rule 277 (cast_expression -> unary_expression .)
    AND             reduce using rule 277 (cast_expression -> unary_expression .)
    OR              reduce using rule 277 (cast_expression -> unary_expression .)
    XOR             reduce using rule 277 (cast_expression -> unary_expression .)
    LAND            reduce using rule 277 (cast_expression -> unary_expression .)
    LOR             reduce using rule 277 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 277 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 277 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 277 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 277 (cast_expression -> unary_expression .)
    COLON           reduce using rule 277 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 277 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 379
    XOREQUAL        shift and go to state 380
    TIMESEQUAL      shift and go to state 381
    DIVEQUAL        shift and go to state 382
    MODEQUAL        shift and go to state 383
    PLUSEQUAL       shift and go to state 384
    MINUSEQUAL      shift and go to state 385
    LSHIFTEQUAL     shift and go to state 386
    RSHIFTEQUAL     shift and go to state 387
    ANDEQUAL        shift and go to state 388
    OREQUAL         shift and go to state 389

    assignment_operator            shift and go to state 378

state 251

    (77) function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .

    SEMI            reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    PPHASH          reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    PPPRAGMA        reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    _PRAGMA         reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    _STATIC_ASSERT  reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    TIMES           reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    TYPEID          reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    ENUM            reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    VOID            reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    _BOOL           reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    SHORT           reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    LONG            reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    DOUBLE          reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    _COMPLEX        reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    SIGNED          reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    UNSIGNED        reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    __INT128        reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    _ATOMIC         reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    CONST           reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    RESTRICT        reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    VOLATILE        reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    AUTO            reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    REGISTER        reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    STATIC          reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    EXTERN          reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    TYPEDEF         reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    _THREAD_LOCAL   reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    INLINE          reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    _NORETURN       reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    _ALIGNAS        reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    STRUCT          reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    UNION           reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 77 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)


state 252

    (38) direct_typeid_declarator -> LPAREN typeid_declarator RPAREN .

    LBRACKET        reduce using rule 38 (direct_typeid_declarator -> LPAREN typeid_declarator RPAREN .)
    LPAREN          reduce using rule 38 (direct_typeid_declarator -> LPAREN typeid_declarator RPAREN .)
    EQUALS          reduce using rule 38 (direct_typeid_declarator -> LPAREN typeid_declarator RPAREN .)
    COMMA           reduce using rule 38 (direct_typeid_declarator -> LPAREN typeid_declarator RPAREN .)
    SEMI            reduce using rule 38 (direct_typeid_declarator -> LPAREN typeid_declarator RPAREN .)
    RPAREN          reduce using rule 38 (direct_typeid_declarator -> LPAREN typeid_declarator RPAREN .)
    COLON           reduce using rule 38 (direct_typeid_declarator -> LPAREN typeid_declarator RPAREN .)


state 253

    (136) init_declarator_list -> init_declarator_list COMMA init_declarator .

    COMMA           reduce using rule 136 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    SEMI            reduce using rule 136 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 254

    (138) init_declarator -> declarator EQUALS initializer .

    COMMA           reduce using rule 138 (init_declarator -> declarator EQUALS initializer .)
    SEMI            reduce using rule 138 (init_declarator -> declarator EQUALS initializer .)


state 255

    (196) initializer -> assignment_expression .

    COMMA           reduce using rule 196 (initializer -> assignment_expression .)
    SEMI            reduce using rule 196 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 196 (initializer -> assignment_expression .)


state 256

    (197) initializer -> brace_open . initializer_list_opt brace_close
    (198) initializer -> brace_open . initializer_list COMMA brace_close
    (21) initializer_list_opt -> . empty
    (22) initializer_list_opt -> . initializer_list
    (199) initializer_list -> . designation_opt initializer
    (200) initializer_list -> . initializer_list COMMA designation_opt initializer
    (340) empty -> .
    (11) designation_opt -> . empty
    (12) designation_opt -> . designation
    (201) designation -> . designator_list EQUALS
    (202) designator_list -> . designator
    (203) designator_list -> . designator_list designator
    (204) designator -> . LBRACKET constant_expression RBRACKET
    (205) designator -> . PERIOD identifier

    RBRACE          reduce using rule 340 (empty -> .)
    LPAREN          reduce using rule 340 (empty -> .)
    LBRACE          reduce using rule 340 (empty -> .)
    PLUSPLUS        reduce using rule 340 (empty -> .)
    MINUSMINUS      reduce using rule 340 (empty -> .)
    SIZEOF          reduce using rule 340 (empty -> .)
    _ALIGNOF        reduce using rule 340 (empty -> .)
    AND             reduce using rule 340 (empty -> .)
    TIMES           reduce using rule 340 (empty -> .)
    PLUS            reduce using rule 340 (empty -> .)
    MINUS           reduce using rule 340 (empty -> .)
    NOT             reduce using rule 340 (empty -> .)
    LNOT            reduce using rule 340 (empty -> .)
    OFFSETOF        reduce using rule 340 (empty -> .)
    ID              reduce using rule 340 (empty -> .)
    INT_CONST_DEC   reduce using rule 340 (empty -> .)
    INT_CONST_OCT   reduce using rule 340 (empty -> .)
    INT_CONST_HEX   reduce using rule 340 (empty -> .)
    INT_CONST_BIN   reduce using rule 340 (empty -> .)
    INT_CONST_CHAR  reduce using rule 340 (empty -> .)
    FLOAT_CONST     reduce using rule 340 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 340 (empty -> .)
    CHAR_CONST      reduce using rule 340 (empty -> .)
    WCHAR_CONST     reduce using rule 340 (empty -> .)
    U8CHAR_CONST    reduce using rule 340 (empty -> .)
    U16CHAR_CONST   reduce using rule 340 (empty -> .)
    U32CHAR_CONST   reduce using rule 340 (empty -> .)
    STRING_LITERAL  reduce using rule 340 (empty -> .)
    WSTRING_LITERAL reduce using rule 340 (empty -> .)
    U8STRING_LITERAL reduce using rule 340 (empty -> .)
    U16STRING_LITERAL reduce using rule 340 (empty -> .)
    U32STRING_LITERAL reduce using rule 340 (empty -> .)
    LBRACKET        shift and go to state 397
    PERIOD          shift and go to state 398

    initializer_list_opt           shift and go to state 390
    initializer_list               shift and go to state 391
    empty                          shift and go to state 392
    designation_opt                shift and go to state 393
    designation                    shift and go to state 394
    designator_list                shift and go to state 395
    designator                     shift and go to state 396

state 257

    (39) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt . assignment_expression_opt RBRACKET
    (42) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt . TIMES RBRACKET
    (3) assignment_expression_opt -> . empty
    (4) assignment_expression_opt -> . assignment_expression
    (340) empty -> .
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    TIMES           shift and go to state 400
    RBRACKET        reduce using rule 340 (empty -> .)
    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    assignment_expression_opt      shift and go to state 399
    empty                          shift and go to state 307
    assignment_expression          shift and go to state 308
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 258

    (40) direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC . type_qualifier_list_opt assignment_expression RBRACKET
    (27) type_qualifier_list_opt -> . empty
    (28) type_qualifier_list_opt -> . type_qualifier_list
    (340) empty -> .
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC

    LPAREN          reduce using rule 340 (empty -> .)
    PLUSPLUS        reduce using rule 340 (empty -> .)
    MINUSMINUS      reduce using rule 340 (empty -> .)
    SIZEOF          reduce using rule 340 (empty -> .)
    _ALIGNOF        reduce using rule 340 (empty -> .)
    AND             reduce using rule 340 (empty -> .)
    TIMES           reduce using rule 340 (empty -> .)
    PLUS            reduce using rule 340 (empty -> .)
    MINUS           reduce using rule 340 (empty -> .)
    NOT             reduce using rule 340 (empty -> .)
    LNOT            reduce using rule 340 (empty -> .)
    OFFSETOF        reduce using rule 340 (empty -> .)
    ID              reduce using rule 340 (empty -> .)
    INT_CONST_DEC   reduce using rule 340 (empty -> .)
    INT_CONST_OCT   reduce using rule 340 (empty -> .)
    INT_CONST_HEX   reduce using rule 340 (empty -> .)
    INT_CONST_BIN   reduce using rule 340 (empty -> .)
    INT_CONST_CHAR  reduce using rule 340 (empty -> .)
    FLOAT_CONST     reduce using rule 340 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 340 (empty -> .)
    CHAR_CONST      reduce using rule 340 (empty -> .)
    WCHAR_CONST     reduce using rule 340 (empty -> .)
    U8CHAR_CONST    reduce using rule 340 (empty -> .)
    U16CHAR_CONST   reduce using rule 340 (empty -> .)
    U32CHAR_CONST   reduce using rule 340 (empty -> .)
    STRING_LITERAL  reduce using rule 340 (empty -> .)
    WSTRING_LITERAL reduce using rule 340 (empty -> .)
    U8STRING_LITERAL reduce using rule 340 (empty -> .)
    U16STRING_LITERAL reduce using rule 340 (empty -> .)
    U32STRING_LITERAL reduce using rule 340 (empty -> .)
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 81

    type_qualifier_list_opt        shift and go to state 401
    empty                          shift and go to state 114
    type_qualifier_list            shift and go to state 115
    type_qualifier                 shift and go to state 116

state 259

    (41) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list . STATIC assignment_expression RBRACKET
    (28) type_qualifier_list_opt -> type_qualifier_list .
    (186) type_qualifier_list -> type_qualifier_list . type_qualifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC

    STATIC          shift and go to state 402
    TIMES           reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    LPAREN          reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUSPLUS        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUSMINUS      reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    SIZEOF          reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    _ALIGNOF        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    AND             reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUS            reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUS           reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    NOT             reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    LNOT            reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    OFFSETOF        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    ID              reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_DEC   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_OCT   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_HEX   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_BIN   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_CHAR  reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    FLOAT_CONST     reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    HEX_FLOAT_CONST reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    CHAR_CONST      reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    WCHAR_CONST     reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    U8CHAR_CONST    reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    U16CHAR_CONST   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    U32CHAR_CONST   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    STRING_LITERAL  reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    WSTRING_LITERAL reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    U8STRING_LITERAL reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    U16STRING_LITERAL reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    U32STRING_LITERAL reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    RBRACKET        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 81

    type_qualifier                 shift and go to state 197

state 260

    (43) direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 403


state 261

    (44) direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt . RPAREN

    RPAREN          shift and go to state 404


state 262

    (73) pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .

    SEMI            reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    PPHASH          reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    PPPRAGMA        reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    _PRAGMA         reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    _STATIC_ASSERT  reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    ID              reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    LPAREN          reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    TIMES           reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    TYPEID          reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    ENUM            reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    VOID            reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    _BOOL           reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    CHAR            reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    SHORT           reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    INT             reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    LONG            reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    FLOAT           reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    DOUBLE          reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    _COMPLEX        reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    SIGNED          reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    UNSIGNED        reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    __INT128        reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    _ATOMIC         reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    CONST           reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    RESTRICT        reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    VOLATILE        reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    AUTO            reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    REGISTER        reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    STATIC          reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    EXTERN          reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    TYPEDEF         reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    _THREAD_LOCAL   reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    INLINE          reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    _NORETURN       reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    _ALIGNAS        reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    STRUCT          reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    UNION           reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    $end            reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    RBRACE          reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    CASE            reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    DEFAULT         reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    IF              reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    SWITCH          reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    WHILE           reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    DO              reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    FOR             reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    GOTO            reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    BREAK           reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    CONTINUE        reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    RETURN          reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    LBRACE          reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    PLUSPLUS        reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    MINUSMINUS      reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    SIZEOF          reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    _ALIGNOF        reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    AND             reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    PLUS            reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    MINUS           reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    NOT             reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    LNOT            reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    OFFSETOF        reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    INT_CONST_DEC   reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    INT_CONST_OCT   reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    INT_CONST_HEX   reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    INT_CONST_BIN   reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    INT_CONST_CHAR  reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    FLOAT_CONST     reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    HEX_FLOAT_CONST reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    CHAR_CONST      reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    WCHAR_CONST     reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    U8CHAR_CONST    reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    U16CHAR_CONST   reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    U32CHAR_CONST   reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    STRING_LITERAL  reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    WSTRING_LITERAL reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    U8STRING_LITERAL reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    U16STRING_LITERAL reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    U32STRING_LITERAL reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)
    ELSE            reduce using rule 73 (pppragma_directive -> _PRAGMA LPAREN unified_string_literal RPAREN .)


state 263

    (329) unified_string_literal -> unified_string_literal STRING_LITERAL .

    RPAREN          reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    STRING_LITERAL  reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LBRACKET        reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LPAREN          reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    PERIOD          reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    ARROW           reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    PLUSPLUS        reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MINUSMINUS      reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    CONDOP          reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    TIMES           reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    DIVIDE          reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MOD             reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    PLUS            reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MINUS           reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RSHIFT          reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LSHIFT          reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LT              reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LE              reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    GE              reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    GT              reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    EQ              reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    NE              reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    AND             reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    OR              reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    XOR             reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LAND            reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LOR             reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    COMMA           reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    EQUALS          reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    XOREQUAL        reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    TIMESEQUAL      reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    DIVEQUAL        reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MODEQUAL        reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    ANDEQUAL        reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    OREQUAL         reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    SEMI            reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RBRACKET        reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    COLON           reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RBRACE          reduce using rule 329 (unified_string_literal -> unified_string_literal STRING_LITERAL .)


state 264

    (278) cast_expression -> LPAREN type_name . RPAREN cast_expression
    (302) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list COMMA brace_close

    RPAREN          shift and go to state 405


state 265

    (308) primary_expression -> LPAREN expression . RPAREN
    (239) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 406
    COMMA           shift and go to state 365


state 266

    (68) static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA . unified_string_literal RPAREN
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL

    STRING_LITERAL  shift and go to state 139

    unified_string_literal         shift and go to state 407

state 267

    (69) static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .

    SEMI            reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    PPHASH          reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    PPPRAGMA        reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    _PRAGMA         reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    _STATIC_ASSERT  reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    ID              reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    LPAREN          reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    TIMES           reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    TYPEID          reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    ENUM            reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    VOID            reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    _BOOL           reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    CHAR            reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    SHORT           reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    INT             reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    LONG            reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    FLOAT           reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    DOUBLE          reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    _COMPLEX        reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    SIGNED          reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    UNSIGNED        reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    __INT128        reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    _ATOMIC         reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    CONST           reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    RESTRICT        reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    VOLATILE        reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    AUTO            reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    REGISTER        reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    STATIC          reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    EXTERN          reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    TYPEDEF         reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    _THREAD_LOCAL   reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    INLINE          reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    _NORETURN       reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    _ALIGNAS        reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    STRUCT          reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    UNION           reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    $end            reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    CASE            reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    DEFAULT         reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    IF              reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    SWITCH          reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    WHILE           reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    DO              reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    FOR             reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    GOTO            reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    BREAK           reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    CONTINUE        reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    RETURN          reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    LBRACE          reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    PLUSPLUS        reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    MINUSMINUS      reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    SIZEOF          reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    _ALIGNOF        reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    AND             reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    PLUS            reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    MINUS           reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    NOT             reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    LNOT            reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    OFFSETOF        reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    INT_CONST_DEC   reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    INT_CONST_OCT   reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    INT_CONST_HEX   reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    INT_CONST_BIN   reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    INT_CONST_CHAR  reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    FLOAT_CONST     reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    HEX_FLOAT_CONST reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    CHAR_CONST      reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    WCHAR_CONST     reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    U8CHAR_CONST    reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    U16CHAR_CONST   reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    U32CHAR_CONST   reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    STRING_LITERAL  reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    WSTRING_LITERAL reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    U8STRING_LITERAL reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    U16STRING_LITERAL reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    U32STRING_LITERAL reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    RBRACE          reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)
    ELSE            reduce using rule 69 (static_assert -> _STATIC_ASSERT LPAREN constant_expression RPAREN .)


state 268

    (257) conditional_expression -> binary_expression CONDOP . expression COLON conditional_expression
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    binary_expression              shift and go to state 145
    expression                     shift and go to state 408
    conditional_expression         shift and go to state 249
    assignment_expression          shift and go to state 248
    unary_expression               shift and go to state 250
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 269

    (259) binary_expression -> binary_expression TIMES . binary_expression
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    binary_expression              shift and go to state 409
    cast_expression                shift and go to state 146
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 270

    (260) binary_expression -> binary_expression DIVIDE . binary_expression
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    binary_expression              shift and go to state 410
    cast_expression                shift and go to state 146
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 271

    (261) binary_expression -> binary_expression MOD . binary_expression
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    binary_expression              shift and go to state 411
    cast_expression                shift and go to state 146
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 272

    (262) binary_expression -> binary_expression PLUS . binary_expression
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    binary_expression              shift and go to state 412
    cast_expression                shift and go to state 146
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 273

    (263) binary_expression -> binary_expression MINUS . binary_expression
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    binary_expression              shift and go to state 413
    cast_expression                shift and go to state 146
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 274

    (264) binary_expression -> binary_expression RSHIFT . binary_expression
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    binary_expression              shift and go to state 414
    cast_expression                shift and go to state 146
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 275

    (265) binary_expression -> binary_expression LSHIFT . binary_expression
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    binary_expression              shift and go to state 415
    cast_expression                shift and go to state 146
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 276

    (266) binary_expression -> binary_expression LT . binary_expression
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    binary_expression              shift and go to state 416
    cast_expression                shift and go to state 146
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 277

    (267) binary_expression -> binary_expression LE . binary_expression
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    binary_expression              shift and go to state 417
    cast_expression                shift and go to state 146
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 278

    (268) binary_expression -> binary_expression GE . binary_expression
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    binary_expression              shift and go to state 418
    cast_expression                shift and go to state 146
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 279

    (269) binary_expression -> binary_expression GT . binary_expression
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    binary_expression              shift and go to state 419
    cast_expression                shift and go to state 146
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 280

    (270) binary_expression -> binary_expression EQ . binary_expression
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    binary_expression              shift and go to state 420
    cast_expression                shift and go to state 146
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 281

    (271) binary_expression -> binary_expression NE . binary_expression
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    binary_expression              shift and go to state 421
    cast_expression                shift and go to state 146
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 282

    (272) binary_expression -> binary_expression AND . binary_expression
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    binary_expression              shift and go to state 422
    cast_expression                shift and go to state 146
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 283

    (273) binary_expression -> binary_expression OR . binary_expression
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    binary_expression              shift and go to state 423
    cast_expression                shift and go to state 146
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 284

    (274) binary_expression -> binary_expression XOR . binary_expression
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    binary_expression              shift and go to state 424
    cast_expression                shift and go to state 146
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 285

    (275) binary_expression -> binary_expression LAND . binary_expression
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    binary_expression              shift and go to state 425
    cast_expression                shift and go to state 146
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 286

    (276) binary_expression -> binary_expression LOR . binary_expression
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    binary_expression              shift and go to state 426
    cast_expression                shift and go to state 146
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 287

    (293) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    postfix_expression             shift and go to state 152
    expression                     shift and go to state 427
    assignment_expression          shift and go to state 248
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 288

    (294) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (295) postfix_expression -> postfix_expression LPAREN . RPAREN
    (313) argument_expression_list -> . assignment_expression
    (314) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    RPAREN          shift and go to state 429
    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    postfix_expression             shift and go to state 152
    argument_expression_list       shift and go to state 428
    assignment_expression          shift and go to state 430
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 289

    (296) postfix_expression -> postfix_expression PERIOD . ID
    (297) postfix_expression -> postfix_expression PERIOD . TYPEID

    ID              shift and go to state 431
    TYPEID          shift and go to state 432


state 290

    (298) postfix_expression -> postfix_expression ARROW . ID
    (299) postfix_expression -> postfix_expression ARROW . TYPEID

    ID              shift and go to state 433
    TYPEID          shift and go to state 434


state 291

    (300) postfix_expression -> postfix_expression PLUSPLUS .

    LBRACKET        reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    LPAREN          reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    PERIOD          reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    ARROW           reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    CONDOP          reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMES           reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVIDE          reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    MOD             reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUS            reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUS           reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    RSHIFT          reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    LSHIFT          reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    LT              reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    LE              reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    GE              reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    GT              reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQ              reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    NE              reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    AND             reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    OR              reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    XOR             reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    LAND            reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    LOR             reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    COMMA           reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    RPAREN          reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQUALS          reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    XOREQUAL        reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMESEQUAL      reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVEQUAL        reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    MODEQUAL        reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSEQUAL       reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSEQUAL      reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    LSHIFTEQUAL     reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    RSHIFTEQUAL     reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    ANDEQUAL        reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    OREQUAL         reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    SEMI            reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACKET        reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    COLON           reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACE          reduce using rule 300 (postfix_expression -> postfix_expression PLUSPLUS .)


state 292

    (301) postfix_expression -> postfix_expression MINUSMINUS .

    LBRACKET        reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    LPAREN          reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    PERIOD          reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    ARROW           reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    CONDOP          reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMES           reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVIDE          reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    MOD             reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUS            reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUS           reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    RSHIFT          reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    LSHIFT          reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    LT              reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    LE              reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    GE              reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    GT              reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQ              reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    NE              reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    AND             reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    OR              reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    XOR             reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    LAND            reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    LOR             reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    COMMA           reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    RPAREN          reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQUALS          reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    XOREQUAL        reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMESEQUAL      reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVEQUAL        reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    MODEQUAL        reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSEQUAL       reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSEQUAL      reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    LSHIFTEQUAL     reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    RSHIFTEQUAL     reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    ANDEQUAL        reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    OREQUAL         reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    SEMI            reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACKET        reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    COLON           reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACE          reduce using rule 301 (postfix_expression -> postfix_expression MINUSMINUS .)


state 293

    (280) unary_expression -> PLUSPLUS unary_expression .

    CONDOP          reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    TIMES           reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDE          reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    MOD             reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    PLUS            reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    MINUS           reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    RSHIFT          reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    LSHIFT          reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    LT              reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    LE              reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    GE              reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    GT              reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    EQ              reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    NE              reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    AND             reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    OR              reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    XOR             reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    LAND            reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    LOR             reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    COMMA           reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    RPAREN          reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    EQUALS          reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    XOREQUAL        reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    TIMESEQUAL      reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    DIVEQUAL        reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    MODEQUAL        reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    PLUSEQUAL       reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    MINUSEQUAL      reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    LSHIFTEQUAL     reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    RSHIFTEQUAL     reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    ANDEQUAL        reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    OREQUAL         reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    SEMI            reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACKET        reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    COLON           reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACE          reduce using rule 280 (unary_expression -> PLUSPLUS unary_expression .)


state 294

    (302) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list COMMA brace_close
    (308) primary_expression -> LPAREN . expression RPAREN
    (206) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (143) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (144) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (145) specifier_qualifier_list -> . type_specifier
    (146) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (147) specifier_qualifier_list -> . alignment_specifier
    (148) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 238
    _ALIGNAS        shift and go to state 61
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ATOMIC         shift and go to state 50
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    type_name                      shift and go to state 435
    expression                     shift and go to state 265
    specifier_qualifier_list       shift and go to state 216
    assignment_expression          shift and go to state 248
    type_specifier_no_typeid       shift and go to state 24
    type_qualifier                 shift and go to state 116
    type_specifier                 shift and go to state 212
    type_qualifier_list            shift and go to state 213
    alignment_specifier            shift and go to state 214
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    atomic_specifier               shift and go to state 106
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    struct_or_union                shift and go to state 37
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 295

    (281) unary_expression -> MINUSMINUS unary_expression .

    CONDOP          reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    TIMES           reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDE          reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    MOD             reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    PLUS            reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    MINUS           reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    RSHIFT          reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    LSHIFT          reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    LT              reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    LE              reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    GE              reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    GT              reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    EQ              reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    NE              reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    AND             reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    OR              reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    XOR             reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    LAND            reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    LOR             reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    COMMA           reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    RPAREN          reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    EQUALS          reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    XOREQUAL        reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    TIMESEQUAL      reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    DIVEQUAL        reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    MODEQUAL        reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    PLUSEQUAL       reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    MINUSEQUAL      reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    LSHIFTEQUAL     reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    RSHIFTEQUAL     reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    ANDEQUAL        reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    OREQUAL         reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    SEMI            reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACKET        reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    COLON           reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACE          reduce using rule 281 (unary_expression -> MINUSMINUS unary_expression .)


state 296

    (282) unary_expression -> unary_operator cast_expression .

    CONDOP          reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    TIMES           reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    RSHIFT          reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    LSHIFT          reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    GE              reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    NE              reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    XOR             reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    LAND            reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    LOR             reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    EQUALS          reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    XOREQUAL        reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    TIMESEQUAL      reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    DIVEQUAL        reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    MODEQUAL        reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    PLUSEQUAL       reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    MINUSEQUAL      reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    LSHIFTEQUAL     reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    RSHIFTEQUAL     reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    ANDEQUAL        reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    OREQUAL         reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 282 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 282 (unary_expression -> unary_operator cast_expression .)


state 297

    (283) unary_expression -> SIZEOF unary_expression .

    CONDOP          reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    TIMES           reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE          reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    MOD             reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    PLUS            reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    MINUS           reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    RSHIFT          reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    LSHIFT          reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    LT              reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    LE              reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    GE              reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    GT              reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    EQ              reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    NE              reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    AND             reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    OR              reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    XOR             reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    LAND            reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    LOR             reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    EQUALS          reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    XOREQUAL        reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    TIMESEQUAL      reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    DIVEQUAL        reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    MODEQUAL        reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    PLUSEQUAL       reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    MINUSEQUAL      reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    LSHIFTEQUAL     reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    RSHIFTEQUAL     reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    ANDEQUAL        reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    OREQUAL         reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    SEMI            reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    RBRACKET        reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)
    RBRACE          reduce using rule 283 (unary_expression -> SIZEOF unary_expression .)


state 298

    (284) unary_expression -> SIZEOF LPAREN . type_name RPAREN
    (302) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list COMMA brace_close
    (308) primary_expression -> LPAREN . expression RPAREN
    (206) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (143) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (144) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (145) specifier_qualifier_list -> . type_specifier
    (146) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (147) specifier_qualifier_list -> . alignment_specifier
    (148) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 238
    _ALIGNAS        shift and go to state 61
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ATOMIC         shift and go to state 50
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    type_name                      shift and go to state 436
    expression                     shift and go to state 265
    specifier_qualifier_list       shift and go to state 216
    assignment_expression          shift and go to state 248
    type_specifier_no_typeid       shift and go to state 24
    type_qualifier                 shift and go to state 116
    type_specifier                 shift and go to state 212
    type_qualifier_list            shift and go to state 213
    alignment_specifier            shift and go to state 214
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    atomic_specifier               shift and go to state 106
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    struct_or_union                shift and go to state 37
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 299

    (285) unary_expression -> _ALIGNOF LPAREN . type_name RPAREN
    (206) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (143) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (144) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (145) specifier_qualifier_list -> . type_specifier
    (146) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (147) specifier_qualifier_list -> . alignment_specifier
    (148) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION

    _ALIGNAS        shift and go to state 61
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ATOMIC         shift and go to state 50
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63

    type_name                      shift and go to state 437
    specifier_qualifier_list       shift and go to state 216
    type_specifier_no_typeid       shift and go to state 24
    type_qualifier                 shift and go to state 116
    type_specifier                 shift and go to state 212
    type_qualifier_list            shift and go to state 213
    alignment_specifier            shift and go to state 214
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    atomic_specifier               shift and go to state 106
    struct_or_union                shift and go to state 37

state 300

    (334) unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .

    WSTRING_LITERAL reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    U8STRING_LITERAL reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    U16STRING_LITERAL reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    U32STRING_LITERAL reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LBRACKET        reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LPAREN          reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    PERIOD          reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    ARROW           reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    PLUSPLUS        reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MINUSMINUS      reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    CONDOP          reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    TIMES           reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    DIVIDE          reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MOD             reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    PLUS            reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MINUS           reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RSHIFT          reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LSHIFT          reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LT              reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LE              reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    GE              reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    GT              reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    EQ              reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    NE              reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    AND             reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    OR              reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    XOR             reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LAND            reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LOR             reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    COMMA           reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RPAREN          reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    EQUALS          reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    XOREQUAL        reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    TIMESEQUAL      reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    DIVEQUAL        reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MODEQUAL        reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    PLUSEQUAL       reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MINUSEQUAL      reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    ANDEQUAL        reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    OREQUAL         reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    SEMI            reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RBRACKET        reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    COLON           reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RBRACE          reduce using rule 334 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)


state 301

    (335) unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .

    WSTRING_LITERAL reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    U8STRING_LITERAL reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    U16STRING_LITERAL reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    U32STRING_LITERAL reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    LBRACKET        reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    LPAREN          reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    PERIOD          reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    ARROW           reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    PLUSPLUS        reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    MINUSMINUS      reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    CONDOP          reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    TIMES           reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    DIVIDE          reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    MOD             reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    PLUS            reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    MINUS           reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    RSHIFT          reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    LSHIFT          reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    LT              reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    LE              reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    GE              reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    GT              reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    EQ              reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    NE              reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    AND             reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    OR              reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    XOR             reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    LAND            reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    LOR             reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    COMMA           reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    RPAREN          reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    EQUALS          reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    XOREQUAL        reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    TIMESEQUAL      reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    DIVEQUAL        reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    MODEQUAL        reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    ANDEQUAL        reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    OREQUAL         reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    SEMI            reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    RBRACKET        reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    COLON           reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)
    RBRACE          reduce using rule 335 (unified_wstring_literal -> unified_wstring_literal U8STRING_LITERAL .)


state 302

    (336) unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .

    WSTRING_LITERAL reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    U8STRING_LITERAL reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    U16STRING_LITERAL reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    U32STRING_LITERAL reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    LBRACKET        reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    LPAREN          reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    PERIOD          reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    ARROW           reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    PLUSPLUS        reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    MINUSMINUS      reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    CONDOP          reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    TIMES           reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    DIVIDE          reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    MOD             reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    PLUS            reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    MINUS           reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    RSHIFT          reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    LSHIFT          reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    LT              reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    LE              reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    GE              reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    GT              reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    EQ              reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    NE              reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    AND             reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    OR              reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    XOR             reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    LAND            reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    LOR             reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    COMMA           reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    RPAREN          reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    EQUALS          reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    XOREQUAL        reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    TIMESEQUAL      reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    DIVEQUAL        reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    MODEQUAL        reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    ANDEQUAL        reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    OREQUAL         reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    SEMI            reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    RBRACKET        reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    COLON           reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)
    RBRACE          reduce using rule 336 (unified_wstring_literal -> unified_wstring_literal U16STRING_LITERAL .)


state 303

    (337) unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .

    WSTRING_LITERAL reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    U8STRING_LITERAL reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    U16STRING_LITERAL reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    U32STRING_LITERAL reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    LBRACKET        reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    LPAREN          reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    PERIOD          reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    ARROW           reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    PLUSPLUS        reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    MINUSMINUS      reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    CONDOP          reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    TIMES           reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    DIVIDE          reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    MOD             reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    PLUS            reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    MINUS           reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    RSHIFT          reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    LSHIFT          reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    LT              reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    LE              reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    GE              reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    GT              reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    EQ              reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    NE              reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    AND             reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    OR              reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    XOR             reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    LAND            reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    LOR             reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    COMMA           reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    RPAREN          reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    EQUALS          reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    XOREQUAL        reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    TIMESEQUAL      reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    DIVEQUAL        reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    MODEQUAL        reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    ANDEQUAL        reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    OREQUAL         reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    SEMI            reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    RBRACKET        reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    COLON           reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)
    RBRACE          reduce using rule 337 (unified_wstring_literal -> unified_wstring_literal U32STRING_LITERAL .)


state 304

    (309) primary_expression -> OFFSETOF LPAREN . type_name COMMA offsetof_member_designator RPAREN
    (206) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (143) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (144) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (145) specifier_qualifier_list -> . type_specifier
    (146) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (147) specifier_qualifier_list -> . alignment_specifier
    (148) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION

    _ALIGNAS        shift and go to state 61
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ATOMIC         shift and go to state 50
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63

    type_name                      shift and go to state 438
    specifier_qualifier_list       shift and go to state 216
    type_specifier_no_typeid       shift and go to state 24
    type_qualifier                 shift and go to state 116
    type_specifier                 shift and go to state 212
    type_qualifier_list            shift and go to state 213
    alignment_specifier            shift and go to state 214
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    atomic_specifier               shift and go to state 106
    struct_or_union                shift and go to state 37

state 305

    (31) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt . RBRACKET

    RBRACKET        shift and go to state 439


state 306

    (34) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES . RBRACKET
    (287) unary_operator -> TIMES .

    RBRACKET        shift and go to state 440
    LPAREN          reduce using rule 287 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 287 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 287 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 287 (unary_operator -> TIMES .)
    _ALIGNOF        reduce using rule 287 (unary_operator -> TIMES .)
    AND             reduce using rule 287 (unary_operator -> TIMES .)
    TIMES           reduce using rule 287 (unary_operator -> TIMES .)
    PLUS            reduce using rule 287 (unary_operator -> TIMES .)
    MINUS           reduce using rule 287 (unary_operator -> TIMES .)
    NOT             reduce using rule 287 (unary_operator -> TIMES .)
    LNOT            reduce using rule 287 (unary_operator -> TIMES .)
    OFFSETOF        reduce using rule 287 (unary_operator -> TIMES .)
    ID              reduce using rule 287 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 287 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 287 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 287 (unary_operator -> TIMES .)
    INT_CONST_BIN   reduce using rule 287 (unary_operator -> TIMES .)
    INT_CONST_CHAR  reduce using rule 287 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 287 (unary_operator -> TIMES .)
    HEX_FLOAT_CONST reduce using rule 287 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 287 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 287 (unary_operator -> TIMES .)
    U8CHAR_CONST    reduce using rule 287 (unary_operator -> TIMES .)
    U16CHAR_CONST   reduce using rule 287 (unary_operator -> TIMES .)
    U32CHAR_CONST   reduce using rule 287 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 287 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 287 (unary_operator -> TIMES .)
    U8STRING_LITERAL reduce using rule 287 (unary_operator -> TIMES .)
    U16STRING_LITERAL reduce using rule 287 (unary_operator -> TIMES .)
    U32STRING_LITERAL reduce using rule 287 (unary_operator -> TIMES .)


state 307

    (3) assignment_expression_opt -> empty .

    RBRACKET        reduce using rule 3 (assignment_expression_opt -> empty .)


state 308

    (4) assignment_expression_opt -> assignment_expression .

    RBRACKET        reduce using rule 4 (assignment_expression_opt -> assignment_expression .)


state 309

    (32) direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt . assignment_expression RBRACKET
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    assignment_expression          shift and go to state 441
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 310

    (33) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC . assignment_expression RBRACKET
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    assignment_expression          shift and go to state 442
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 311

    (35) direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    CONST           reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    RESTRICT        reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    VOLATILE        reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    _ATOMIC         reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    AUTO            reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    REGISTER        reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    STATIC          reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    EXTERN          reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    TYPEDEF         reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    _THREAD_LOCAL   reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    INLINE          reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    _NORETURN       reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    _ALIGNAS        reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    TYPEID          reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    ENUM            reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    VOID            reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    _BOOL           reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    CHAR            reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    SHORT           reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    INT             reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    LONG            reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    FLOAT           reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    DOUBLE          reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    _COMPLEX        reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    SIGNED          reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    UNSIGNED        reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    __INT128        reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    STRUCT          reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    UNION           reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    LBRACE          reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    EQUALS          reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    SEMI            reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    COLON           reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)


state 312

    (36) direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .

    LBRACKET        reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    LPAREN          reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    CONST           reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    RESTRICT        reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    VOLATILE        reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    _ATOMIC         reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    AUTO            reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    REGISTER        reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    STATIC          reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    EXTERN          reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    TYPEDEF         reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    _THREAD_LOCAL   reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    INLINE          reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    _NORETURN       reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    _ALIGNAS        reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    TYPEID          reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    ENUM            reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    VOID            reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    _BOOL           reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    CHAR            reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    SHORT           reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    INT             reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    LONG            reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    FLOAT           reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    DOUBLE          reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    _COMPLEX        reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    SIGNED          reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    UNSIGNED        reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    __INT128        reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    STRUCT          reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    UNION           reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    LBRACE          reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    EQUALS          reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    COMMA           reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    SEMI            reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    RPAREN          reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    COLON           reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)


state 313

    (188) parameter_type_list -> parameter_list COMMA . ELLIPSIS
    (190) parameter_list -> parameter_list COMMA . parameter_declaration
    (191) parameter_declaration -> . declaration_specifiers id_declarator
    (192) parameter_declaration -> . declaration_specifiers typeid_noparen_declarator
    (193) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (98) declaration_specifiers -> . declaration_specifiers type_qualifier
    (99) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (100) declaration_specifiers -> . declaration_specifiers function_specifier
    (101) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (102) declaration_specifiers -> . type_specifier
    (103) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (104) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (93) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (94) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (95) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (96) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (97) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) storage_class_specifier -> . STATIC
    (108) storage_class_specifier -> . EXTERN
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . _THREAD_LOCAL
    (111) function_specifier -> . INLINE
    (112) function_specifier -> . _NORETURN
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 443
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ATOMIC         shift and go to state 50
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    AUTO            shift and go to state 54
    REGISTER        shift and go to state 55
    STATIC          shift and go to state 29
    EXTERN          shift and go to state 56
    TYPEDEF         shift and go to state 57
    _THREAD_LOCAL   shift and go to state 58
    INLINE          shift and go to state 59
    _NORETURN       shift and go to state 60
    _ALIGNAS        shift and go to state 61
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63

    parameter_declaration          shift and go to state 444
    declaration_specifiers         shift and go to state 192
    type_qualifier                 shift and go to state 21
    storage_class_specifier        shift and go to state 22
    function_specifier             shift and go to state 23
    type_specifier_no_typeid       shift and go to state 24
    type_specifier                 shift and go to state 25
    declaration_specifiers_no_type shift and go to state 193
    alignment_specifier            shift and go to state 27
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    atomic_specifier               shift and go to state 34
    struct_or_union                shift and go to state 37

state 314

    (195) identifier_list -> identifier_list COMMA . identifier
    (315) identifier -> . ID

    ID              shift and go to state 159

    identifier                     shift and go to state 445

state 315

    (191) parameter_declaration -> declaration_specifiers id_declarator .

    COMMA           reduce using rule 191 (parameter_declaration -> declaration_specifiers id_declarator .)
    RPAREN          reduce using rule 191 (parameter_declaration -> declaration_specifiers id_declarator .)


state 316

    (192) parameter_declaration -> declaration_specifiers typeid_noparen_declarator .

    COMMA           reduce using rule 192 (parameter_declaration -> declaration_specifiers typeid_noparen_declarator .)
    RPAREN          reduce using rule 192 (parameter_declaration -> declaration_specifiers typeid_noparen_declarator .)


state 317

    (193) parameter_declaration -> declaration_specifiers abstract_declarator_opt .

    COMMA           reduce using rule 193 (parameter_declaration -> declaration_specifiers abstract_declarator_opt .)
    RPAREN          reduce using rule 193 (parameter_declaration -> declaration_specifiers abstract_declarator_opt .)


state 318

    (53) id_declarator -> pointer . direct_id_declarator
    (57) typeid_noparen_declarator -> pointer . direct_typeid_noparen_declarator
    (207) abstract_declarator -> pointer .
    (208) abstract_declarator -> pointer . direct_abstract_declarator
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (45) direct_typeid_noparen_declarator -> . TYPEID
    (46) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (47) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (48) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (49) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (50) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LPAREN parameter_type_list RPAREN
    (51) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LPAREN identifier_list_opt RPAREN
    (210) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (211) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (212) direct_abstract_declarator -> . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (213) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (214) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (215) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (216) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    COMMA           reduce using rule 207 (abstract_declarator -> pointer .)
    RPAREN          reduce using rule 207 (abstract_declarator -> pointer .)
    ID              shift and go to state 28
    LPAREN          shift and go to state 322
    TYPEID          shift and go to state 324
    LBRACKET        shift and go to state 323

    direct_id_declarator           shift and go to state 97
    direct_typeid_noparen_declarator shift and go to state 446
    direct_abstract_declarator     shift and go to state 447

state 319

    (56) typeid_noparen_declarator -> direct_typeid_noparen_declarator .
    (46) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (47) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (48) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (49) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (50) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LPAREN parameter_type_list RPAREN
    (51) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LPAREN identifier_list_opt RPAREN

    COMMA           reduce using rule 56 (typeid_noparen_declarator -> direct_typeid_noparen_declarator .)
    RPAREN          reduce using rule 56 (typeid_noparen_declarator -> direct_typeid_noparen_declarator .)
    LBRACKET        shift and go to state 448
    LPAREN          shift and go to state 449


state 320

    (1) abstract_declarator_opt -> empty .

    COMMA           reduce using rule 1 (abstract_declarator_opt -> empty .)
    RPAREN          reduce using rule 1 (abstract_declarator_opt -> empty .)


state 321

    (2) abstract_declarator_opt -> abstract_declarator .

    COMMA           reduce using rule 2 (abstract_declarator_opt -> abstract_declarator .)
    RPAREN          reduce using rule 2 (abstract_declarator_opt -> abstract_declarator .)


state 322

    (30) direct_id_declarator -> LPAREN . id_declarator RPAREN
    (210) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (216) direct_abstract_declarator -> LPAREN . parameter_type_list_opt RPAREN
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (207) abstract_declarator -> . pointer
    (208) abstract_declarator -> . pointer direct_abstract_declarator
    (209) abstract_declarator -> . direct_abstract_declarator
    (23) parameter_type_list_opt -> . empty
    (24) parameter_type_list_opt -> . parameter_type_list
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (183) pointer -> . TIMES type_qualifier_list_opt
    (184) pointer -> . TIMES type_qualifier_list_opt pointer
    (210) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (211) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (212) direct_abstract_declarator -> . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (213) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (214) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (215) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (216) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN
    (340) empty -> .
    (187) parameter_type_list -> . parameter_list
    (188) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (189) parameter_list -> . parameter_declaration
    (190) parameter_list -> . parameter_list COMMA parameter_declaration
    (191) parameter_declaration -> . declaration_specifiers id_declarator
    (192) parameter_declaration -> . declaration_specifiers typeid_noparen_declarator
    (193) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (98) declaration_specifiers -> . declaration_specifiers type_qualifier
    (99) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (100) declaration_specifiers -> . declaration_specifiers function_specifier
    (101) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (102) declaration_specifiers -> . type_specifier
    (103) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (104) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (93) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (94) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (95) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (96) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (97) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) storage_class_specifier -> . STATIC
    (108) storage_class_specifier -> . EXTERN
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . _THREAD_LOCAL
    (111) function_specifier -> . INLINE
    (112) function_specifier -> . _NORETURN
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION

    ID              shift and go to state 28
    LPAREN          shift and go to state 322
    TIMES           shift and go to state 30
    LBRACKET        shift and go to state 323
    RPAREN          reduce using rule 340 (empty -> .)
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ATOMIC         shift and go to state 50
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    AUTO            shift and go to state 54
    REGISTER        shift and go to state 55
    STATIC          shift and go to state 29
    EXTERN          shift and go to state 56
    TYPEDEF         shift and go to state 57
    _THREAD_LOCAL   shift and go to state 58
    INLINE          shift and go to state 59
    _NORETURN       shift and go to state 60
    _ALIGNAS        shift and go to state 61
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63

    id_declarator                  shift and go to state 93
    abstract_declarator            shift and go to state 450
    parameter_type_list_opt        shift and go to state 451
    direct_id_declarator           shift and go to state 19
    pointer                        shift and go to state 452
    direct_abstract_declarator     shift and go to state 325
    empty                          shift and go to state 453
    parameter_type_list            shift and go to state 454
    parameter_list                 shift and go to state 187
    parameter_declaration          shift and go to state 190
    declaration_specifiers         shift and go to state 192
    type_qualifier                 shift and go to state 21
    storage_class_specifier        shift and go to state 22
    function_specifier             shift and go to state 23
    type_specifier_no_typeid       shift and go to state 24
    type_specifier                 shift and go to state 25
    declaration_specifiers_no_type shift and go to state 193
    alignment_specifier            shift and go to state 27
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    atomic_specifier               shift and go to state 34
    struct_or_union                shift and go to state 37

state 323

    (212) direct_abstract_declarator -> LBRACKET . type_qualifier_list_opt assignment_expression_opt RBRACKET
    (214) direct_abstract_declarator -> LBRACKET . TIMES RBRACKET
    (27) type_qualifier_list_opt -> . empty
    (28) type_qualifier_list_opt -> . type_qualifier_list
    (340) empty -> .
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC

  ! shift/reduce conflict for TIMES resolved as shift
    TIMES           shift and go to state 456
    LPAREN          reduce using rule 340 (empty -> .)
    PLUSPLUS        reduce using rule 340 (empty -> .)
    MINUSMINUS      reduce using rule 340 (empty -> .)
    SIZEOF          reduce using rule 340 (empty -> .)
    _ALIGNOF        reduce using rule 340 (empty -> .)
    AND             reduce using rule 340 (empty -> .)
    PLUS            reduce using rule 340 (empty -> .)
    MINUS           reduce using rule 340 (empty -> .)
    NOT             reduce using rule 340 (empty -> .)
    LNOT            reduce using rule 340 (empty -> .)
    OFFSETOF        reduce using rule 340 (empty -> .)
    ID              reduce using rule 340 (empty -> .)
    INT_CONST_DEC   reduce using rule 340 (empty -> .)
    INT_CONST_OCT   reduce using rule 340 (empty -> .)
    INT_CONST_HEX   reduce using rule 340 (empty -> .)
    INT_CONST_BIN   reduce using rule 340 (empty -> .)
    INT_CONST_CHAR  reduce using rule 340 (empty -> .)
    FLOAT_CONST     reduce using rule 340 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 340 (empty -> .)
    CHAR_CONST      reduce using rule 340 (empty -> .)
    WCHAR_CONST     reduce using rule 340 (empty -> .)
    U8CHAR_CONST    reduce using rule 340 (empty -> .)
    U16CHAR_CONST   reduce using rule 340 (empty -> .)
    U32CHAR_CONST   reduce using rule 340 (empty -> .)
    STRING_LITERAL  reduce using rule 340 (empty -> .)
    WSTRING_LITERAL reduce using rule 340 (empty -> .)
    U8STRING_LITERAL reduce using rule 340 (empty -> .)
    U16STRING_LITERAL reduce using rule 340 (empty -> .)
    U32STRING_LITERAL reduce using rule 340 (empty -> .)
    RBRACKET        reduce using rule 340 (empty -> .)
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 81

  ! TIMES           [ reduce using rule 340 (empty -> .) ]

    type_qualifier_list_opt        shift and go to state 455
    empty                          shift and go to state 114
    type_qualifier_list            shift and go to state 115
    type_qualifier                 shift and go to state 116

state 324

    (45) direct_typeid_noparen_declarator -> TYPEID .

    LBRACKET        reduce using rule 45 (direct_typeid_noparen_declarator -> TYPEID .)
    LPAREN          reduce using rule 45 (direct_typeid_noparen_declarator -> TYPEID .)
    COMMA           reduce using rule 45 (direct_typeid_noparen_declarator -> TYPEID .)
    RPAREN          reduce using rule 45 (direct_typeid_noparen_declarator -> TYPEID .)


state 325

    (209) abstract_declarator -> direct_abstract_declarator .
    (211) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET assignment_expression_opt RBRACKET
    (213) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET TIMES RBRACKET
    (215) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list_opt RPAREN

    COMMA           reduce using rule 209 (abstract_declarator -> direct_abstract_declarator .)
    RPAREN          reduce using rule 209 (abstract_declarator -> direct_abstract_declarator .)
    LBRACKET        shift and go to state 457
    LPAREN          shift and go to state 458


state 326

    (140) id_init_declarator_list -> id_init_declarator_list COMMA init_declarator .

    COMMA           reduce using rule 140 (id_init_declarator_list -> id_init_declarator_list COMMA init_declarator .)
    SEMI            reduce using rule 140 (id_init_declarator_list -> id_init_declarator_list COMMA init_declarator .)


state 327

    (142) id_init_declarator -> id_declarator EQUALS initializer .

    COMMA           reduce using rule 142 (id_init_declarator -> id_declarator EQUALS initializer .)
    SEMI            reduce using rule 142 (id_init_declarator -> id_declarator EQUALS initializer .)


state 328

    (172) enum_specifier -> ENUM ID brace_open enumerator_list . brace_close
    (175) enumerator_list -> enumerator_list . COMMA
    (176) enumerator_list -> enumerator_list . COMMA enumerator
    (339) brace_close -> . RBRACE

    COMMA           shift and go to state 331
    RBRACE          shift and go to state 208

    brace_close                    shift and go to state 459

state 329

    (173) enum_specifier -> ENUM TYPEID brace_open enumerator_list . brace_close
    (175) enumerator_list -> enumerator_list . COMMA
    (176) enumerator_list -> enumerator_list . COMMA enumerator
    (339) brace_close -> . RBRACE

    COMMA           shift and go to state 331
    RBRACE          shift and go to state 208

    brace_close                    shift and go to state 460

state 330

    (171) enum_specifier -> ENUM brace_open enumerator_list brace_close .

    CONST           reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    RESTRICT        reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    VOLATILE        reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    _ATOMIC         reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    AUTO            reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    REGISTER        reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    STATIC          reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    EXTERN          reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    TYPEDEF         reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    _THREAD_LOCAL   reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    INLINE          reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    _NORETURN       reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    VOID            reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    _BOOL           reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    CHAR            reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    SHORT           reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    INT             reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    LONG            reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    FLOAT           reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    DOUBLE          reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    _COMPLEX        reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    SIGNED          reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    UNSIGNED        reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    __INT128        reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    _ALIGNAS        reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    ID              reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    LPAREN          reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    TIMES           reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    TYPEID          reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    SEMI            reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    LBRACKET        reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    COMMA           reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    RPAREN          reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    COLON           reduce using rule 171 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)


state 331

    (175) enumerator_list -> enumerator_list COMMA .
    (176) enumerator_list -> enumerator_list COMMA . enumerator
    (179) enumerator -> . ID
    (180) enumerator -> . ID EQUALS constant_expression

    COMMA           reduce using rule 175 (enumerator_list -> enumerator_list COMMA .)
    RBRACE          reduce using rule 175 (enumerator_list -> enumerator_list COMMA .)
    ID              shift and go to state 202

    enumerator                     shift and go to state 461

state 332

    (180) enumerator -> ID EQUALS . constant_expression
    (255) constant_expression -> . conditional_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    constant_expression            shift and go to state 462
    conditional_expression         shift and go to state 144
    binary_expression              shift and go to state 145
    cast_expression                shift and go to state 146
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 333

    (153) struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list . brace_close
    (160) struct_declaration_list -> struct_declaration_list . struct_declaration
    (339) brace_close -> . RBRACE
    (161) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt SEMI
    (162) struct_declaration -> . SEMI
    (163) struct_declaration -> . pppragma_directive
    (143) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (144) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (145) specifier_qualifier_list -> . type_specifier
    (146) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (147) specifier_qualifier_list -> . alignment_specifier
    (148) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (71) pppragma_directive -> . PPPRAGMA
    (72) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (73) pppragma_directive -> . _PRAGMA LPAREN unified_string_literal RPAREN
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION

    RBRACE          shift and go to state 208
    SEMI            shift and go to state 210
    PPPRAGMA        shift and go to state 15
    _PRAGMA         shift and go to state 16
    _ALIGNAS        shift and go to state 61
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ATOMIC         shift and go to state 50
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63

    struct_or_union                shift and go to state 37
    brace_close                    shift and go to state 463
    struct_declaration             shift and go to state 338
    specifier_qualifier_list       shift and go to state 209
    pppragma_directive             shift and go to state 211
    type_specifier_no_typeid       shift and go to state 24
    type_qualifier                 shift and go to state 116
    type_specifier                 shift and go to state 212
    type_qualifier_list            shift and go to state 213
    alignment_specifier            shift and go to state 214
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    atomic_specifier               shift and go to state 106

state 334

    (154) struct_or_union_specifier -> struct_or_union ID brace_open brace_close .

    CONST           reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    RESTRICT        reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    VOLATILE        reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    _ATOMIC         reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    AUTO            reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    REGISTER        reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    STATIC          reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    EXTERN          reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    TYPEDEF         reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    _THREAD_LOCAL   reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    INLINE          reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    _NORETURN       reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    VOID            reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    _BOOL           reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    CHAR            reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    SHORT           reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    INT             reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    LONG            reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    FLOAT           reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    DOUBLE          reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    _COMPLEX        reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    SIGNED          reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    UNSIGNED        reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    __INT128        reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    _ALIGNAS        reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    ID              reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    LPAREN          reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    TIMES           reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    TYPEID          reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    SEMI            reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    LBRACKET        reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    COMMA           reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    RPAREN          reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    COLON           reduce using rule 154 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)


state 335

    (155) struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list . brace_close
    (160) struct_declaration_list -> struct_declaration_list . struct_declaration
    (339) brace_close -> . RBRACE
    (161) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt SEMI
    (162) struct_declaration -> . SEMI
    (163) struct_declaration -> . pppragma_directive
    (143) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (144) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (145) specifier_qualifier_list -> . type_specifier
    (146) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (147) specifier_qualifier_list -> . alignment_specifier
    (148) specifier_qualifier_list -> . specifier_qualifier_list alignment_specifier
    (71) pppragma_directive -> . PPPRAGMA
    (72) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (73) pppragma_directive -> . _PRAGMA LPAREN unified_string_literal RPAREN
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION

    RBRACE          shift and go to state 208
    SEMI            shift and go to state 210
    PPPRAGMA        shift and go to state 15
    _PRAGMA         shift and go to state 16
    _ALIGNAS        shift and go to state 61
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ATOMIC         shift and go to state 50
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63

    struct_or_union                shift and go to state 37
    brace_close                    shift and go to state 464
    struct_declaration             shift and go to state 338
    specifier_qualifier_list       shift and go to state 209
    pppragma_directive             shift and go to state 211
    type_specifier_no_typeid       shift and go to state 24
    type_qualifier                 shift and go to state 116
    type_specifier                 shift and go to state 212
    type_qualifier_list            shift and go to state 213
    alignment_specifier            shift and go to state 214
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    atomic_specifier               shift and go to state 106

state 336

    (156) struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .

    CONST           reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    RESTRICT        reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    VOLATILE        reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    _ATOMIC         reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    AUTO            reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    REGISTER        reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    STATIC          reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    EXTERN          reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    TYPEDEF         reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    _THREAD_LOCAL   reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    INLINE          reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    _NORETURN       reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    VOID            reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    _BOOL           reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    CHAR            reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    SHORT           reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    INT             reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    LONG            reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    FLOAT           reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    DOUBLE          reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    _COMPLEX        reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    SIGNED          reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    UNSIGNED        reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    __INT128        reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    _ALIGNAS        reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    ID              reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    LPAREN          reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    TIMES           reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    TYPEID          reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    SEMI            reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    LBRACKET        reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    COMMA           reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    RPAREN          reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    COLON           reduce using rule 156 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)


state 337

    (151) struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .

    CONST           reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    RESTRICT        reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    VOLATILE        reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    _ATOMIC         reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    AUTO            reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    REGISTER        reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    STATIC          reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    EXTERN          reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    TYPEDEF         reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    _THREAD_LOCAL   reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    INLINE          reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    _NORETURN       reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    VOID            reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    _BOOL           reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    CHAR            reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    SHORT           reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    INT             reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    LONG            reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    FLOAT           reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    DOUBLE          reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    _COMPLEX        reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    SIGNED          reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    UNSIGNED        reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    __INT128        reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    _ALIGNAS        reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    ID              reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    LPAREN          reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    TIMES           reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    TYPEID          reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    SEMI            reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    LBRACKET        reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    COMMA           reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    RPAREN          reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    COLON           reduce using rule 151 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)


state 338

    (160) struct_declaration_list -> struct_declaration_list struct_declaration .

    RBRACE          reduce using rule 160 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SEMI            reduce using rule 160 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    PPPRAGMA        reduce using rule 160 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    _PRAGMA         reduce using rule 160 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    _ALIGNAS        reduce using rule 160 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    TYPEID          reduce using rule 160 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 160 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 160 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    _BOOL           reduce using rule 160 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 160 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 160 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 160 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 160 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 160 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 160 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    _COMPLEX        reduce using rule 160 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 160 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 160 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    __INT128        reduce using rule 160 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    _ATOMIC         reduce using rule 160 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 160 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    RESTRICT        reduce using rule 160 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOLATILE        reduce using rule 160 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 160 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNION           reduce using rule 160 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 339

    (161) struct_declaration -> specifier_qualifier_list struct_declarator_list_opt . SEMI

    SEMI            shift and go to state 465


state 340

    (143) specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .

    VOID            reduce using rule 143 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    _BOOL           reduce using rule 143 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    CHAR            reduce using rule 143 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    SHORT           reduce using rule 143 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    INT             reduce using rule 143 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    LONG            reduce using rule 143 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    FLOAT           reduce using rule 143 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    DOUBLE          reduce using rule 143 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    _COMPLEX        reduce using rule 143 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    SIGNED          reduce using rule 143 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    UNSIGNED        reduce using rule 143 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    __INT128        reduce using rule 143 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    CONST           reduce using rule 143 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    RESTRICT        reduce using rule 143 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    VOLATILE        reduce using rule 143 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    _ATOMIC         reduce using rule 143 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    _ALIGNAS        reduce using rule 143 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    COLON           reduce using rule 143 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    ID              reduce using rule 143 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    LPAREN          reduce using rule 143 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    TIMES           reduce using rule 143 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    TYPEID          reduce using rule 143 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    SEMI            reduce using rule 143 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    LBRACKET        reduce using rule 143 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    RPAREN          reduce using rule 143 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    COMMA           reduce using rule 143 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)


state 341

    (144) specifier_qualifier_list -> specifier_qualifier_list type_qualifier .

    VOID            reduce using rule 144 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    _BOOL           reduce using rule 144 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    CHAR            reduce using rule 144 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    SHORT           reduce using rule 144 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    INT             reduce using rule 144 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    LONG            reduce using rule 144 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    FLOAT           reduce using rule 144 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    DOUBLE          reduce using rule 144 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    _COMPLEX        reduce using rule 144 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    SIGNED          reduce using rule 144 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    UNSIGNED        reduce using rule 144 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    __INT128        reduce using rule 144 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    CONST           reduce using rule 144 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    RESTRICT        reduce using rule 144 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 144 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    _ATOMIC         reduce using rule 144 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    _ALIGNAS        reduce using rule 144 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    COLON           reduce using rule 144 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    ID              reduce using rule 144 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    LPAREN          reduce using rule 144 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    TIMES           reduce using rule 144 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    TYPEID          reduce using rule 144 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    SEMI            reduce using rule 144 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    LBRACKET        reduce using rule 144 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    RPAREN          reduce using rule 144 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    COMMA           reduce using rule 144 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)


state 342

    (148) specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .

    VOID            reduce using rule 148 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    _BOOL           reduce using rule 148 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    CHAR            reduce using rule 148 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    SHORT           reduce using rule 148 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    INT             reduce using rule 148 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    LONG            reduce using rule 148 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    FLOAT           reduce using rule 148 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    DOUBLE          reduce using rule 148 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    _COMPLEX        reduce using rule 148 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    SIGNED          reduce using rule 148 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    UNSIGNED        reduce using rule 148 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    __INT128        reduce using rule 148 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    CONST           reduce using rule 148 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    RESTRICT        reduce using rule 148 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    VOLATILE        reduce using rule 148 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    _ATOMIC         reduce using rule 148 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    _ALIGNAS        reduce using rule 148 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    COLON           reduce using rule 148 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    ID              reduce using rule 148 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    LPAREN          reduce using rule 148 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    TIMES           reduce using rule 148 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    TYPEID          reduce using rule 148 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    SEMI            reduce using rule 148 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    LBRACKET        reduce using rule 148 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    RPAREN          reduce using rule 148 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)
    COMMA           reduce using rule 148 (specifier_qualifier_list -> specifier_qualifier_list alignment_specifier .)


state 343

    (25) struct_declarator_list_opt -> empty .

    SEMI            reduce using rule 25 (struct_declarator_list_opt -> empty .)


state 344

    (26) struct_declarator_list_opt -> struct_declarator_list .
    (165) struct_declarator_list -> struct_declarator_list . COMMA struct_declarator

    SEMI            reduce using rule 26 (struct_declarator_list_opt -> struct_declarator_list .)
    COMMA           shift and go to state 466


state 345

    (164) struct_declarator_list -> struct_declarator .

    COMMA           reduce using rule 164 (struct_declarator_list -> struct_declarator .)
    SEMI            reduce using rule 164 (struct_declarator_list -> struct_declarator .)


state 346

    (166) struct_declarator -> declarator .
    (167) struct_declarator -> declarator . COLON constant_expression

    COMMA           reduce using rule 166 (struct_declarator -> declarator .)
    SEMI            reduce using rule 166 (struct_declarator -> declarator .)
    COLON           shift and go to state 467


state 347

    (168) struct_declarator -> COLON . constant_expression
    (255) constant_expression -> . conditional_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    constant_expression            shift and go to state 468
    conditional_expression         shift and go to state 144
    binary_expression              shift and go to state 145
    cast_expression                shift and go to state 146
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 348

    (146) specifier_qualifier_list -> type_qualifier_list type_specifier .

    VOID            reduce using rule 146 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    _BOOL           reduce using rule 146 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    CHAR            reduce using rule 146 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    SHORT           reduce using rule 146 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    INT             reduce using rule 146 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    LONG            reduce using rule 146 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    FLOAT           reduce using rule 146 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    DOUBLE          reduce using rule 146 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    _COMPLEX        reduce using rule 146 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    SIGNED          reduce using rule 146 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    UNSIGNED        reduce using rule 146 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    __INT128        reduce using rule 146 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    CONST           reduce using rule 146 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    RESTRICT        reduce using rule 146 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    VOLATILE        reduce using rule 146 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    _ATOMIC         reduce using rule 146 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    _ALIGNAS        reduce using rule 146 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    COLON           reduce using rule 146 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    ID              reduce using rule 146 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    LPAREN          reduce using rule 146 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    TIMES           reduce using rule 146 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    TYPEID          reduce using rule 146 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    SEMI            reduce using rule 146 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    LBRACKET        reduce using rule 146 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    RPAREN          reduce using rule 146 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    COMMA           reduce using rule 146 (specifier_qualifier_list -> type_qualifier_list type_specifier .)


state 349

    (130) atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .

    CONST           reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    RESTRICT        reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    VOLATILE        reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    _ATOMIC         reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    AUTO            reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    REGISTER        reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    STATIC          reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    EXTERN          reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    TYPEDEF         reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    _THREAD_LOCAL   reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    INLINE          reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    _NORETURN       reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    _ALIGNAS        reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    VOID            reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    _BOOL           reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    CHAR            reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    SHORT           reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    INT             reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    LONG            reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    FLOAT           reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    DOUBLE          reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    _COMPLEX        reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    SIGNED          reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    UNSIGNED        reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    __INT128        reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    ID              reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    LPAREN          reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    TIMES           reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    TYPEID          reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    SEMI            reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    ENUM            reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    STRUCT          reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    UNION           reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    LBRACKET        reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    COMMA           reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)
    COLON           reduce using rule 130 (atomic_specifier -> _ATOMIC LPAREN type_name RPAREN .)


state 350

    (206) type_name -> specifier_qualifier_list abstract_declarator_opt .

    RPAREN          reduce using rule 206 (type_name -> specifier_qualifier_list abstract_declarator_opt .)
    COMMA           reduce using rule 206 (type_name -> specifier_qualifier_list abstract_declarator_opt .)


state 351

    (210) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (216) direct_abstract_declarator -> LPAREN . parameter_type_list_opt RPAREN
    (207) abstract_declarator -> . pointer
    (208) abstract_declarator -> . pointer direct_abstract_declarator
    (209) abstract_declarator -> . direct_abstract_declarator
    (23) parameter_type_list_opt -> . empty
    (24) parameter_type_list_opt -> . parameter_type_list
    (183) pointer -> . TIMES type_qualifier_list_opt
    (184) pointer -> . TIMES type_qualifier_list_opt pointer
    (210) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (211) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (212) direct_abstract_declarator -> . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (213) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (214) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (215) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (216) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN
    (340) empty -> .
    (187) parameter_type_list -> . parameter_list
    (188) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (189) parameter_list -> . parameter_declaration
    (190) parameter_list -> . parameter_list COMMA parameter_declaration
    (191) parameter_declaration -> . declaration_specifiers id_declarator
    (192) parameter_declaration -> . declaration_specifiers typeid_noparen_declarator
    (193) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (98) declaration_specifiers -> . declaration_specifiers type_qualifier
    (99) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (100) declaration_specifiers -> . declaration_specifiers function_specifier
    (101) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (102) declaration_specifiers -> . type_specifier
    (103) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (104) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (93) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (94) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (95) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (96) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (97) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) storage_class_specifier -> . STATIC
    (108) storage_class_specifier -> . EXTERN
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . _THREAD_LOCAL
    (111) function_specifier -> . INLINE
    (112) function_specifier -> . _NORETURN
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION

    TIMES           shift and go to state 30
    LPAREN          shift and go to state 351
    LBRACKET        shift and go to state 323
    RPAREN          reduce using rule 340 (empty -> .)
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ATOMIC         shift and go to state 50
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    AUTO            shift and go to state 54
    REGISTER        shift and go to state 55
    STATIC          shift and go to state 29
    EXTERN          shift and go to state 56
    TYPEDEF         shift and go to state 57
    _THREAD_LOCAL   shift and go to state 58
    INLINE          shift and go to state 59
    _NORETURN       shift and go to state 60
    _ALIGNAS        shift and go to state 61
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63

    abstract_declarator            shift and go to state 450
    parameter_type_list_opt        shift and go to state 451
    pointer                        shift and go to state 352
    direct_abstract_declarator     shift and go to state 325
    empty                          shift and go to state 453
    parameter_type_list            shift and go to state 454
    parameter_list                 shift and go to state 187
    parameter_declaration          shift and go to state 190
    declaration_specifiers         shift and go to state 192
    type_qualifier                 shift and go to state 21
    storage_class_specifier        shift and go to state 22
    function_specifier             shift and go to state 23
    type_specifier_no_typeid       shift and go to state 24
    type_specifier                 shift and go to state 25
    declaration_specifiers_no_type shift and go to state 193
    alignment_specifier            shift and go to state 27
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    atomic_specifier               shift and go to state 34
    struct_or_union                shift and go to state 37

state 352

    (207) abstract_declarator -> pointer .
    (208) abstract_declarator -> pointer . direct_abstract_declarator
    (210) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (211) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (212) direct_abstract_declarator -> . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (213) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (214) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (215) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (216) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    RPAREN          reduce using rule 207 (abstract_declarator -> pointer .)
    COMMA           reduce using rule 207 (abstract_declarator -> pointer .)
    LPAREN          shift and go to state 351
    LBRACKET        shift and go to state 323

    direct_abstract_declarator     shift and go to state 447

state 353

    (177) alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .

    CONST           reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    RESTRICT        reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    VOLATILE        reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    _ATOMIC         reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    AUTO            reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    REGISTER        reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    STATIC          reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    EXTERN          reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    TYPEDEF         reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    _THREAD_LOCAL   reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    INLINE          reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    _NORETURN       reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    _ALIGNAS        reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    TYPEID          reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    ENUM            reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    VOID            reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    _BOOL           reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    CHAR            reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    SHORT           reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    INT             reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    LONG            reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    FLOAT           reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    DOUBLE          reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    _COMPLEX        reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    SIGNED          reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    UNSIGNED        reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    __INT128        reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    STRUCT          reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    UNION           reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    ID              reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    LPAREN          reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    TIMES           reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    SEMI            reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    COLON           reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    LBRACKET        reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)
    COMMA           reduce using rule 177 (alignment_specifier -> _ALIGNAS LPAREN type_name RPAREN .)


state 354

    (178) alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .

    CONST           reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    RESTRICT        reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    VOLATILE        reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    _ATOMIC         reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    AUTO            reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    REGISTER        reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    STATIC          reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    EXTERN          reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    TYPEDEF         reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    _THREAD_LOCAL   reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    INLINE          reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    _NORETURN       reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    _ALIGNAS        reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    TYPEID          reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    ENUM            reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    VOID            reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    _BOOL           reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    CHAR            reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    SHORT           reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    INT             reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    LONG            reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    FLOAT           reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    DOUBLE          reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    _COMPLEX        reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    SIGNED          reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    UNSIGNED        reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    __INT128        reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    STRUCT          reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    UNION           reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    ID              reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    LPAREN          reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    TIMES           reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    SEMI            reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    COLON           reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    LBRACKET        reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    RPAREN          reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)
    COMMA           reduce using rule 178 (alignment_specifier -> _ALIGNAS LPAREN constant_expression RPAREN .)


state 355

    (221) compound_statement -> brace_open block_item_list_opt brace_close .

    SEMI            reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    PPHASH          reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    PPPRAGMA        reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    _PRAGMA         reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    _STATIC_ASSERT  reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    ID              reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    LPAREN          reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    TIMES           reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    TYPEID          reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    ENUM            reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    VOID            reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    _BOOL           reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CHAR            reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    SHORT           reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT             reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    LONG            reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    FLOAT           reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    DOUBLE          reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    _COMPLEX        reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    SIGNED          reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    UNSIGNED        reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    __INT128        reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    _ATOMIC         reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CONST           reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    RESTRICT        reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    VOLATILE        reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    AUTO            reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    REGISTER        reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    STATIC          reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    EXTERN          reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    TYPEDEF         reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    _THREAD_LOCAL   reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INLINE          reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    _NORETURN       reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    _ALIGNAS        reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    STRUCT          reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    UNION           reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    $end            reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CASE            reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    DEFAULT         reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    IF              reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    SWITCH          reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    WHILE           reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    DO              reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    FOR             reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    GOTO            reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    BREAK           reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CONTINUE        reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    RETURN          reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    LBRACE          reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    PLUSPLUS        reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    MINUSMINUS      reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    SIZEOF          reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    _ALIGNOF        reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    AND             reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    PLUS            reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    MINUS           reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    NOT             reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    LNOT            reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    OFFSETOF        reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT_CONST_DEC   reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT_CONST_OCT   reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT_CONST_HEX   reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT_CONST_BIN   reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT_CONST_CHAR  reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    FLOAT_CONST     reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    HEX_FLOAT_CONST reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CHAR_CONST      reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    WCHAR_CONST     reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    U8CHAR_CONST    reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    U16CHAR_CONST   reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    U32CHAR_CONST   reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    STRING_LITERAL  reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    WSTRING_LITERAL reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    U8STRING_LITERAL reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    U16STRING_LITERAL reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    U32STRING_LITERAL reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    RBRACE          reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    RPAREN          reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)
    ELSE            reduce using rule 221 (compound_statement -> brace_open block_item_list_opt brace_close .)


state 356

    (220) block_item_list -> block_item_list block_item .

    ID              reduce using rule 220 (block_item_list -> block_item_list block_item .)
    CASE            reduce using rule 220 (block_item_list -> block_item_list block_item .)
    DEFAULT         reduce using rule 220 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 220 (block_item_list -> block_item_list block_item .)
    SWITCH          reduce using rule 220 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 220 (block_item_list -> block_item_list block_item .)
    DO              reduce using rule 220 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 220 (block_item_list -> block_item_list block_item .)
    GOTO            reduce using rule 220 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 220 (block_item_list -> block_item_list block_item .)
    CONTINUE        reduce using rule 220 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 220 (block_item_list -> block_item_list block_item .)
    PPPRAGMA        reduce using rule 220 (block_item_list -> block_item_list block_item .)
    _PRAGMA         reduce using rule 220 (block_item_list -> block_item_list block_item .)
    _STATIC_ASSERT  reduce using rule 220 (block_item_list -> block_item_list block_item .)
    LBRACE          reduce using rule 220 (block_item_list -> block_item_list block_item .)
    CONST           reduce using rule 220 (block_item_list -> block_item_list block_item .)
    RESTRICT        reduce using rule 220 (block_item_list -> block_item_list block_item .)
    VOLATILE        reduce using rule 220 (block_item_list -> block_item_list block_item .)
    _ATOMIC         reduce using rule 220 (block_item_list -> block_item_list block_item .)
    AUTO            reduce using rule 220 (block_item_list -> block_item_list block_item .)
    REGISTER        reduce using rule 220 (block_item_list -> block_item_list block_item .)
    STATIC          reduce using rule 220 (block_item_list -> block_item_list block_item .)
    EXTERN          reduce using rule 220 (block_item_list -> block_item_list block_item .)
    TYPEDEF         reduce using rule 220 (block_item_list -> block_item_list block_item .)
    _THREAD_LOCAL   reduce using rule 220 (block_item_list -> block_item_list block_item .)
    INLINE          reduce using rule 220 (block_item_list -> block_item_list block_item .)
    _NORETURN       reduce using rule 220 (block_item_list -> block_item_list block_item .)
    _ALIGNAS        reduce using rule 220 (block_item_list -> block_item_list block_item .)
    TYPEID          reduce using rule 220 (block_item_list -> block_item_list block_item .)
    ENUM            reduce using rule 220 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 220 (block_item_list -> block_item_list block_item .)
    _BOOL           reduce using rule 220 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 220 (block_item_list -> block_item_list block_item .)
    SHORT           reduce using rule 220 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 220 (block_item_list -> block_item_list block_item .)
    LONG            reduce using rule 220 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 220 (block_item_list -> block_item_list block_item .)
    DOUBLE          reduce using rule 220 (block_item_list -> block_item_list block_item .)
    _COMPLEX        reduce using rule 220 (block_item_list -> block_item_list block_item .)
    SIGNED          reduce using rule 220 (block_item_list -> block_item_list block_item .)
    UNSIGNED        reduce using rule 220 (block_item_list -> block_item_list block_item .)
    __INT128        reduce using rule 220 (block_item_list -> block_item_list block_item .)
    LPAREN          reduce using rule 220 (block_item_list -> block_item_list block_item .)
    STRUCT          reduce using rule 220 (block_item_list -> block_item_list block_item .)
    UNION           reduce using rule 220 (block_item_list -> block_item_list block_item .)
    PLUSPLUS        reduce using rule 220 (block_item_list -> block_item_list block_item .)
    MINUSMINUS      reduce using rule 220 (block_item_list -> block_item_list block_item .)
    SIZEOF          reduce using rule 220 (block_item_list -> block_item_list block_item .)
    _ALIGNOF        reduce using rule 220 (block_item_list -> block_item_list block_item .)
    AND             reduce using rule 220 (block_item_list -> block_item_list block_item .)
    TIMES           reduce using rule 220 (block_item_list -> block_item_list block_item .)
    PLUS            reduce using rule 220 (block_item_list -> block_item_list block_item .)
    MINUS           reduce using rule 220 (block_item_list -> block_item_list block_item .)
    NOT             reduce using rule 220 (block_item_list -> block_item_list block_item .)
    LNOT            reduce using rule 220 (block_item_list -> block_item_list block_item .)
    OFFSETOF        reduce using rule 220 (block_item_list -> block_item_list block_item .)
    INT_CONST_DEC   reduce using rule 220 (block_item_list -> block_item_list block_item .)
    INT_CONST_OCT   reduce using rule 220 (block_item_list -> block_item_list block_item .)
    INT_CONST_HEX   reduce using rule 220 (block_item_list -> block_item_list block_item .)
    INT_CONST_BIN   reduce using rule 220 (block_item_list -> block_item_list block_item .)
    INT_CONST_CHAR  reduce using rule 220 (block_item_list -> block_item_list block_item .)
    FLOAT_CONST     reduce using rule 220 (block_item_list -> block_item_list block_item .)
    HEX_FLOAT_CONST reduce using rule 220 (block_item_list -> block_item_list block_item .)
    CHAR_CONST      reduce using rule 220 (block_item_list -> block_item_list block_item .)
    WCHAR_CONST     reduce using rule 220 (block_item_list -> block_item_list block_item .)
    U8CHAR_CONST    reduce using rule 220 (block_item_list -> block_item_list block_item .)
    U16CHAR_CONST   reduce using rule 220 (block_item_list -> block_item_list block_item .)
    U32CHAR_CONST   reduce using rule 220 (block_item_list -> block_item_list block_item .)
    STRING_LITERAL  reduce using rule 220 (block_item_list -> block_item_list block_item .)
    WSTRING_LITERAL reduce using rule 220 (block_item_list -> block_item_list block_item .)
    U8STRING_LITERAL reduce using rule 220 (block_item_list -> block_item_list block_item .)
    U16STRING_LITERAL reduce using rule 220 (block_item_list -> block_item_list block_item .)
    U32STRING_LITERAL reduce using rule 220 (block_item_list -> block_item_list block_item .)
    SEMI            reduce using rule 220 (block_item_list -> block_item_list block_item .)
    RBRACE          reduce using rule 220 (block_item_list -> block_item_list block_item .)


state 357

    (13) expression_opt -> empty .

    SEMI            reduce using rule 13 (expression_opt -> empty .)
    RPAREN          reduce using rule 13 (expression_opt -> empty .)


state 358

    (222) labeled_statement -> ID COLON . pragmacomp_or_statement
    (86) pragmacomp_or_statement -> . pppragma_directive_list statement
    (87) pragmacomp_or_statement -> . statement
    (74) pppragma_directive_list -> . pppragma_directive
    (75) pppragma_directive_list -> . pppragma_directive_list pppragma_directive
    (78) statement -> . labeled_statement
    (79) statement -> . expression_statement
    (80) statement -> . compound_statement
    (81) statement -> . selection_statement
    (82) statement -> . iteration_statement
    (83) statement -> . jump_statement
    (84) statement -> . pppragma_directive
    (85) statement -> . static_assert
    (71) pppragma_directive -> . PPPRAGMA
    (72) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (73) pppragma_directive -> . _PRAGMA LPAREN unified_string_literal RPAREN
    (222) labeled_statement -> . ID COLON pragmacomp_or_statement
    (223) labeled_statement -> . CASE constant_expression COLON pragmacomp_or_statement
    (224) labeled_statement -> . DEFAULT COLON pragmacomp_or_statement
    (237) expression_statement -> . expression_opt SEMI
    (221) compound_statement -> . brace_open block_item_list_opt brace_close
    (225) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (226) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (227) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (228) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (229) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (230) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (231) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (232) jump_statement -> . GOTO ID SEMI
    (233) jump_statement -> . BREAK SEMI
    (234) jump_statement -> . CONTINUE SEMI
    (235) jump_statement -> . RETURN expression SEMI
    (236) jump_statement -> . RETURN SEMI
    (68) static_assert -> . _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN
    (69) static_assert -> . _STATIC_ASSERT LPAREN constant_expression RPAREN
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (338) brace_open -> . LBRACE
    (340) empty -> .
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    PPPRAGMA        shift and go to state 15
    _PRAGMA         shift and go to state 16
    ID              shift and go to state 233
    CASE            shift and go to state 234
    DEFAULT         shift and go to state 235
    IF              shift and go to state 237
    SWITCH          shift and go to state 240
    WHILE           shift and go to state 241
    DO              shift and go to state 242
    FOR             shift and go to state 243
    GOTO            shift and go to state 244
    BREAK           shift and go to state 245
    CONTINUE        shift and go to state 246
    RETURN          shift and go to state 247
    _STATIC_ASSERT  shift and go to state 18
    LBRACE          shift and go to state 121
    SEMI            reduce using rule 340 (empty -> .)
    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    pragmacomp_or_statement        shift and go to state 469
    pppragma_directive_list        shift and go to state 369
    statement                      shift and go to state 370
    pppragma_directive             shift and go to state 371
    labeled_statement              shift and go to state 225
    expression_statement           shift and go to state 226
    compound_statement             shift and go to state 227
    selection_statement            shift and go to state 228
    iteration_statement            shift and go to state 229
    jump_statement                 shift and go to state 230
    static_assert                  shift and go to state 232
    unified_string_literal         shift and go to state 143
    expression_opt                 shift and go to state 236
    brace_open                     shift and go to state 128
    expression                     shift and go to state 239
    empty                          shift and go to state 357
    assignment_expression          shift and go to state 248
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_wstring_literal        shift and go to state 164

state 359

    (223) labeled_statement -> CASE constant_expression . COLON pragmacomp_or_statement

    COLON           shift and go to state 470


state 360

    (224) labeled_statement -> DEFAULT COLON . pragmacomp_or_statement
    (86) pragmacomp_or_statement -> . pppragma_directive_list statement
    (87) pragmacomp_or_statement -> . statement
    (74) pppragma_directive_list -> . pppragma_directive
    (75) pppragma_directive_list -> . pppragma_directive_list pppragma_directive
    (78) statement -> . labeled_statement
    (79) statement -> . expression_statement
    (80) statement -> . compound_statement
    (81) statement -> . selection_statement
    (82) statement -> . iteration_statement
    (83) statement -> . jump_statement
    (84) statement -> . pppragma_directive
    (85) statement -> . static_assert
    (71) pppragma_directive -> . PPPRAGMA
    (72) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (73) pppragma_directive -> . _PRAGMA LPAREN unified_string_literal RPAREN
    (222) labeled_statement -> . ID COLON pragmacomp_or_statement
    (223) labeled_statement -> . CASE constant_expression COLON pragmacomp_or_statement
    (224) labeled_statement -> . DEFAULT COLON pragmacomp_or_statement
    (237) expression_statement -> . expression_opt SEMI
    (221) compound_statement -> . brace_open block_item_list_opt brace_close
    (225) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (226) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (227) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (228) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (229) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (230) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (231) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (232) jump_statement -> . GOTO ID SEMI
    (233) jump_statement -> . BREAK SEMI
    (234) jump_statement -> . CONTINUE SEMI
    (235) jump_statement -> . RETURN expression SEMI
    (236) jump_statement -> . RETURN SEMI
    (68) static_assert -> . _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN
    (69) static_assert -> . _STATIC_ASSERT LPAREN constant_expression RPAREN
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (338) brace_open -> . LBRACE
    (340) empty -> .
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    PPPRAGMA        shift and go to state 15
    _PRAGMA         shift and go to state 16
    ID              shift and go to state 233
    CASE            shift and go to state 234
    DEFAULT         shift and go to state 235
    IF              shift and go to state 237
    SWITCH          shift and go to state 240
    WHILE           shift and go to state 241
    DO              shift and go to state 242
    FOR             shift and go to state 243
    GOTO            shift and go to state 244
    BREAK           shift and go to state 245
    CONTINUE        shift and go to state 246
    RETURN          shift and go to state 247
    _STATIC_ASSERT  shift and go to state 18
    LBRACE          shift and go to state 121
    SEMI            reduce using rule 340 (empty -> .)
    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    pragmacomp_or_statement        shift and go to state 471
    pppragma_directive_list        shift and go to state 369
    statement                      shift and go to state 370
    pppragma_directive             shift and go to state 371
    labeled_statement              shift and go to state 225
    expression_statement           shift and go to state 226
    compound_statement             shift and go to state 227
    selection_statement            shift and go to state 228
    iteration_statement            shift and go to state 229
    jump_statement                 shift and go to state 230
    static_assert                  shift and go to state 232
    unified_string_literal         shift and go to state 143
    expression_opt                 shift and go to state 236
    brace_open                     shift and go to state 128
    expression                     shift and go to state 239
    empty                          shift and go to state 357
    assignment_expression          shift and go to state 248
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_wstring_literal        shift and go to state 164

state 361

    (237) expression_statement -> expression_opt SEMI .

    ID              reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    CASE            reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    DEFAULT         reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    IF              reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    SWITCH          reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    WHILE           reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    DO              reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    FOR             reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    GOTO            reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    BREAK           reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    CONTINUE        reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    RETURN          reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    PPPRAGMA        reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    _PRAGMA         reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    _STATIC_ASSERT  reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    LBRACE          reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    CONST           reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    RESTRICT        reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    VOLATILE        reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    _ATOMIC         reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    AUTO            reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    REGISTER        reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    STATIC          reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    EXTERN          reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    TYPEDEF         reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    _THREAD_LOCAL   reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    INLINE          reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    _NORETURN       reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    _ALIGNAS        reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    TYPEID          reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    ENUM            reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    VOID            reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    _BOOL           reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    CHAR            reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    SHORT           reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    INT             reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    LONG            reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    FLOAT           reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    DOUBLE          reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    _COMPLEX        reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    SIGNED          reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    UNSIGNED        reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    __INT128        reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    LPAREN          reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    STRUCT          reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    UNION           reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    PLUSPLUS        reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    MINUSMINUS      reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    SIZEOF          reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    _ALIGNOF        reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    AND             reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    TIMES           reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    PLUS            reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    MINUS           reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    NOT             reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    LNOT            reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    OFFSETOF        reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    INT_CONST_DEC   reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    INT_CONST_OCT   reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    INT_CONST_HEX   reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    INT_CONST_BIN   reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    INT_CONST_CHAR  reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    FLOAT_CONST     reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    HEX_FLOAT_CONST reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    CHAR_CONST      reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    WCHAR_CONST     reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    U8CHAR_CONST    reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    U16CHAR_CONST   reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    U32CHAR_CONST   reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    STRING_LITERAL  reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    WSTRING_LITERAL reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    U8STRING_LITERAL reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    U16STRING_LITERAL reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    U32STRING_LITERAL reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    SEMI            reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    RBRACE          reduce using rule 237 (expression_statement -> expression_opt SEMI .)
    ELSE            reduce using rule 237 (expression_statement -> expression_opt SEMI .)


state 362

    (225) selection_statement -> IF LPAREN . expression RPAREN pragmacomp_or_statement
    (226) selection_statement -> IF LPAREN . expression RPAREN statement ELSE pragmacomp_or_statement
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    expression                     shift and go to state 472
    assignment_expression          shift and go to state 248
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 363

    (240) assignment_expression -> LPAREN compound_statement . RPAREN

    RPAREN          shift and go to state 473


state 364

    (302) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list COMMA brace_close
    (278) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 474


state 365

    (239) expression -> expression COMMA . assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    assignment_expression          shift and go to state 475
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 366

    (227) selection_statement -> SWITCH LPAREN . expression RPAREN pragmacomp_or_statement
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    expression                     shift and go to state 476
    assignment_expression          shift and go to state 248
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 367

    (228) iteration_statement -> WHILE LPAREN . expression RPAREN pragmacomp_or_statement
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    expression                     shift and go to state 477
    assignment_expression          shift and go to state 248
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 368

    (229) iteration_statement -> DO pragmacomp_or_statement . WHILE LPAREN expression RPAREN SEMI

    WHILE           shift and go to state 478


state 369

    (86) pragmacomp_or_statement -> pppragma_directive_list . statement
    (75) pppragma_directive_list -> pppragma_directive_list . pppragma_directive
    (78) statement -> . labeled_statement
    (79) statement -> . expression_statement
    (80) statement -> . compound_statement
    (81) statement -> . selection_statement
    (82) statement -> . iteration_statement
    (83) statement -> . jump_statement
    (84) statement -> . pppragma_directive
    (85) statement -> . static_assert
    (71) pppragma_directive -> . PPPRAGMA
    (72) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (73) pppragma_directive -> . _PRAGMA LPAREN unified_string_literal RPAREN
    (222) labeled_statement -> . ID COLON pragmacomp_or_statement
    (223) labeled_statement -> . CASE constant_expression COLON pragmacomp_or_statement
    (224) labeled_statement -> . DEFAULT COLON pragmacomp_or_statement
    (237) expression_statement -> . expression_opt SEMI
    (221) compound_statement -> . brace_open block_item_list_opt brace_close
    (225) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (226) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (227) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (228) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (229) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (230) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (231) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (232) jump_statement -> . GOTO ID SEMI
    (233) jump_statement -> . BREAK SEMI
    (234) jump_statement -> . CONTINUE SEMI
    (235) jump_statement -> . RETURN expression SEMI
    (236) jump_statement -> . RETURN SEMI
    (68) static_assert -> . _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN
    (69) static_assert -> . _STATIC_ASSERT LPAREN constant_expression RPAREN
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (338) brace_open -> . LBRACE
    (340) empty -> .
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    PPPRAGMA        shift and go to state 15
    _PRAGMA         shift and go to state 16
    ID              shift and go to state 233
    CASE            shift and go to state 234
    DEFAULT         shift and go to state 235
    IF              shift and go to state 237
    SWITCH          shift and go to state 240
    WHILE           shift and go to state 241
    DO              shift and go to state 242
    FOR             shift and go to state 243
    GOTO            shift and go to state 244
    BREAK           shift and go to state 245
    CONTINUE        shift and go to state 246
    RETURN          shift and go to state 247
    _STATIC_ASSERT  shift and go to state 18
    LBRACE          shift and go to state 121
    SEMI            reduce using rule 340 (empty -> .)
    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    statement                      shift and go to state 479
    pppragma_directive             shift and go to state 480
    labeled_statement              shift and go to state 225
    expression_statement           shift and go to state 226
    compound_statement             shift and go to state 227
    selection_statement            shift and go to state 228
    iteration_statement            shift and go to state 229
    jump_statement                 shift and go to state 230
    static_assert                  shift and go to state 232
    unified_string_literal         shift and go to state 143
    expression_opt                 shift and go to state 236
    brace_open                     shift and go to state 128
    expression                     shift and go to state 239
    empty                          shift and go to state 357
    assignment_expression          shift and go to state 248
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_wstring_literal        shift and go to state 164

state 370

    (87) pragmacomp_or_statement -> statement .

    WHILE           reduce using rule 87 (pragmacomp_or_statement -> statement .)
    ID              reduce using rule 87 (pragmacomp_or_statement -> statement .)
    CASE            reduce using rule 87 (pragmacomp_or_statement -> statement .)
    DEFAULT         reduce using rule 87 (pragmacomp_or_statement -> statement .)
    IF              reduce using rule 87 (pragmacomp_or_statement -> statement .)
    SWITCH          reduce using rule 87 (pragmacomp_or_statement -> statement .)
    DO              reduce using rule 87 (pragmacomp_or_statement -> statement .)
    FOR             reduce using rule 87 (pragmacomp_or_statement -> statement .)
    GOTO            reduce using rule 87 (pragmacomp_or_statement -> statement .)
    BREAK           reduce using rule 87 (pragmacomp_or_statement -> statement .)
    CONTINUE        reduce using rule 87 (pragmacomp_or_statement -> statement .)
    RETURN          reduce using rule 87 (pragmacomp_or_statement -> statement .)
    PPPRAGMA        reduce using rule 87 (pragmacomp_or_statement -> statement .)
    _PRAGMA         reduce using rule 87 (pragmacomp_or_statement -> statement .)
    _STATIC_ASSERT  reduce using rule 87 (pragmacomp_or_statement -> statement .)
    LBRACE          reduce using rule 87 (pragmacomp_or_statement -> statement .)
    CONST           reduce using rule 87 (pragmacomp_or_statement -> statement .)
    RESTRICT        reduce using rule 87 (pragmacomp_or_statement -> statement .)
    VOLATILE        reduce using rule 87 (pragmacomp_or_statement -> statement .)
    _ATOMIC         reduce using rule 87 (pragmacomp_or_statement -> statement .)
    AUTO            reduce using rule 87 (pragmacomp_or_statement -> statement .)
    REGISTER        reduce using rule 87 (pragmacomp_or_statement -> statement .)
    STATIC          reduce using rule 87 (pragmacomp_or_statement -> statement .)
    EXTERN          reduce using rule 87 (pragmacomp_or_statement -> statement .)
    TYPEDEF         reduce using rule 87 (pragmacomp_or_statement -> statement .)
    _THREAD_LOCAL   reduce using rule 87 (pragmacomp_or_statement -> statement .)
    INLINE          reduce using rule 87 (pragmacomp_or_statement -> statement .)
    _NORETURN       reduce using rule 87 (pragmacomp_or_statement -> statement .)
    _ALIGNAS        reduce using rule 87 (pragmacomp_or_statement -> statement .)
    TYPEID          reduce using rule 87 (pragmacomp_or_statement -> statement .)
    ENUM            reduce using rule 87 (pragmacomp_or_statement -> statement .)
    VOID            reduce using rule 87 (pragmacomp_or_statement -> statement .)
    _BOOL           reduce using rule 87 (pragmacomp_or_statement -> statement .)
    CHAR            reduce using rule 87 (pragmacomp_or_statement -> statement .)
    SHORT           reduce using rule 87 (pragmacomp_or_statement -> statement .)
    INT             reduce using rule 87 (pragmacomp_or_statement -> statement .)
    LONG            reduce using rule 87 (pragmacomp_or_statement -> statement .)
    FLOAT           reduce using rule 87 (pragmacomp_or_statement -> statement .)
    DOUBLE          reduce using rule 87 (pragmacomp_or_statement -> statement .)
    _COMPLEX        reduce using rule 87 (pragmacomp_or_statement -> statement .)
    SIGNED          reduce using rule 87 (pragmacomp_or_statement -> statement .)
    UNSIGNED        reduce using rule 87 (pragmacomp_or_statement -> statement .)
    __INT128        reduce using rule 87 (pragmacomp_or_statement -> statement .)
    LPAREN          reduce using rule 87 (pragmacomp_or_statement -> statement .)
    STRUCT          reduce using rule 87 (pragmacomp_or_statement -> statement .)
    UNION           reduce using rule 87 (pragmacomp_or_statement -> statement .)
    PLUSPLUS        reduce using rule 87 (pragmacomp_or_statement -> statement .)
    MINUSMINUS      reduce using rule 87 (pragmacomp_or_statement -> statement .)
    SIZEOF          reduce using rule 87 (pragmacomp_or_statement -> statement .)
    _ALIGNOF        reduce using rule 87 (pragmacomp_or_statement -> statement .)
    AND             reduce using rule 87 (pragmacomp_or_statement -> statement .)
    TIMES           reduce using rule 87 (pragmacomp_or_statement -> statement .)
    PLUS            reduce using rule 87 (pragmacomp_or_statement -> statement .)
    MINUS           reduce using rule 87 (pragmacomp_or_statement -> statement .)
    NOT             reduce using rule 87 (pragmacomp_or_statement -> statement .)
    LNOT            reduce using rule 87 (pragmacomp_or_statement -> statement .)
    OFFSETOF        reduce using rule 87 (pragmacomp_or_statement -> statement .)
    INT_CONST_DEC   reduce using rule 87 (pragmacomp_or_statement -> statement .)
    INT_CONST_OCT   reduce using rule 87 (pragmacomp_or_statement -> statement .)
    INT_CONST_HEX   reduce using rule 87 (pragmacomp_or_statement -> statement .)
    INT_CONST_BIN   reduce using rule 87 (pragmacomp_or_statement -> statement .)
    INT_CONST_CHAR  reduce using rule 87 (pragmacomp_or_statement -> statement .)
    FLOAT_CONST     reduce using rule 87 (pragmacomp_or_statement -> statement .)
    HEX_FLOAT_CONST reduce using rule 87 (pragmacomp_or_statement -> statement .)
    CHAR_CONST      reduce using rule 87 (pragmacomp_or_statement -> statement .)
    WCHAR_CONST     reduce using rule 87 (pragmacomp_or_statement -> statement .)
    U8CHAR_CONST    reduce using rule 87 (pragmacomp_or_statement -> statement .)
    U16CHAR_CONST   reduce using rule 87 (pragmacomp_or_statement -> statement .)
    U32CHAR_CONST   reduce using rule 87 (pragmacomp_or_statement -> statement .)
    STRING_LITERAL  reduce using rule 87 (pragmacomp_or_statement -> statement .)
    WSTRING_LITERAL reduce using rule 87 (pragmacomp_or_statement -> statement .)
    U8STRING_LITERAL reduce using rule 87 (pragmacomp_or_statement -> statement .)
    U16STRING_LITERAL reduce using rule 87 (pragmacomp_or_statement -> statement .)
    U32STRING_LITERAL reduce using rule 87 (pragmacomp_or_statement -> statement .)
    SEMI            reduce using rule 87 (pragmacomp_or_statement -> statement .)
    RBRACE          reduce using rule 87 (pragmacomp_or_statement -> statement .)
    ELSE            reduce using rule 87 (pragmacomp_or_statement -> statement .)


state 371

    (74) pppragma_directive_list -> pppragma_directive .
    (84) statement -> pppragma_directive .

  ! reduce/reduce conflict for WHILE resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for ID resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for CASE resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for IF resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for SWITCH resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for DO resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for FOR resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for GOTO resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for BREAK resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for RETURN resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for PPPRAGMA resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for _PRAGMA resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for _STATIC_ASSERT resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for LBRACE resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for LPAREN resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for SIZEOF resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for _ALIGNOF resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for AND resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for TIMES resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for PLUS resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for MINUS resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for NOT resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for LNOT resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for OFFSETOF resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for INT_CONST_DEC resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for INT_CONST_OCT resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for INT_CONST_HEX resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for INT_CONST_BIN resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for INT_CONST_CHAR resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for FLOAT_CONST resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for HEX_FLOAT_CONST resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for CHAR_CONST resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for WCHAR_CONST resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for U8CHAR_CONST resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for U16CHAR_CONST resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for U32CHAR_CONST resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for STRING_LITERAL resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for WSTRING_LITERAL resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for U8STRING_LITERAL resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for U16STRING_LITERAL resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for U32STRING_LITERAL resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for SEMI resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
    PPPRAGMA        reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    _PRAGMA         reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    ID              reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    CASE            reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    DEFAULT         reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    IF              reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    SWITCH          reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    WHILE           reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    DO              reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    FOR             reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    GOTO            reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    BREAK           reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    CONTINUE        reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    RETURN          reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    _STATIC_ASSERT  reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    LBRACE          reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    LPAREN          reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    PLUSPLUS        reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    MINUSMINUS      reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    SIZEOF          reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    _ALIGNOF        reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    AND             reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    TIMES           reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    PLUS            reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    MINUS           reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    NOT             reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    LNOT            reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    OFFSETOF        reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    INT_CONST_DEC   reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    INT_CONST_OCT   reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    INT_CONST_HEX   reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    INT_CONST_BIN   reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    INT_CONST_CHAR  reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    FLOAT_CONST     reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    HEX_FLOAT_CONST reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    CHAR_CONST      reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    WCHAR_CONST     reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    U8CHAR_CONST    reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    U16CHAR_CONST   reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    U32CHAR_CONST   reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    STRING_LITERAL  reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    WSTRING_LITERAL reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    U8STRING_LITERAL reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    U16STRING_LITERAL reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    U32STRING_LITERAL reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    SEMI            reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    CONST           reduce using rule 84 (statement -> pppragma_directive .)
    RESTRICT        reduce using rule 84 (statement -> pppragma_directive .)
    VOLATILE        reduce using rule 84 (statement -> pppragma_directive .)
    _ATOMIC         reduce using rule 84 (statement -> pppragma_directive .)
    AUTO            reduce using rule 84 (statement -> pppragma_directive .)
    REGISTER        reduce using rule 84 (statement -> pppragma_directive .)
    STATIC          reduce using rule 84 (statement -> pppragma_directive .)
    EXTERN          reduce using rule 84 (statement -> pppragma_directive .)
    TYPEDEF         reduce using rule 84 (statement -> pppragma_directive .)
    _THREAD_LOCAL   reduce using rule 84 (statement -> pppragma_directive .)
    INLINE          reduce using rule 84 (statement -> pppragma_directive .)
    _NORETURN       reduce using rule 84 (statement -> pppragma_directive .)
    _ALIGNAS        reduce using rule 84 (statement -> pppragma_directive .)
    TYPEID          reduce using rule 84 (statement -> pppragma_directive .)
    ENUM            reduce using rule 84 (statement -> pppragma_directive .)
    VOID            reduce using rule 84 (statement -> pppragma_directive .)
    _BOOL           reduce using rule 84 (statement -> pppragma_directive .)
    CHAR            reduce using rule 84 (statement -> pppragma_directive .)
    SHORT           reduce using rule 84 (statement -> pppragma_directive .)
    INT             reduce using rule 84 (statement -> pppragma_directive .)
    LONG            reduce using rule 84 (statement -> pppragma_directive .)
    FLOAT           reduce using rule 84 (statement -> pppragma_directive .)
    DOUBLE          reduce using rule 84 (statement -> pppragma_directive .)
    _COMPLEX        reduce using rule 84 (statement -> pppragma_directive .)
    SIGNED          reduce using rule 84 (statement -> pppragma_directive .)
    UNSIGNED        reduce using rule 84 (statement -> pppragma_directive .)
    __INT128        reduce using rule 84 (statement -> pppragma_directive .)
    STRUCT          reduce using rule 84 (statement -> pppragma_directive .)
    UNION           reduce using rule 84 (statement -> pppragma_directive .)
    RBRACE          reduce using rule 84 (statement -> pppragma_directive .)
    ELSE            reduce using rule 84 (statement -> pppragma_directive .)

  ! WHILE           [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! ID              [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! CASE            [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! DEFAULT         [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! IF              [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! SWITCH          [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! DO              [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! FOR             [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! GOTO            [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! BREAK           [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! CONTINUE        [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! RETURN          [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! PPPRAGMA        [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! _PRAGMA         [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! _STATIC_ASSERT  [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! LBRACE          [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! LPAREN          [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! PLUSPLUS        [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! MINUSMINUS      [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! SIZEOF          [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! _ALIGNOF        [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! AND             [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! TIMES           [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! PLUS            [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! MINUS           [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! NOT             [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! LNOT            [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! OFFSETOF        [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! INT_CONST_DEC   [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! INT_CONST_OCT   [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! INT_CONST_HEX   [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! INT_CONST_BIN   [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! INT_CONST_CHAR  [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! FLOAT_CONST     [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! HEX_FLOAT_CONST [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! CHAR_CONST      [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! WCHAR_CONST     [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! U8CHAR_CONST    [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! U16CHAR_CONST   [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! U32CHAR_CONST   [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! STRING_LITERAL  [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! WSTRING_LITERAL [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! U8STRING_LITERAL [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! U16STRING_LITERAL [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! U32STRING_LITERAL [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! SEMI            [ reduce using rule 84 (statement -> pppragma_directive .) ]


state 372

    (230) iteration_statement -> FOR LPAREN . expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (231) iteration_statement -> FOR LPAREN . declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (90) declaration -> . decl_body SEMI
    (340) empty -> .
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (88) decl_body -> . declaration_specifiers init_declarator_list_opt
    (89) decl_body -> . declaration_specifiers_no_type id_init_declarator_list_opt
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (98) declaration_specifiers -> . declaration_specifiers type_qualifier
    (99) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (100) declaration_specifiers -> . declaration_specifiers function_specifier
    (101) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (102) declaration_specifiers -> . type_specifier
    (103) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (104) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (93) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (94) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (95) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (96) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (97) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) storage_class_specifier -> . STATIC
    (108) storage_class_specifier -> . EXTERN
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . _THREAD_LOCAL
    (111) function_specifier -> . INLINE
    (112) function_specifier -> . _NORETURN
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    SEMI            reduce using rule 340 (empty -> .)
    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 72
    AUTO            shift and go to state 54
    REGISTER        shift and go to state 55
    STATIC          shift and go to state 29
    EXTERN          shift and go to state 56
    TYPEDEF         shift and go to state 57
    _THREAD_LOCAL   shift and go to state 58
    INLINE          shift and go to state 59
    _NORETURN       shift and go to state 60
    _ALIGNAS        shift and go to state 61
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    OFFSETOF        shift and go to state 165
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    expression_opt                 shift and go to state 481
    declaration                    shift and go to state 482
    empty                          shift and go to state 357
    expression                     shift and go to state 239
    decl_body                      shift and go to state 13
    assignment_expression          shift and go to state 248
    declaration_specifiers         shift and go to state 69
    declaration_specifiers_no_type shift and go to state 70
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    type_qualifier                 shift and go to state 21
    storage_class_specifier        shift and go to state 22
    function_specifier             shift and go to state 23
    type_specifier_no_typeid       shift and go to state 24
    type_specifier                 shift and go to state 25
    alignment_specifier            shift and go to state 27
    atomic_specifier               shift and go to state 71
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    primary_expression             shift and go to state 158
    struct_or_union                shift and go to state 37
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 373

    (232) jump_statement -> GOTO ID . SEMI

    SEMI            shift and go to state 483


state 374

    (233) jump_statement -> BREAK SEMI .

    ID              reduce using rule 233 (jump_statement -> BREAK SEMI .)
    CASE            reduce using rule 233 (jump_statement -> BREAK SEMI .)
    DEFAULT         reduce using rule 233 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 233 (jump_statement -> BREAK SEMI .)
    SWITCH          reduce using rule 233 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 233 (jump_statement -> BREAK SEMI .)
    DO              reduce using rule 233 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 233 (jump_statement -> BREAK SEMI .)
    GOTO            reduce using rule 233 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 233 (jump_statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 233 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 233 (jump_statement -> BREAK SEMI .)
    PPPRAGMA        reduce using rule 233 (jump_statement -> BREAK SEMI .)
    _PRAGMA         reduce using rule 233 (jump_statement -> BREAK SEMI .)
    _STATIC_ASSERT  reduce using rule 233 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 233 (jump_statement -> BREAK SEMI .)
    CONST           reduce using rule 233 (jump_statement -> BREAK SEMI .)
    RESTRICT        reduce using rule 233 (jump_statement -> BREAK SEMI .)
    VOLATILE        reduce using rule 233 (jump_statement -> BREAK SEMI .)
    _ATOMIC         reduce using rule 233 (jump_statement -> BREAK SEMI .)
    AUTO            reduce using rule 233 (jump_statement -> BREAK SEMI .)
    REGISTER        reduce using rule 233 (jump_statement -> BREAK SEMI .)
    STATIC          reduce using rule 233 (jump_statement -> BREAK SEMI .)
    EXTERN          reduce using rule 233 (jump_statement -> BREAK SEMI .)
    TYPEDEF         reduce using rule 233 (jump_statement -> BREAK SEMI .)
    _THREAD_LOCAL   reduce using rule 233 (jump_statement -> BREAK SEMI .)
    INLINE          reduce using rule 233 (jump_statement -> BREAK SEMI .)
    _NORETURN       reduce using rule 233 (jump_statement -> BREAK SEMI .)
    _ALIGNAS        reduce using rule 233 (jump_statement -> BREAK SEMI .)
    TYPEID          reduce using rule 233 (jump_statement -> BREAK SEMI .)
    ENUM            reduce using rule 233 (jump_statement -> BREAK SEMI .)
    VOID            reduce using rule 233 (jump_statement -> BREAK SEMI .)
    _BOOL           reduce using rule 233 (jump_statement -> BREAK SEMI .)
    CHAR            reduce using rule 233 (jump_statement -> BREAK SEMI .)
    SHORT           reduce using rule 233 (jump_statement -> BREAK SEMI .)
    INT             reduce using rule 233 (jump_statement -> BREAK SEMI .)
    LONG            reduce using rule 233 (jump_statement -> BREAK SEMI .)
    FLOAT           reduce using rule 233 (jump_statement -> BREAK SEMI .)
    DOUBLE          reduce using rule 233 (jump_statement -> BREAK SEMI .)
    _COMPLEX        reduce using rule 233 (jump_statement -> BREAK SEMI .)
    SIGNED          reduce using rule 233 (jump_statement -> BREAK SEMI .)
    UNSIGNED        reduce using rule 233 (jump_statement -> BREAK SEMI .)
    __INT128        reduce using rule 233 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 233 (jump_statement -> BREAK SEMI .)
    STRUCT          reduce using rule 233 (jump_statement -> BREAK SEMI .)
    UNION           reduce using rule 233 (jump_statement -> BREAK SEMI .)
    PLUSPLUS        reduce using rule 233 (jump_statement -> BREAK SEMI .)
    MINUSMINUS      reduce using rule 233 (jump_statement -> BREAK SEMI .)
    SIZEOF          reduce using rule 233 (jump_statement -> BREAK SEMI .)
    _ALIGNOF        reduce using rule 233 (jump_statement -> BREAK SEMI .)
    AND             reduce using rule 233 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 233 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 233 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 233 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 233 (jump_statement -> BREAK SEMI .)
    LNOT            reduce using rule 233 (jump_statement -> BREAK SEMI .)
    OFFSETOF        reduce using rule 233 (jump_statement -> BREAK SEMI .)
    INT_CONST_DEC   reduce using rule 233 (jump_statement -> BREAK SEMI .)
    INT_CONST_OCT   reduce using rule 233 (jump_statement -> BREAK SEMI .)
    INT_CONST_HEX   reduce using rule 233 (jump_statement -> BREAK SEMI .)
    INT_CONST_BIN   reduce using rule 233 (jump_statement -> BREAK SEMI .)
    INT_CONST_CHAR  reduce using rule 233 (jump_statement -> BREAK SEMI .)
    FLOAT_CONST     reduce using rule 233 (jump_statement -> BREAK SEMI .)
    HEX_FLOAT_CONST reduce using rule 233 (jump_statement -> BREAK SEMI .)
    CHAR_CONST      reduce using rule 233 (jump_statement -> BREAK SEMI .)
    WCHAR_CONST     reduce using rule 233 (jump_statement -> BREAK SEMI .)
    U8CHAR_CONST    reduce using rule 233 (jump_statement -> BREAK SEMI .)
    U16CHAR_CONST   reduce using rule 233 (jump_statement -> BREAK SEMI .)
    U32CHAR_CONST   reduce using rule 233 (jump_statement -> BREAK SEMI .)
    STRING_LITERAL  reduce using rule 233 (jump_statement -> BREAK SEMI .)
    WSTRING_LITERAL reduce using rule 233 (jump_statement -> BREAK SEMI .)
    U8STRING_LITERAL reduce using rule 233 (jump_statement -> BREAK SEMI .)
    U16STRING_LITERAL reduce using rule 233 (jump_statement -> BREAK SEMI .)
    U32STRING_LITERAL reduce using rule 233 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 233 (jump_statement -> BREAK SEMI .)
    RBRACE          reduce using rule 233 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 233 (jump_statement -> BREAK SEMI .)


state 375

    (234) jump_statement -> CONTINUE SEMI .

    ID              reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    CASE            reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    DEFAULT         reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    IF              reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    SWITCH          reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    WHILE           reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    DO              reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    FOR             reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    GOTO            reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    BREAK           reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    PPPRAGMA        reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    _PRAGMA         reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    _STATIC_ASSERT  reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    LBRACE          reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    CONST           reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    RESTRICT        reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    VOLATILE        reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    _ATOMIC         reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    AUTO            reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    REGISTER        reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    STATIC          reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    EXTERN          reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    TYPEDEF         reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    _THREAD_LOCAL   reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    INLINE          reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    _NORETURN       reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    _ALIGNAS        reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    TYPEID          reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    ENUM            reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    VOID            reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    _BOOL           reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    CHAR            reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    SHORT           reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    INT             reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    LONG            reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    FLOAT           reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    DOUBLE          reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    _COMPLEX        reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    SIGNED          reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    UNSIGNED        reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    __INT128        reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    STRUCT          reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    UNION           reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    PLUSPLUS        reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    MINUSMINUS      reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    SIZEOF          reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    _ALIGNOF        reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    AND             reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    TIMES           reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    PLUS            reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    MINUS           reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    NOT             reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    LNOT            reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    OFFSETOF        reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    INT_CONST_DEC   reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    INT_CONST_OCT   reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    INT_CONST_HEX   reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    INT_CONST_BIN   reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    INT_CONST_CHAR  reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    FLOAT_CONST     reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    HEX_FLOAT_CONST reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    CHAR_CONST      reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    WCHAR_CONST     reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    U8CHAR_CONST    reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    U16CHAR_CONST   reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    U32CHAR_CONST   reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    STRING_LITERAL  reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    WSTRING_LITERAL reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    U8STRING_LITERAL reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    U16STRING_LITERAL reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    U32STRING_LITERAL reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    SEMI            reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    RBRACE          reduce using rule 234 (jump_statement -> CONTINUE SEMI .)
    ELSE            reduce using rule 234 (jump_statement -> CONTINUE SEMI .)


state 376

    (235) jump_statement -> RETURN expression . SEMI
    (239) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 484
    COMMA           shift and go to state 365


state 377

    (236) jump_statement -> RETURN SEMI .

    ID              reduce using rule 236 (jump_statement -> RETURN SEMI .)
    CASE            reduce using rule 236 (jump_statement -> RETURN SEMI .)
    DEFAULT         reduce using rule 236 (jump_statement -> RETURN SEMI .)
    IF              reduce using rule 236 (jump_statement -> RETURN SEMI .)
    SWITCH          reduce using rule 236 (jump_statement -> RETURN SEMI .)
    WHILE           reduce using rule 236 (jump_statement -> RETURN SEMI .)
    DO              reduce using rule 236 (jump_statement -> RETURN SEMI .)
    FOR             reduce using rule 236 (jump_statement -> RETURN SEMI .)
    GOTO            reduce using rule 236 (jump_statement -> RETURN SEMI .)
    BREAK           reduce using rule 236 (jump_statement -> RETURN SEMI .)
    CONTINUE        reduce using rule 236 (jump_statement -> RETURN SEMI .)
    RETURN          reduce using rule 236 (jump_statement -> RETURN SEMI .)
    PPPRAGMA        reduce using rule 236 (jump_statement -> RETURN SEMI .)
    _PRAGMA         reduce using rule 236 (jump_statement -> RETURN SEMI .)
    _STATIC_ASSERT  reduce using rule 236 (jump_statement -> RETURN SEMI .)
    LBRACE          reduce using rule 236 (jump_statement -> RETURN SEMI .)
    CONST           reduce using rule 236 (jump_statement -> RETURN SEMI .)
    RESTRICT        reduce using rule 236 (jump_statement -> RETURN SEMI .)
    VOLATILE        reduce using rule 236 (jump_statement -> RETURN SEMI .)
    _ATOMIC         reduce using rule 236 (jump_statement -> RETURN SEMI .)
    AUTO            reduce using rule 236 (jump_statement -> RETURN SEMI .)
    REGISTER        reduce using rule 236 (jump_statement -> RETURN SEMI .)
    STATIC          reduce using rule 236 (jump_statement -> RETURN SEMI .)
    EXTERN          reduce using rule 236 (jump_statement -> RETURN SEMI .)
    TYPEDEF         reduce using rule 236 (jump_statement -> RETURN SEMI .)
    _THREAD_LOCAL   reduce using rule 236 (jump_statement -> RETURN SEMI .)
    INLINE          reduce using rule 236 (jump_statement -> RETURN SEMI .)
    _NORETURN       reduce using rule 236 (jump_statement -> RETURN SEMI .)
    _ALIGNAS        reduce using rule 236 (jump_statement -> RETURN SEMI .)
    TYPEID          reduce using rule 236 (jump_statement -> RETURN SEMI .)
    ENUM            reduce using rule 236 (jump_statement -> RETURN SEMI .)
    VOID            reduce using rule 236 (jump_statement -> RETURN SEMI .)
    _BOOL           reduce using rule 236 (jump_statement -> RETURN SEMI .)
    CHAR            reduce using rule 236 (jump_statement -> RETURN SEMI .)
    SHORT           reduce using rule 236 (jump_statement -> RETURN SEMI .)
    INT             reduce using rule 236 (jump_statement -> RETURN SEMI .)
    LONG            reduce using rule 236 (jump_statement -> RETURN SEMI .)
    FLOAT           reduce using rule 236 (jump_statement -> RETURN SEMI .)
    DOUBLE          reduce using rule 236 (jump_statement -> RETURN SEMI .)
    _COMPLEX        reduce using rule 236 (jump_statement -> RETURN SEMI .)
    SIGNED          reduce using rule 236 (jump_statement -> RETURN SEMI .)
    UNSIGNED        reduce using rule 236 (jump_statement -> RETURN SEMI .)
    __INT128        reduce using rule 236 (jump_statement -> RETURN SEMI .)
    LPAREN          reduce using rule 236 (jump_statement -> RETURN SEMI .)
    STRUCT          reduce using rule 236 (jump_statement -> RETURN SEMI .)
    UNION           reduce using rule 236 (jump_statement -> RETURN SEMI .)
    PLUSPLUS        reduce using rule 236 (jump_statement -> RETURN SEMI .)
    MINUSMINUS      reduce using rule 236 (jump_statement -> RETURN SEMI .)
    SIZEOF          reduce using rule 236 (jump_statement -> RETURN SEMI .)
    _ALIGNOF        reduce using rule 236 (jump_statement -> RETURN SEMI .)
    AND             reduce using rule 236 (jump_statement -> RETURN SEMI .)
    TIMES           reduce using rule 236 (jump_statement -> RETURN SEMI .)
    PLUS            reduce using rule 236 (jump_statement -> RETURN SEMI .)
    MINUS           reduce using rule 236 (jump_statement -> RETURN SEMI .)
    NOT             reduce using rule 236 (jump_statement -> RETURN SEMI .)
    LNOT            reduce using rule 236 (jump_statement -> RETURN SEMI .)
    OFFSETOF        reduce using rule 236 (jump_statement -> RETURN SEMI .)
    INT_CONST_DEC   reduce using rule 236 (jump_statement -> RETURN SEMI .)
    INT_CONST_OCT   reduce using rule 236 (jump_statement -> RETURN SEMI .)
    INT_CONST_HEX   reduce using rule 236 (jump_statement -> RETURN SEMI .)
    INT_CONST_BIN   reduce using rule 236 (jump_statement -> RETURN SEMI .)
    INT_CONST_CHAR  reduce using rule 236 (jump_statement -> RETURN SEMI .)
    FLOAT_CONST     reduce using rule 236 (jump_statement -> RETURN SEMI .)
    HEX_FLOAT_CONST reduce using rule 236 (jump_statement -> RETURN SEMI .)
    CHAR_CONST      reduce using rule 236 (jump_statement -> RETURN SEMI .)
    WCHAR_CONST     reduce using rule 236 (jump_statement -> RETURN SEMI .)
    U8CHAR_CONST    reduce using rule 236 (jump_statement -> RETURN SEMI .)
    U16CHAR_CONST   reduce using rule 236 (jump_statement -> RETURN SEMI .)
    U32CHAR_CONST   reduce using rule 236 (jump_statement -> RETURN SEMI .)
    STRING_LITERAL  reduce using rule 236 (jump_statement -> RETURN SEMI .)
    WSTRING_LITERAL reduce using rule 236 (jump_statement -> RETURN SEMI .)
    U8STRING_LITERAL reduce using rule 236 (jump_statement -> RETURN SEMI .)
    U16STRING_LITERAL reduce using rule 236 (jump_statement -> RETURN SEMI .)
    U32STRING_LITERAL reduce using rule 236 (jump_statement -> RETURN SEMI .)
    SEMI            reduce using rule 236 (jump_statement -> RETURN SEMI .)
    RBRACE          reduce using rule 236 (jump_statement -> RETURN SEMI .)
    ELSE            reduce using rule 236 (jump_statement -> RETURN SEMI .)


state 378

    (243) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    unary_expression               shift and go to state 250
    assignment_expression          shift and go to state 485
    conditional_expression         shift and go to state 249
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 379

    (244) assignment_operator -> EQUALS .

    LPAREN          reduce using rule 244 (assignment_operator -> EQUALS .)
    PLUSPLUS        reduce using rule 244 (assignment_operator -> EQUALS .)
    MINUSMINUS      reduce using rule 244 (assignment_operator -> EQUALS .)
    SIZEOF          reduce using rule 244 (assignment_operator -> EQUALS .)
    _ALIGNOF        reduce using rule 244 (assignment_operator -> EQUALS .)
    AND             reduce using rule 244 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 244 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 244 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 244 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 244 (assignment_operator -> EQUALS .)
    LNOT            reduce using rule 244 (assignment_operator -> EQUALS .)
    OFFSETOF        reduce using rule 244 (assignment_operator -> EQUALS .)
    ID              reduce using rule 244 (assignment_operator -> EQUALS .)
    INT_CONST_DEC   reduce using rule 244 (assignment_operator -> EQUALS .)
    INT_CONST_OCT   reduce using rule 244 (assignment_operator -> EQUALS .)
    INT_CONST_HEX   reduce using rule 244 (assignment_operator -> EQUALS .)
    INT_CONST_BIN   reduce using rule 244 (assignment_operator -> EQUALS .)
    INT_CONST_CHAR  reduce using rule 244 (assignment_operator -> EQUALS .)
    FLOAT_CONST     reduce using rule 244 (assignment_operator -> EQUALS .)
    HEX_FLOAT_CONST reduce using rule 244 (assignment_operator -> EQUALS .)
    CHAR_CONST      reduce using rule 244 (assignment_operator -> EQUALS .)
    WCHAR_CONST     reduce using rule 244 (assignment_operator -> EQUALS .)
    U8CHAR_CONST    reduce using rule 244 (assignment_operator -> EQUALS .)
    U16CHAR_CONST   reduce using rule 244 (assignment_operator -> EQUALS .)
    U32CHAR_CONST   reduce using rule 244 (assignment_operator -> EQUALS .)
    STRING_LITERAL  reduce using rule 244 (assignment_operator -> EQUALS .)
    WSTRING_LITERAL reduce using rule 244 (assignment_operator -> EQUALS .)
    U8STRING_LITERAL reduce using rule 244 (assignment_operator -> EQUALS .)
    U16STRING_LITERAL reduce using rule 244 (assignment_operator -> EQUALS .)
    U32STRING_LITERAL reduce using rule 244 (assignment_operator -> EQUALS .)


state 380

    (245) assignment_operator -> XOREQUAL .

    LPAREN          reduce using rule 245 (assignment_operator -> XOREQUAL .)
    PLUSPLUS        reduce using rule 245 (assignment_operator -> XOREQUAL .)
    MINUSMINUS      reduce using rule 245 (assignment_operator -> XOREQUAL .)
    SIZEOF          reduce using rule 245 (assignment_operator -> XOREQUAL .)
    _ALIGNOF        reduce using rule 245 (assignment_operator -> XOREQUAL .)
    AND             reduce using rule 245 (assignment_operator -> XOREQUAL .)
    TIMES           reduce using rule 245 (assignment_operator -> XOREQUAL .)
    PLUS            reduce using rule 245 (assignment_operator -> XOREQUAL .)
    MINUS           reduce using rule 245 (assignment_operator -> XOREQUAL .)
    NOT             reduce using rule 245 (assignment_operator -> XOREQUAL .)
    LNOT            reduce using rule 245 (assignment_operator -> XOREQUAL .)
    OFFSETOF        reduce using rule 245 (assignment_operator -> XOREQUAL .)
    ID              reduce using rule 245 (assignment_operator -> XOREQUAL .)
    INT_CONST_DEC   reduce using rule 245 (assignment_operator -> XOREQUAL .)
    INT_CONST_OCT   reduce using rule 245 (assignment_operator -> XOREQUAL .)
    INT_CONST_HEX   reduce using rule 245 (assignment_operator -> XOREQUAL .)
    INT_CONST_BIN   reduce using rule 245 (assignment_operator -> XOREQUAL .)
    INT_CONST_CHAR  reduce using rule 245 (assignment_operator -> XOREQUAL .)
    FLOAT_CONST     reduce using rule 245 (assignment_operator -> XOREQUAL .)
    HEX_FLOAT_CONST reduce using rule 245 (assignment_operator -> XOREQUAL .)
    CHAR_CONST      reduce using rule 245 (assignment_operator -> XOREQUAL .)
    WCHAR_CONST     reduce using rule 245 (assignment_operator -> XOREQUAL .)
    U8CHAR_CONST    reduce using rule 245 (assignment_operator -> XOREQUAL .)
    U16CHAR_CONST   reduce using rule 245 (assignment_operator -> XOREQUAL .)
    U32CHAR_CONST   reduce using rule 245 (assignment_operator -> XOREQUAL .)
    STRING_LITERAL  reduce using rule 245 (assignment_operator -> XOREQUAL .)
    WSTRING_LITERAL reduce using rule 245 (assignment_operator -> XOREQUAL .)
    U8STRING_LITERAL reduce using rule 245 (assignment_operator -> XOREQUAL .)
    U16STRING_LITERAL reduce using rule 245 (assignment_operator -> XOREQUAL .)
    U32STRING_LITERAL reduce using rule 245 (assignment_operator -> XOREQUAL .)


state 381

    (246) assignment_operator -> TIMESEQUAL .

    LPAREN          reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    PLUSPLUS        reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    MINUSMINUS      reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    SIZEOF          reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    _ALIGNOF        reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    AND             reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    TIMES           reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    PLUS            reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    MINUS           reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    NOT             reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    LNOT            reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    OFFSETOF        reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    ID              reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    INT_CONST_DEC   reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    INT_CONST_OCT   reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    INT_CONST_HEX   reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    INT_CONST_BIN   reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    INT_CONST_CHAR  reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    FLOAT_CONST     reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    HEX_FLOAT_CONST reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    CHAR_CONST      reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    WCHAR_CONST     reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    U8CHAR_CONST    reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    U16CHAR_CONST   reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    U32CHAR_CONST   reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    STRING_LITERAL  reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    WSTRING_LITERAL reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    U8STRING_LITERAL reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    U16STRING_LITERAL reduce using rule 246 (assignment_operator -> TIMESEQUAL .)
    U32STRING_LITERAL reduce using rule 246 (assignment_operator -> TIMESEQUAL .)


state 382

    (247) assignment_operator -> DIVEQUAL .

    LPAREN          reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    PLUSPLUS        reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    MINUSMINUS      reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    SIZEOF          reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    _ALIGNOF        reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    AND             reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    TIMES           reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    PLUS            reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    MINUS           reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    NOT             reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    LNOT            reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    OFFSETOF        reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    ID              reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    INT_CONST_DEC   reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    INT_CONST_OCT   reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    INT_CONST_HEX   reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    INT_CONST_BIN   reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    INT_CONST_CHAR  reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    FLOAT_CONST     reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    HEX_FLOAT_CONST reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    CHAR_CONST      reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    WCHAR_CONST     reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    U8CHAR_CONST    reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    U16CHAR_CONST   reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    U32CHAR_CONST   reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    STRING_LITERAL  reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    WSTRING_LITERAL reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    U8STRING_LITERAL reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    U16STRING_LITERAL reduce using rule 247 (assignment_operator -> DIVEQUAL .)
    U32STRING_LITERAL reduce using rule 247 (assignment_operator -> DIVEQUAL .)


state 383

    (248) assignment_operator -> MODEQUAL .

    LPAREN          reduce using rule 248 (assignment_operator -> MODEQUAL .)
    PLUSPLUS        reduce using rule 248 (assignment_operator -> MODEQUAL .)
    MINUSMINUS      reduce using rule 248 (assignment_operator -> MODEQUAL .)
    SIZEOF          reduce using rule 248 (assignment_operator -> MODEQUAL .)
    _ALIGNOF        reduce using rule 248 (assignment_operator -> MODEQUAL .)
    AND             reduce using rule 248 (assignment_operator -> MODEQUAL .)
    TIMES           reduce using rule 248 (assignment_operator -> MODEQUAL .)
    PLUS            reduce using rule 248 (assignment_operator -> MODEQUAL .)
    MINUS           reduce using rule 248 (assignment_operator -> MODEQUAL .)
    NOT             reduce using rule 248 (assignment_operator -> MODEQUAL .)
    LNOT            reduce using rule 248 (assignment_operator -> MODEQUAL .)
    OFFSETOF        reduce using rule 248 (assignment_operator -> MODEQUAL .)
    ID              reduce using rule 248 (assignment_operator -> MODEQUAL .)
    INT_CONST_DEC   reduce using rule 248 (assignment_operator -> MODEQUAL .)
    INT_CONST_OCT   reduce using rule 248 (assignment_operator -> MODEQUAL .)
    INT_CONST_HEX   reduce using rule 248 (assignment_operator -> MODEQUAL .)
    INT_CONST_BIN   reduce using rule 248 (assignment_operator -> MODEQUAL .)
    INT_CONST_CHAR  reduce using rule 248 (assignment_operator -> MODEQUAL .)
    FLOAT_CONST     reduce using rule 248 (assignment_operator -> MODEQUAL .)
    HEX_FLOAT_CONST reduce using rule 248 (assignment_operator -> MODEQUAL .)
    CHAR_CONST      reduce using rule 248 (assignment_operator -> MODEQUAL .)
    WCHAR_CONST     reduce using rule 248 (assignment_operator -> MODEQUAL .)
    U8CHAR_CONST    reduce using rule 248 (assignment_operator -> MODEQUAL .)
    U16CHAR_CONST   reduce using rule 248 (assignment_operator -> MODEQUAL .)
    U32CHAR_CONST   reduce using rule 248 (assignment_operator -> MODEQUAL .)
    STRING_LITERAL  reduce using rule 248 (assignment_operator -> MODEQUAL .)
    WSTRING_LITERAL reduce using rule 248 (assignment_operator -> MODEQUAL .)
    U8STRING_LITERAL reduce using rule 248 (assignment_operator -> MODEQUAL .)
    U16STRING_LITERAL reduce using rule 248 (assignment_operator -> MODEQUAL .)
    U32STRING_LITERAL reduce using rule 248 (assignment_operator -> MODEQUAL .)


state 384

    (249) assignment_operator -> PLUSEQUAL .

    LPAREN          reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    PLUSPLUS        reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    MINUSMINUS      reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    SIZEOF          reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    _ALIGNOF        reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    AND             reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    TIMES           reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    PLUS            reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    MINUS           reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    NOT             reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    LNOT            reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    OFFSETOF        reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    ID              reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    INT_CONST_DEC   reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    INT_CONST_OCT   reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    INT_CONST_HEX   reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    INT_CONST_BIN   reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    INT_CONST_CHAR  reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    FLOAT_CONST     reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    HEX_FLOAT_CONST reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    CHAR_CONST      reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    WCHAR_CONST     reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    U8CHAR_CONST    reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    U16CHAR_CONST   reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    U32CHAR_CONST   reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    STRING_LITERAL  reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    WSTRING_LITERAL reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    U8STRING_LITERAL reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    U16STRING_LITERAL reduce using rule 249 (assignment_operator -> PLUSEQUAL .)
    U32STRING_LITERAL reduce using rule 249 (assignment_operator -> PLUSEQUAL .)


state 385

    (250) assignment_operator -> MINUSEQUAL .

    LPAREN          reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    PLUSPLUS        reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    MINUSMINUS      reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    SIZEOF          reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    _ALIGNOF        reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    AND             reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    TIMES           reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    PLUS            reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    MINUS           reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    NOT             reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    LNOT            reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    OFFSETOF        reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    ID              reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    INT_CONST_DEC   reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    INT_CONST_OCT   reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    INT_CONST_HEX   reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    INT_CONST_BIN   reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    INT_CONST_CHAR  reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    FLOAT_CONST     reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    HEX_FLOAT_CONST reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    CHAR_CONST      reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    WCHAR_CONST     reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    U8CHAR_CONST    reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    U16CHAR_CONST   reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    U32CHAR_CONST   reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    STRING_LITERAL  reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    WSTRING_LITERAL reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    U8STRING_LITERAL reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    U16STRING_LITERAL reduce using rule 250 (assignment_operator -> MINUSEQUAL .)
    U32STRING_LITERAL reduce using rule 250 (assignment_operator -> MINUSEQUAL .)


state 386

    (251) assignment_operator -> LSHIFTEQUAL .

    LPAREN          reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    PLUSPLUS        reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    MINUSMINUS      reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    SIZEOF          reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    _ALIGNOF        reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    AND             reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    TIMES           reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    PLUS            reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    MINUS           reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    NOT             reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    LNOT            reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    OFFSETOF        reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    ID              reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST_DEC   reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST_OCT   reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST_HEX   reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST_BIN   reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST_CHAR  reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    FLOAT_CONST     reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    HEX_FLOAT_CONST reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    CHAR_CONST      reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    WCHAR_CONST     reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    U8CHAR_CONST    reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    U16CHAR_CONST   reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    U32CHAR_CONST   reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    STRING_LITERAL  reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    WSTRING_LITERAL reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    U8STRING_LITERAL reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    U16STRING_LITERAL reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)
    U32STRING_LITERAL reduce using rule 251 (assignment_operator -> LSHIFTEQUAL .)


state 387

    (252) assignment_operator -> RSHIFTEQUAL .

    LPAREN          reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    PLUSPLUS        reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    MINUSMINUS      reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    SIZEOF          reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    _ALIGNOF        reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    AND             reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    TIMES           reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    PLUS            reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    MINUS           reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    NOT             reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    LNOT            reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    OFFSETOF        reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    ID              reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST_DEC   reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST_OCT   reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST_HEX   reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST_BIN   reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST_CHAR  reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    FLOAT_CONST     reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    HEX_FLOAT_CONST reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    CHAR_CONST      reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    WCHAR_CONST     reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    U8CHAR_CONST    reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    U16CHAR_CONST   reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    U32CHAR_CONST   reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    STRING_LITERAL  reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    WSTRING_LITERAL reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    U8STRING_LITERAL reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    U16STRING_LITERAL reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)
    U32STRING_LITERAL reduce using rule 252 (assignment_operator -> RSHIFTEQUAL .)


state 388

    (253) assignment_operator -> ANDEQUAL .

    LPAREN          reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    PLUSPLUS        reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    MINUSMINUS      reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    SIZEOF          reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    _ALIGNOF        reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    AND             reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    TIMES           reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    PLUS            reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    MINUS           reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    NOT             reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    LNOT            reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    OFFSETOF        reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    ID              reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    INT_CONST_DEC   reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    INT_CONST_OCT   reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    INT_CONST_HEX   reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    INT_CONST_BIN   reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    INT_CONST_CHAR  reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    FLOAT_CONST     reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    HEX_FLOAT_CONST reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    CHAR_CONST      reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    WCHAR_CONST     reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    U8CHAR_CONST    reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    U16CHAR_CONST   reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    U32CHAR_CONST   reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    STRING_LITERAL  reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    WSTRING_LITERAL reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    U8STRING_LITERAL reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    U16STRING_LITERAL reduce using rule 253 (assignment_operator -> ANDEQUAL .)
    U32STRING_LITERAL reduce using rule 253 (assignment_operator -> ANDEQUAL .)


state 389

    (254) assignment_operator -> OREQUAL .

    LPAREN          reduce using rule 254 (assignment_operator -> OREQUAL .)
    PLUSPLUS        reduce using rule 254 (assignment_operator -> OREQUAL .)
    MINUSMINUS      reduce using rule 254 (assignment_operator -> OREQUAL .)
    SIZEOF          reduce using rule 254 (assignment_operator -> OREQUAL .)
    _ALIGNOF        reduce using rule 254 (assignment_operator -> OREQUAL .)
    AND             reduce using rule 254 (assignment_operator -> OREQUAL .)
    TIMES           reduce using rule 254 (assignment_operator -> OREQUAL .)
    PLUS            reduce using rule 254 (assignment_operator -> OREQUAL .)
    MINUS           reduce using rule 254 (assignment_operator -> OREQUAL .)
    NOT             reduce using rule 254 (assignment_operator -> OREQUAL .)
    LNOT            reduce using rule 254 (assignment_operator -> OREQUAL .)
    OFFSETOF        reduce using rule 254 (assignment_operator -> OREQUAL .)
    ID              reduce using rule 254 (assignment_operator -> OREQUAL .)
    INT_CONST_DEC   reduce using rule 254 (assignment_operator -> OREQUAL .)
    INT_CONST_OCT   reduce using rule 254 (assignment_operator -> OREQUAL .)
    INT_CONST_HEX   reduce using rule 254 (assignment_operator -> OREQUAL .)
    INT_CONST_BIN   reduce using rule 254 (assignment_operator -> OREQUAL .)
    INT_CONST_CHAR  reduce using rule 254 (assignment_operator -> OREQUAL .)
    FLOAT_CONST     reduce using rule 254 (assignment_operator -> OREQUAL .)
    HEX_FLOAT_CONST reduce using rule 254 (assignment_operator -> OREQUAL .)
    CHAR_CONST      reduce using rule 254 (assignment_operator -> OREQUAL .)
    WCHAR_CONST     reduce using rule 254 (assignment_operator -> OREQUAL .)
    U8CHAR_CONST    reduce using rule 254 (assignment_operator -> OREQUAL .)
    U16CHAR_CONST   reduce using rule 254 (assignment_operator -> OREQUAL .)
    U32CHAR_CONST   reduce using rule 254 (assignment_operator -> OREQUAL .)
    STRING_LITERAL  reduce using rule 254 (assignment_operator -> OREQUAL .)
    WSTRING_LITERAL reduce using rule 254 (assignment_operator -> OREQUAL .)
    U8STRING_LITERAL reduce using rule 254 (assignment_operator -> OREQUAL .)
    U16STRING_LITERAL reduce using rule 254 (assignment_operator -> OREQUAL .)
    U32STRING_LITERAL reduce using rule 254 (assignment_operator -> OREQUAL .)


state 390

    (197) initializer -> brace_open initializer_list_opt . brace_close
    (339) brace_close -> . RBRACE

    RBRACE          shift and go to state 208

    brace_close                    shift and go to state 486

state 391

    (198) initializer -> brace_open initializer_list . COMMA brace_close
    (22) initializer_list_opt -> initializer_list .
    (200) initializer_list -> initializer_list . COMMA designation_opt initializer

    COMMA           shift and go to state 487
    RBRACE          reduce using rule 22 (initializer_list_opt -> initializer_list .)


state 392

    (21) initializer_list_opt -> empty .
    (11) designation_opt -> empty .

    RBRACE          reduce using rule 21 (initializer_list_opt -> empty .)
    LPAREN          reduce using rule 11 (designation_opt -> empty .)
    LBRACE          reduce using rule 11 (designation_opt -> empty .)
    PLUSPLUS        reduce using rule 11 (designation_opt -> empty .)
    MINUSMINUS      reduce using rule 11 (designation_opt -> empty .)
    SIZEOF          reduce using rule 11 (designation_opt -> empty .)
    _ALIGNOF        reduce using rule 11 (designation_opt -> empty .)
    AND             reduce using rule 11 (designation_opt -> empty .)
    TIMES           reduce using rule 11 (designation_opt -> empty .)
    PLUS            reduce using rule 11 (designation_opt -> empty .)
    MINUS           reduce using rule 11 (designation_opt -> empty .)
    NOT             reduce using rule 11 (designation_opt -> empty .)
    LNOT            reduce using rule 11 (designation_opt -> empty .)
    OFFSETOF        reduce using rule 11 (designation_opt -> empty .)
    ID              reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_DEC   reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_OCT   reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_HEX   reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_BIN   reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_CHAR  reduce using rule 11 (designation_opt -> empty .)
    FLOAT_CONST     reduce using rule 11 (designation_opt -> empty .)
    HEX_FLOAT_CONST reduce using rule 11 (designation_opt -> empty .)
    CHAR_CONST      reduce using rule 11 (designation_opt -> empty .)
    WCHAR_CONST     reduce using rule 11 (designation_opt -> empty .)
    U8CHAR_CONST    reduce using rule 11 (designation_opt -> empty .)
    U16CHAR_CONST   reduce using rule 11 (designation_opt -> empty .)
    U32CHAR_CONST   reduce using rule 11 (designation_opt -> empty .)
    STRING_LITERAL  reduce using rule 11 (designation_opt -> empty .)
    WSTRING_LITERAL reduce using rule 11 (designation_opt -> empty .)
    U8STRING_LITERAL reduce using rule 11 (designation_opt -> empty .)
    U16STRING_LITERAL reduce using rule 11 (designation_opt -> empty .)
    U32STRING_LITERAL reduce using rule 11 (designation_opt -> empty .)


state 393

    (199) initializer_list -> designation_opt . initializer
    (196) initializer -> . assignment_expression
    (197) initializer -> . brace_open initializer_list_opt brace_close
    (198) initializer -> . brace_open initializer_list COMMA brace_close
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (338) brace_open -> . LBRACE
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 238
    LBRACE          shift and go to state 121
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    initializer                    shift and go to state 488
    assignment_expression          shift and go to state 255
    brace_open                     shift and go to state 256
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 394

    (12) designation_opt -> designation .

    LPAREN          reduce using rule 12 (designation_opt -> designation .)
    LBRACE          reduce using rule 12 (designation_opt -> designation .)
    PLUSPLUS        reduce using rule 12 (designation_opt -> designation .)
    MINUSMINUS      reduce using rule 12 (designation_opt -> designation .)
    SIZEOF          reduce using rule 12 (designation_opt -> designation .)
    _ALIGNOF        reduce using rule 12 (designation_opt -> designation .)
    AND             reduce using rule 12 (designation_opt -> designation .)
    TIMES           reduce using rule 12 (designation_opt -> designation .)
    PLUS            reduce using rule 12 (designation_opt -> designation .)
    MINUS           reduce using rule 12 (designation_opt -> designation .)
    NOT             reduce using rule 12 (designation_opt -> designation .)
    LNOT            reduce using rule 12 (designation_opt -> designation .)
    OFFSETOF        reduce using rule 12 (designation_opt -> designation .)
    ID              reduce using rule 12 (designation_opt -> designation .)
    INT_CONST_DEC   reduce using rule 12 (designation_opt -> designation .)
    INT_CONST_OCT   reduce using rule 12 (designation_opt -> designation .)
    INT_CONST_HEX   reduce using rule 12 (designation_opt -> designation .)
    INT_CONST_BIN   reduce using rule 12 (designation_opt -> designation .)
    INT_CONST_CHAR  reduce using rule 12 (designation_opt -> designation .)
    FLOAT_CONST     reduce using rule 12 (designation_opt -> designation .)
    HEX_FLOAT_CONST reduce using rule 12 (designation_opt -> designation .)
    CHAR_CONST      reduce using rule 12 (designation_opt -> designation .)
    WCHAR_CONST     reduce using rule 12 (designation_opt -> designation .)
    U8CHAR_CONST    reduce using rule 12 (designation_opt -> designation .)
    U16CHAR_CONST   reduce using rule 12 (designation_opt -> designation .)
    U32CHAR_CONST   reduce using rule 12 (designation_opt -> designation .)
    STRING_LITERAL  reduce using rule 12 (designation_opt -> designation .)
    WSTRING_LITERAL reduce using rule 12 (designation_opt -> designation .)
    U8STRING_LITERAL reduce using rule 12 (designation_opt -> designation .)
    U16STRING_LITERAL reduce using rule 12 (designation_opt -> designation .)
    U32STRING_LITERAL reduce using rule 12 (designation_opt -> designation .)


state 395

    (201) designation -> designator_list . EQUALS
    (203) designator_list -> designator_list . designator
    (204) designator -> . LBRACKET constant_expression RBRACKET
    (205) designator -> . PERIOD identifier

    EQUALS          shift and go to state 489
    LBRACKET        shift and go to state 397
    PERIOD          shift and go to state 398

    designator                     shift and go to state 490

state 396

    (202) designator_list -> designator .

    EQUALS          reduce using rule 202 (designator_list -> designator .)
    LBRACKET        reduce using rule 202 (designator_list -> designator .)
    PERIOD          reduce using rule 202 (designator_list -> designator .)


state 397

    (204) designator -> LBRACKET . constant_expression RBRACKET
    (255) constant_expression -> . conditional_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    constant_expression            shift and go to state 491
    conditional_expression         shift and go to state 144
    binary_expression              shift and go to state 145
    cast_expression                shift and go to state 146
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 398

    (205) designator -> PERIOD . identifier
    (315) identifier -> . ID

    ID              shift and go to state 159

    identifier                     shift and go to state 492

state 399

    (39) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt . RBRACKET

    RBRACKET        shift and go to state 493


state 400

    (42) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES . RBRACKET
    (287) unary_operator -> TIMES .

    RBRACKET        shift and go to state 494
    LPAREN          reduce using rule 287 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 287 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 287 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 287 (unary_operator -> TIMES .)
    _ALIGNOF        reduce using rule 287 (unary_operator -> TIMES .)
    AND             reduce using rule 287 (unary_operator -> TIMES .)
    TIMES           reduce using rule 287 (unary_operator -> TIMES .)
    PLUS            reduce using rule 287 (unary_operator -> TIMES .)
    MINUS           reduce using rule 287 (unary_operator -> TIMES .)
    NOT             reduce using rule 287 (unary_operator -> TIMES .)
    LNOT            reduce using rule 287 (unary_operator -> TIMES .)
    OFFSETOF        reduce using rule 287 (unary_operator -> TIMES .)
    ID              reduce using rule 287 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 287 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 287 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 287 (unary_operator -> TIMES .)
    INT_CONST_BIN   reduce using rule 287 (unary_operator -> TIMES .)
    INT_CONST_CHAR  reduce using rule 287 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 287 (unary_operator -> TIMES .)
    HEX_FLOAT_CONST reduce using rule 287 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 287 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 287 (unary_operator -> TIMES .)
    U8CHAR_CONST    reduce using rule 287 (unary_operator -> TIMES .)
    U16CHAR_CONST   reduce using rule 287 (unary_operator -> TIMES .)
    U32CHAR_CONST   reduce using rule 287 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 287 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 287 (unary_operator -> TIMES .)
    U8STRING_LITERAL reduce using rule 287 (unary_operator -> TIMES .)
    U16STRING_LITERAL reduce using rule 287 (unary_operator -> TIMES .)
    U32STRING_LITERAL reduce using rule 287 (unary_operator -> TIMES .)


state 401

    (40) direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt . assignment_expression RBRACKET
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    assignment_expression          shift and go to state 495
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 402

    (41) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC . assignment_expression RBRACKET
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    assignment_expression          shift and go to state 496
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 403

    (43) direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 43 (direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 43 (direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN .)
    EQUALS          reduce using rule 43 (direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 43 (direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN .)
    SEMI            reduce using rule 43 (direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 43 (direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN .)
    COLON           reduce using rule 43 (direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN .)


state 404

    (44) direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN .

    LBRACKET        reduce using rule 44 (direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN .)
    LPAREN          reduce using rule 44 (direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN .)
    EQUALS          reduce using rule 44 (direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN .)
    COMMA           reduce using rule 44 (direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN .)
    SEMI            reduce using rule 44 (direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN .)
    RPAREN          reduce using rule 44 (direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN .)
    COLON           reduce using rule 44 (direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN .)


state 405

    (278) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (302) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list brace_close
    (303) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list COMMA brace_close
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (338) brace_open -> . LBRACE
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    LBRACE          shift and go to state 121
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    cast_expression                shift and go to state 497
    brace_open                     shift and go to state 498
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 406

    (308) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    PERIOD          reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    CONDOP          reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    XOREQUAL        reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    TIMESEQUAL      reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    DIVEQUAL        reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    MODEQUAL        reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    PLUSEQUAL       reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    MINUSEQUAL      reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFTEQUAL     reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFTEQUAL     reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    ANDEQUAL        reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    OREQUAL         reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 308 (primary_expression -> LPAREN expression RPAREN .)


state 407

    (68) static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal . RPAREN
    (329) unified_string_literal -> unified_string_literal . STRING_LITERAL

    RPAREN          shift and go to state 499
    STRING_LITERAL  shift and go to state 263


state 408

    (257) conditional_expression -> binary_expression CONDOP expression . COLON conditional_expression
    (239) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 500
    COMMA           shift and go to state 365


state 409

    (259) binary_expression -> binary_expression TIMES binary_expression .
    (259) binary_expression -> binary_expression . TIMES binary_expression
    (260) binary_expression -> binary_expression . DIVIDE binary_expression
    (261) binary_expression -> binary_expression . MOD binary_expression
    (262) binary_expression -> binary_expression . PLUS binary_expression
    (263) binary_expression -> binary_expression . MINUS binary_expression
    (264) binary_expression -> binary_expression . RSHIFT binary_expression
    (265) binary_expression -> binary_expression . LSHIFT binary_expression
    (266) binary_expression -> binary_expression . LT binary_expression
    (267) binary_expression -> binary_expression . LE binary_expression
    (268) binary_expression -> binary_expression . GE binary_expression
    (269) binary_expression -> binary_expression . GT binary_expression
    (270) binary_expression -> binary_expression . EQ binary_expression
    (271) binary_expression -> binary_expression . NE binary_expression
    (272) binary_expression -> binary_expression . AND binary_expression
    (273) binary_expression -> binary_expression . OR binary_expression
    (274) binary_expression -> binary_expression . XOR binary_expression
    (275) binary_expression -> binary_expression . LAND binary_expression
    (276) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 259 (binary_expression -> binary_expression TIMES binary_expression .)
    TIMES           reduce using rule 259 (binary_expression -> binary_expression TIMES binary_expression .)
    DIVIDE          reduce using rule 259 (binary_expression -> binary_expression TIMES binary_expression .)
    MOD             reduce using rule 259 (binary_expression -> binary_expression TIMES binary_expression .)
    PLUS            reduce using rule 259 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS           reduce using rule 259 (binary_expression -> binary_expression TIMES binary_expression .)
    RSHIFT          reduce using rule 259 (binary_expression -> binary_expression TIMES binary_expression .)
    LSHIFT          reduce using rule 259 (binary_expression -> binary_expression TIMES binary_expression .)
    LT              reduce using rule 259 (binary_expression -> binary_expression TIMES binary_expression .)
    LE              reduce using rule 259 (binary_expression -> binary_expression TIMES binary_expression .)
    GE              reduce using rule 259 (binary_expression -> binary_expression TIMES binary_expression .)
    GT              reduce using rule 259 (binary_expression -> binary_expression TIMES binary_expression .)
    EQ              reduce using rule 259 (binary_expression -> binary_expression TIMES binary_expression .)
    NE              reduce using rule 259 (binary_expression -> binary_expression TIMES binary_expression .)
    AND             reduce using rule 259 (binary_expression -> binary_expression TIMES binary_expression .)
    OR              reduce using rule 259 (binary_expression -> binary_expression TIMES binary_expression .)
    XOR             reduce using rule 259 (binary_expression -> binary_expression TIMES binary_expression .)
    LAND            reduce using rule 259 (binary_expression -> binary_expression TIMES binary_expression .)
    LOR             reduce using rule 259 (binary_expression -> binary_expression TIMES binary_expression .)
    COMMA           reduce using rule 259 (binary_expression -> binary_expression TIMES binary_expression .)
    RPAREN          reduce using rule 259 (binary_expression -> binary_expression TIMES binary_expression .)
    SEMI            reduce using rule 259 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACKET        reduce using rule 259 (binary_expression -> binary_expression TIMES binary_expression .)
    COLON           reduce using rule 259 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACE          reduce using rule 259 (binary_expression -> binary_expression TIMES binary_expression .)

  ! TIMES           [ shift and go to state 269 ]
  ! DIVIDE          [ shift and go to state 270 ]
  ! MOD             [ shift and go to state 271 ]
  ! PLUS            [ shift and go to state 272 ]
  ! MINUS           [ shift and go to state 273 ]
  ! RSHIFT          [ shift and go to state 274 ]
  ! LSHIFT          [ shift and go to state 275 ]
  ! LT              [ shift and go to state 276 ]
  ! LE              [ shift and go to state 277 ]
  ! GE              [ shift and go to state 278 ]
  ! GT              [ shift and go to state 279 ]
  ! EQ              [ shift and go to state 280 ]
  ! NE              [ shift and go to state 281 ]
  ! AND             [ shift and go to state 282 ]
  ! OR              [ shift and go to state 283 ]
  ! XOR             [ shift and go to state 284 ]
  ! LAND            [ shift and go to state 285 ]
  ! LOR             [ shift and go to state 286 ]


state 410

    (260) binary_expression -> binary_expression DIVIDE binary_expression .
    (259) binary_expression -> binary_expression . TIMES binary_expression
    (260) binary_expression -> binary_expression . DIVIDE binary_expression
    (261) binary_expression -> binary_expression . MOD binary_expression
    (262) binary_expression -> binary_expression . PLUS binary_expression
    (263) binary_expression -> binary_expression . MINUS binary_expression
    (264) binary_expression -> binary_expression . RSHIFT binary_expression
    (265) binary_expression -> binary_expression . LSHIFT binary_expression
    (266) binary_expression -> binary_expression . LT binary_expression
    (267) binary_expression -> binary_expression . LE binary_expression
    (268) binary_expression -> binary_expression . GE binary_expression
    (269) binary_expression -> binary_expression . GT binary_expression
    (270) binary_expression -> binary_expression . EQ binary_expression
    (271) binary_expression -> binary_expression . NE binary_expression
    (272) binary_expression -> binary_expression . AND binary_expression
    (273) binary_expression -> binary_expression . OR binary_expression
    (274) binary_expression -> binary_expression . XOR binary_expression
    (275) binary_expression -> binary_expression . LAND binary_expression
    (276) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 260 (binary_expression -> binary_expression DIVIDE binary_expression .)
    TIMES           reduce using rule 260 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIVIDE          reduce using rule 260 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MOD             reduce using rule 260 (binary_expression -> binary_expression DIVIDE binary_expression .)
    PLUS            reduce using rule 260 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MINUS           reduce using rule 260 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RSHIFT          reduce using rule 260 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LSHIFT          reduce using rule 260 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LT              reduce using rule 260 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LE              reduce using rule 260 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GE              reduce using rule 260 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GT              reduce using rule 260 (binary_expression -> binary_expression DIVIDE binary_expression .)
    EQ              reduce using rule 260 (binary_expression -> binary_expression DIVIDE binary_expression .)
    NE              reduce using rule 260 (binary_expression -> binary_expression DIVIDE binary_expression .)
    AND             reduce using rule 260 (binary_expression -> binary_expression DIVIDE binary_expression .)
    OR              reduce using rule 260 (binary_expression -> binary_expression DIVIDE binary_expression .)
    XOR             reduce using rule 260 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LAND            reduce using rule 260 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LOR             reduce using rule 260 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COMMA           reduce using rule 260 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RPAREN          reduce using rule 260 (binary_expression -> binary_expression DIVIDE binary_expression .)
    SEMI            reduce using rule 260 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACKET        reduce using rule 260 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COLON           reduce using rule 260 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACE          reduce using rule 260 (binary_expression -> binary_expression DIVIDE binary_expression .)

  ! TIMES           [ shift and go to state 269 ]
  ! DIVIDE          [ shift and go to state 270 ]
  ! MOD             [ shift and go to state 271 ]
  ! PLUS            [ shift and go to state 272 ]
  ! MINUS           [ shift and go to state 273 ]
  ! RSHIFT          [ shift and go to state 274 ]
  ! LSHIFT          [ shift and go to state 275 ]
  ! LT              [ shift and go to state 276 ]
  ! LE              [ shift and go to state 277 ]
  ! GE              [ shift and go to state 278 ]
  ! GT              [ shift and go to state 279 ]
  ! EQ              [ shift and go to state 280 ]
  ! NE              [ shift and go to state 281 ]
  ! AND             [ shift and go to state 282 ]
  ! OR              [ shift and go to state 283 ]
  ! XOR             [ shift and go to state 284 ]
  ! LAND            [ shift and go to state 285 ]
  ! LOR             [ shift and go to state 286 ]


state 411

    (261) binary_expression -> binary_expression MOD binary_expression .
    (259) binary_expression -> binary_expression . TIMES binary_expression
    (260) binary_expression -> binary_expression . DIVIDE binary_expression
    (261) binary_expression -> binary_expression . MOD binary_expression
    (262) binary_expression -> binary_expression . PLUS binary_expression
    (263) binary_expression -> binary_expression . MINUS binary_expression
    (264) binary_expression -> binary_expression . RSHIFT binary_expression
    (265) binary_expression -> binary_expression . LSHIFT binary_expression
    (266) binary_expression -> binary_expression . LT binary_expression
    (267) binary_expression -> binary_expression . LE binary_expression
    (268) binary_expression -> binary_expression . GE binary_expression
    (269) binary_expression -> binary_expression . GT binary_expression
    (270) binary_expression -> binary_expression . EQ binary_expression
    (271) binary_expression -> binary_expression . NE binary_expression
    (272) binary_expression -> binary_expression . AND binary_expression
    (273) binary_expression -> binary_expression . OR binary_expression
    (274) binary_expression -> binary_expression . XOR binary_expression
    (275) binary_expression -> binary_expression . LAND binary_expression
    (276) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 261 (binary_expression -> binary_expression MOD binary_expression .)
    TIMES           reduce using rule 261 (binary_expression -> binary_expression MOD binary_expression .)
    DIVIDE          reduce using rule 261 (binary_expression -> binary_expression MOD binary_expression .)
    MOD             reduce using rule 261 (binary_expression -> binary_expression MOD binary_expression .)
    PLUS            reduce using rule 261 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS           reduce using rule 261 (binary_expression -> binary_expression MOD binary_expression .)
    RSHIFT          reduce using rule 261 (binary_expression -> binary_expression MOD binary_expression .)
    LSHIFT          reduce using rule 261 (binary_expression -> binary_expression MOD binary_expression .)
    LT              reduce using rule 261 (binary_expression -> binary_expression MOD binary_expression .)
    LE              reduce using rule 261 (binary_expression -> binary_expression MOD binary_expression .)
    GE              reduce using rule 261 (binary_expression -> binary_expression MOD binary_expression .)
    GT              reduce using rule 261 (binary_expression -> binary_expression MOD binary_expression .)
    EQ              reduce using rule 261 (binary_expression -> binary_expression MOD binary_expression .)
    NE              reduce using rule 261 (binary_expression -> binary_expression MOD binary_expression .)
    AND             reduce using rule 261 (binary_expression -> binary_expression MOD binary_expression .)
    OR              reduce using rule 261 (binary_expression -> binary_expression MOD binary_expression .)
    XOR             reduce using rule 261 (binary_expression -> binary_expression MOD binary_expression .)
    LAND            reduce using rule 261 (binary_expression -> binary_expression MOD binary_expression .)
    LOR             reduce using rule 261 (binary_expression -> binary_expression MOD binary_expression .)
    COMMA           reduce using rule 261 (binary_expression -> binary_expression MOD binary_expression .)
    RPAREN          reduce using rule 261 (binary_expression -> binary_expression MOD binary_expression .)
    SEMI            reduce using rule 261 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACKET        reduce using rule 261 (binary_expression -> binary_expression MOD binary_expression .)
    COLON           reduce using rule 261 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACE          reduce using rule 261 (binary_expression -> binary_expression MOD binary_expression .)

  ! TIMES           [ shift and go to state 269 ]
  ! DIVIDE          [ shift and go to state 270 ]
  ! MOD             [ shift and go to state 271 ]
  ! PLUS            [ shift and go to state 272 ]
  ! MINUS           [ shift and go to state 273 ]
  ! RSHIFT          [ shift and go to state 274 ]
  ! LSHIFT          [ shift and go to state 275 ]
  ! LT              [ shift and go to state 276 ]
  ! LE              [ shift and go to state 277 ]
  ! GE              [ shift and go to state 278 ]
  ! GT              [ shift and go to state 279 ]
  ! EQ              [ shift and go to state 280 ]
  ! NE              [ shift and go to state 281 ]
  ! AND             [ shift and go to state 282 ]
  ! OR              [ shift and go to state 283 ]
  ! XOR             [ shift and go to state 284 ]
  ! LAND            [ shift and go to state 285 ]
  ! LOR             [ shift and go to state 286 ]


state 412

    (262) binary_expression -> binary_expression PLUS binary_expression .
    (259) binary_expression -> binary_expression . TIMES binary_expression
    (260) binary_expression -> binary_expression . DIVIDE binary_expression
    (261) binary_expression -> binary_expression . MOD binary_expression
    (262) binary_expression -> binary_expression . PLUS binary_expression
    (263) binary_expression -> binary_expression . MINUS binary_expression
    (264) binary_expression -> binary_expression . RSHIFT binary_expression
    (265) binary_expression -> binary_expression . LSHIFT binary_expression
    (266) binary_expression -> binary_expression . LT binary_expression
    (267) binary_expression -> binary_expression . LE binary_expression
    (268) binary_expression -> binary_expression . GE binary_expression
    (269) binary_expression -> binary_expression . GT binary_expression
    (270) binary_expression -> binary_expression . EQ binary_expression
    (271) binary_expression -> binary_expression . NE binary_expression
    (272) binary_expression -> binary_expression . AND binary_expression
    (273) binary_expression -> binary_expression . OR binary_expression
    (274) binary_expression -> binary_expression . XOR binary_expression
    (275) binary_expression -> binary_expression . LAND binary_expression
    (276) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 262 (binary_expression -> binary_expression PLUS binary_expression .)
    PLUS            reduce using rule 262 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 262 (binary_expression -> binary_expression PLUS binary_expression .)
    RSHIFT          reduce using rule 262 (binary_expression -> binary_expression PLUS binary_expression .)
    LSHIFT          reduce using rule 262 (binary_expression -> binary_expression PLUS binary_expression .)
    LT              reduce using rule 262 (binary_expression -> binary_expression PLUS binary_expression .)
    LE              reduce using rule 262 (binary_expression -> binary_expression PLUS binary_expression .)
    GE              reduce using rule 262 (binary_expression -> binary_expression PLUS binary_expression .)
    GT              reduce using rule 262 (binary_expression -> binary_expression PLUS binary_expression .)
    EQ              reduce using rule 262 (binary_expression -> binary_expression PLUS binary_expression .)
    NE              reduce using rule 262 (binary_expression -> binary_expression PLUS binary_expression .)
    AND             reduce using rule 262 (binary_expression -> binary_expression PLUS binary_expression .)
    OR              reduce using rule 262 (binary_expression -> binary_expression PLUS binary_expression .)
    XOR             reduce using rule 262 (binary_expression -> binary_expression PLUS binary_expression .)
    LAND            reduce using rule 262 (binary_expression -> binary_expression PLUS binary_expression .)
    LOR             reduce using rule 262 (binary_expression -> binary_expression PLUS binary_expression .)
    COMMA           reduce using rule 262 (binary_expression -> binary_expression PLUS binary_expression .)
    RPAREN          reduce using rule 262 (binary_expression -> binary_expression PLUS binary_expression .)
    SEMI            reduce using rule 262 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACKET        reduce using rule 262 (binary_expression -> binary_expression PLUS binary_expression .)
    COLON           reduce using rule 262 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACE          reduce using rule 262 (binary_expression -> binary_expression PLUS binary_expression .)
    TIMES           shift and go to state 269
    DIVIDE          shift and go to state 270
    MOD             shift and go to state 271

  ! TIMES           [ reduce using rule 262 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 262 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! MOD             [ reduce using rule 262 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! PLUS            [ shift and go to state 272 ]
  ! MINUS           [ shift and go to state 273 ]
  ! RSHIFT          [ shift and go to state 274 ]
  ! LSHIFT          [ shift and go to state 275 ]
  ! LT              [ shift and go to state 276 ]
  ! LE              [ shift and go to state 277 ]
  ! GE              [ shift and go to state 278 ]
  ! GT              [ shift and go to state 279 ]
  ! EQ              [ shift and go to state 280 ]
  ! NE              [ shift and go to state 281 ]
  ! AND             [ shift and go to state 282 ]
  ! OR              [ shift and go to state 283 ]
  ! XOR             [ shift and go to state 284 ]
  ! LAND            [ shift and go to state 285 ]
  ! LOR             [ shift and go to state 286 ]


state 413

    (263) binary_expression -> binary_expression MINUS binary_expression .
    (259) binary_expression -> binary_expression . TIMES binary_expression
    (260) binary_expression -> binary_expression . DIVIDE binary_expression
    (261) binary_expression -> binary_expression . MOD binary_expression
    (262) binary_expression -> binary_expression . PLUS binary_expression
    (263) binary_expression -> binary_expression . MINUS binary_expression
    (264) binary_expression -> binary_expression . RSHIFT binary_expression
    (265) binary_expression -> binary_expression . LSHIFT binary_expression
    (266) binary_expression -> binary_expression . LT binary_expression
    (267) binary_expression -> binary_expression . LE binary_expression
    (268) binary_expression -> binary_expression . GE binary_expression
    (269) binary_expression -> binary_expression . GT binary_expression
    (270) binary_expression -> binary_expression . EQ binary_expression
    (271) binary_expression -> binary_expression . NE binary_expression
    (272) binary_expression -> binary_expression . AND binary_expression
    (273) binary_expression -> binary_expression . OR binary_expression
    (274) binary_expression -> binary_expression . XOR binary_expression
    (275) binary_expression -> binary_expression . LAND binary_expression
    (276) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 263 (binary_expression -> binary_expression MINUS binary_expression .)
    PLUS            reduce using rule 263 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 263 (binary_expression -> binary_expression MINUS binary_expression .)
    RSHIFT          reduce using rule 263 (binary_expression -> binary_expression MINUS binary_expression .)
    LSHIFT          reduce using rule 263 (binary_expression -> binary_expression MINUS binary_expression .)
    LT              reduce using rule 263 (binary_expression -> binary_expression MINUS binary_expression .)
    LE              reduce using rule 263 (binary_expression -> binary_expression MINUS binary_expression .)
    GE              reduce using rule 263 (binary_expression -> binary_expression MINUS binary_expression .)
    GT              reduce using rule 263 (binary_expression -> binary_expression MINUS binary_expression .)
    EQ              reduce using rule 263 (binary_expression -> binary_expression MINUS binary_expression .)
    NE              reduce using rule 263 (binary_expression -> binary_expression MINUS binary_expression .)
    AND             reduce using rule 263 (binary_expression -> binary_expression MINUS binary_expression .)
    OR              reduce using rule 263 (binary_expression -> binary_expression MINUS binary_expression .)
    XOR             reduce using rule 263 (binary_expression -> binary_expression MINUS binary_expression .)
    LAND            reduce using rule 263 (binary_expression -> binary_expression MINUS binary_expression .)
    LOR             reduce using rule 263 (binary_expression -> binary_expression MINUS binary_expression .)
    COMMA           reduce using rule 263 (binary_expression -> binary_expression MINUS binary_expression .)
    RPAREN          reduce using rule 263 (binary_expression -> binary_expression MINUS binary_expression .)
    SEMI            reduce using rule 263 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACKET        reduce using rule 263 (binary_expression -> binary_expression MINUS binary_expression .)
    COLON           reduce using rule 263 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACE          reduce using rule 263 (binary_expression -> binary_expression MINUS binary_expression .)
    TIMES           shift and go to state 269
    DIVIDE          shift and go to state 270
    MOD             shift and go to state 271

  ! TIMES           [ reduce using rule 263 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 263 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! MOD             [ reduce using rule 263 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! PLUS            [ shift and go to state 272 ]
  ! MINUS           [ shift and go to state 273 ]
  ! RSHIFT          [ shift and go to state 274 ]
  ! LSHIFT          [ shift and go to state 275 ]
  ! LT              [ shift and go to state 276 ]
  ! LE              [ shift and go to state 277 ]
  ! GE              [ shift and go to state 278 ]
  ! GT              [ shift and go to state 279 ]
  ! EQ              [ shift and go to state 280 ]
  ! NE              [ shift and go to state 281 ]
  ! AND             [ shift and go to state 282 ]
  ! OR              [ shift and go to state 283 ]
  ! XOR             [ shift and go to state 284 ]
  ! LAND            [ shift and go to state 285 ]
  ! LOR             [ shift and go to state 286 ]


state 414

    (264) binary_expression -> binary_expression RSHIFT binary_expression .
    (259) binary_expression -> binary_expression . TIMES binary_expression
    (260) binary_expression -> binary_expression . DIVIDE binary_expression
    (261) binary_expression -> binary_expression . MOD binary_expression
    (262) binary_expression -> binary_expression . PLUS binary_expression
    (263) binary_expression -> binary_expression . MINUS binary_expression
    (264) binary_expression -> binary_expression . RSHIFT binary_expression
    (265) binary_expression -> binary_expression . LSHIFT binary_expression
    (266) binary_expression -> binary_expression . LT binary_expression
    (267) binary_expression -> binary_expression . LE binary_expression
    (268) binary_expression -> binary_expression . GE binary_expression
    (269) binary_expression -> binary_expression . GT binary_expression
    (270) binary_expression -> binary_expression . EQ binary_expression
    (271) binary_expression -> binary_expression . NE binary_expression
    (272) binary_expression -> binary_expression . AND binary_expression
    (273) binary_expression -> binary_expression . OR binary_expression
    (274) binary_expression -> binary_expression . XOR binary_expression
    (275) binary_expression -> binary_expression . LAND binary_expression
    (276) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 264 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RSHIFT          reduce using rule 264 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LSHIFT          reduce using rule 264 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LT              reduce using rule 264 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LE              reduce using rule 264 (binary_expression -> binary_expression RSHIFT binary_expression .)
    GE              reduce using rule 264 (binary_expression -> binary_expression RSHIFT binary_expression .)
    GT              reduce using rule 264 (binary_expression -> binary_expression RSHIFT binary_expression .)
    EQ              reduce using rule 264 (binary_expression -> binary_expression RSHIFT binary_expression .)
    NE              reduce using rule 264 (binary_expression -> binary_expression RSHIFT binary_expression .)
    AND             reduce using rule 264 (binary_expression -> binary_expression RSHIFT binary_expression .)
    OR              reduce using rule 264 (binary_expression -> binary_expression RSHIFT binary_expression .)
    XOR             reduce using rule 264 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LAND            reduce using rule 264 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LOR             reduce using rule 264 (binary_expression -> binary_expression RSHIFT binary_expression .)
    COMMA           reduce using rule 264 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RPAREN          reduce using rule 264 (binary_expression -> binary_expression RSHIFT binary_expression .)
    SEMI            reduce using rule 264 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RBRACKET        reduce using rule 264 (binary_expression -> binary_expression RSHIFT binary_expression .)
    COLON           reduce using rule 264 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RBRACE          reduce using rule 264 (binary_expression -> binary_expression RSHIFT binary_expression .)
    TIMES           shift and go to state 269
    DIVIDE          shift and go to state 270
    MOD             shift and go to state 271
    PLUS            shift and go to state 272
    MINUS           shift and go to state 273

  ! TIMES           [ reduce using rule 264 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 264 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! MOD             [ reduce using rule 264 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! PLUS            [ reduce using rule 264 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! MINUS           [ reduce using rule 264 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! RSHIFT          [ shift and go to state 274 ]
  ! LSHIFT          [ shift and go to state 275 ]
  ! LT              [ shift and go to state 276 ]
  ! LE              [ shift and go to state 277 ]
  ! GE              [ shift and go to state 278 ]
  ! GT              [ shift and go to state 279 ]
  ! EQ              [ shift and go to state 280 ]
  ! NE              [ shift and go to state 281 ]
  ! AND             [ shift and go to state 282 ]
  ! OR              [ shift and go to state 283 ]
  ! XOR             [ shift and go to state 284 ]
  ! LAND            [ shift and go to state 285 ]
  ! LOR             [ shift and go to state 286 ]


state 415

    (265) binary_expression -> binary_expression LSHIFT binary_expression .
    (259) binary_expression -> binary_expression . TIMES binary_expression
    (260) binary_expression -> binary_expression . DIVIDE binary_expression
    (261) binary_expression -> binary_expression . MOD binary_expression
    (262) binary_expression -> binary_expression . PLUS binary_expression
    (263) binary_expression -> binary_expression . MINUS binary_expression
    (264) binary_expression -> binary_expression . RSHIFT binary_expression
    (265) binary_expression -> binary_expression . LSHIFT binary_expression
    (266) binary_expression -> binary_expression . LT binary_expression
    (267) binary_expression -> binary_expression . LE binary_expression
    (268) binary_expression -> binary_expression . GE binary_expression
    (269) binary_expression -> binary_expression . GT binary_expression
    (270) binary_expression -> binary_expression . EQ binary_expression
    (271) binary_expression -> binary_expression . NE binary_expression
    (272) binary_expression -> binary_expression . AND binary_expression
    (273) binary_expression -> binary_expression . OR binary_expression
    (274) binary_expression -> binary_expression . XOR binary_expression
    (275) binary_expression -> binary_expression . LAND binary_expression
    (276) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 265 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RSHIFT          reduce using rule 265 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LSHIFT          reduce using rule 265 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LT              reduce using rule 265 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LE              reduce using rule 265 (binary_expression -> binary_expression LSHIFT binary_expression .)
    GE              reduce using rule 265 (binary_expression -> binary_expression LSHIFT binary_expression .)
    GT              reduce using rule 265 (binary_expression -> binary_expression LSHIFT binary_expression .)
    EQ              reduce using rule 265 (binary_expression -> binary_expression LSHIFT binary_expression .)
    NE              reduce using rule 265 (binary_expression -> binary_expression LSHIFT binary_expression .)
    AND             reduce using rule 265 (binary_expression -> binary_expression LSHIFT binary_expression .)
    OR              reduce using rule 265 (binary_expression -> binary_expression LSHIFT binary_expression .)
    XOR             reduce using rule 265 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LAND            reduce using rule 265 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LOR             reduce using rule 265 (binary_expression -> binary_expression LSHIFT binary_expression .)
    COMMA           reduce using rule 265 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RPAREN          reduce using rule 265 (binary_expression -> binary_expression LSHIFT binary_expression .)
    SEMI            reduce using rule 265 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RBRACKET        reduce using rule 265 (binary_expression -> binary_expression LSHIFT binary_expression .)
    COLON           reduce using rule 265 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RBRACE          reduce using rule 265 (binary_expression -> binary_expression LSHIFT binary_expression .)
    TIMES           shift and go to state 269
    DIVIDE          shift and go to state 270
    MOD             shift and go to state 271
    PLUS            shift and go to state 272
    MINUS           shift and go to state 273

  ! TIMES           [ reduce using rule 265 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 265 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! MOD             [ reduce using rule 265 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! PLUS            [ reduce using rule 265 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! MINUS           [ reduce using rule 265 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! RSHIFT          [ shift and go to state 274 ]
  ! LSHIFT          [ shift and go to state 275 ]
  ! LT              [ shift and go to state 276 ]
  ! LE              [ shift and go to state 277 ]
  ! GE              [ shift and go to state 278 ]
  ! GT              [ shift and go to state 279 ]
  ! EQ              [ shift and go to state 280 ]
  ! NE              [ shift and go to state 281 ]
  ! AND             [ shift and go to state 282 ]
  ! OR              [ shift and go to state 283 ]
  ! XOR             [ shift and go to state 284 ]
  ! LAND            [ shift and go to state 285 ]
  ! LOR             [ shift and go to state 286 ]


state 416

    (266) binary_expression -> binary_expression LT binary_expression .
    (259) binary_expression -> binary_expression . TIMES binary_expression
    (260) binary_expression -> binary_expression . DIVIDE binary_expression
    (261) binary_expression -> binary_expression . MOD binary_expression
    (262) binary_expression -> binary_expression . PLUS binary_expression
    (263) binary_expression -> binary_expression . MINUS binary_expression
    (264) binary_expression -> binary_expression . RSHIFT binary_expression
    (265) binary_expression -> binary_expression . LSHIFT binary_expression
    (266) binary_expression -> binary_expression . LT binary_expression
    (267) binary_expression -> binary_expression . LE binary_expression
    (268) binary_expression -> binary_expression . GE binary_expression
    (269) binary_expression -> binary_expression . GT binary_expression
    (270) binary_expression -> binary_expression . EQ binary_expression
    (271) binary_expression -> binary_expression . NE binary_expression
    (272) binary_expression -> binary_expression . AND binary_expression
    (273) binary_expression -> binary_expression . OR binary_expression
    (274) binary_expression -> binary_expression . XOR binary_expression
    (275) binary_expression -> binary_expression . LAND binary_expression
    (276) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 266 (binary_expression -> binary_expression LT binary_expression .)
    LT              reduce using rule 266 (binary_expression -> binary_expression LT binary_expression .)
    LE              reduce using rule 266 (binary_expression -> binary_expression LT binary_expression .)
    GE              reduce using rule 266 (binary_expression -> binary_expression LT binary_expression .)
    GT              reduce using rule 266 (binary_expression -> binary_expression LT binary_expression .)
    EQ              reduce using rule 266 (binary_expression -> binary_expression LT binary_expression .)
    NE              reduce using rule 266 (binary_expression -> binary_expression LT binary_expression .)
    AND             reduce using rule 266 (binary_expression -> binary_expression LT binary_expression .)
    OR              reduce using rule 266 (binary_expression -> binary_expression LT binary_expression .)
    XOR             reduce using rule 266 (binary_expression -> binary_expression LT binary_expression .)
    LAND            reduce using rule 266 (binary_expression -> binary_expression LT binary_expression .)
    LOR             reduce using rule 266 (binary_expression -> binary_expression LT binary_expression .)
    COMMA           reduce using rule 266 (binary_expression -> binary_expression LT binary_expression .)
    RPAREN          reduce using rule 266 (binary_expression -> binary_expression LT binary_expression .)
    SEMI            reduce using rule 266 (binary_expression -> binary_expression LT binary_expression .)
    RBRACKET        reduce using rule 266 (binary_expression -> binary_expression LT binary_expression .)
    COLON           reduce using rule 266 (binary_expression -> binary_expression LT binary_expression .)
    RBRACE          reduce using rule 266 (binary_expression -> binary_expression LT binary_expression .)
    TIMES           shift and go to state 269
    DIVIDE          shift and go to state 270
    MOD             shift and go to state 271
    PLUS            shift and go to state 272
    MINUS           shift and go to state 273
    RSHIFT          shift and go to state 274
    LSHIFT          shift and go to state 275

  ! TIMES           [ reduce using rule 266 (binary_expression -> binary_expression LT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 266 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MOD             [ reduce using rule 266 (binary_expression -> binary_expression LT binary_expression .) ]
  ! PLUS            [ reduce using rule 266 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MINUS           [ reduce using rule 266 (binary_expression -> binary_expression LT binary_expression .) ]
  ! RSHIFT          [ reduce using rule 266 (binary_expression -> binary_expression LT binary_expression .) ]
  ! LSHIFT          [ reduce using rule 266 (binary_expression -> binary_expression LT binary_expression .) ]
  ! LT              [ shift and go to state 276 ]
  ! LE              [ shift and go to state 277 ]
  ! GE              [ shift and go to state 278 ]
  ! GT              [ shift and go to state 279 ]
  ! EQ              [ shift and go to state 280 ]
  ! NE              [ shift and go to state 281 ]
  ! AND             [ shift and go to state 282 ]
  ! OR              [ shift and go to state 283 ]
  ! XOR             [ shift and go to state 284 ]
  ! LAND            [ shift and go to state 285 ]
  ! LOR             [ shift and go to state 286 ]


state 417

    (267) binary_expression -> binary_expression LE binary_expression .
    (259) binary_expression -> binary_expression . TIMES binary_expression
    (260) binary_expression -> binary_expression . DIVIDE binary_expression
    (261) binary_expression -> binary_expression . MOD binary_expression
    (262) binary_expression -> binary_expression . PLUS binary_expression
    (263) binary_expression -> binary_expression . MINUS binary_expression
    (264) binary_expression -> binary_expression . RSHIFT binary_expression
    (265) binary_expression -> binary_expression . LSHIFT binary_expression
    (266) binary_expression -> binary_expression . LT binary_expression
    (267) binary_expression -> binary_expression . LE binary_expression
    (268) binary_expression -> binary_expression . GE binary_expression
    (269) binary_expression -> binary_expression . GT binary_expression
    (270) binary_expression -> binary_expression . EQ binary_expression
    (271) binary_expression -> binary_expression . NE binary_expression
    (272) binary_expression -> binary_expression . AND binary_expression
    (273) binary_expression -> binary_expression . OR binary_expression
    (274) binary_expression -> binary_expression . XOR binary_expression
    (275) binary_expression -> binary_expression . LAND binary_expression
    (276) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 267 (binary_expression -> binary_expression LE binary_expression .)
    LT              reduce using rule 267 (binary_expression -> binary_expression LE binary_expression .)
    LE              reduce using rule 267 (binary_expression -> binary_expression LE binary_expression .)
    GE              reduce using rule 267 (binary_expression -> binary_expression LE binary_expression .)
    GT              reduce using rule 267 (binary_expression -> binary_expression LE binary_expression .)
    EQ              reduce using rule 267 (binary_expression -> binary_expression LE binary_expression .)
    NE              reduce using rule 267 (binary_expression -> binary_expression LE binary_expression .)
    AND             reduce using rule 267 (binary_expression -> binary_expression LE binary_expression .)
    OR              reduce using rule 267 (binary_expression -> binary_expression LE binary_expression .)
    XOR             reduce using rule 267 (binary_expression -> binary_expression LE binary_expression .)
    LAND            reduce using rule 267 (binary_expression -> binary_expression LE binary_expression .)
    LOR             reduce using rule 267 (binary_expression -> binary_expression LE binary_expression .)
    COMMA           reduce using rule 267 (binary_expression -> binary_expression LE binary_expression .)
    RPAREN          reduce using rule 267 (binary_expression -> binary_expression LE binary_expression .)
    SEMI            reduce using rule 267 (binary_expression -> binary_expression LE binary_expression .)
    RBRACKET        reduce using rule 267 (binary_expression -> binary_expression LE binary_expression .)
    COLON           reduce using rule 267 (binary_expression -> binary_expression LE binary_expression .)
    RBRACE          reduce using rule 267 (binary_expression -> binary_expression LE binary_expression .)
    TIMES           shift and go to state 269
    DIVIDE          shift and go to state 270
    MOD             shift and go to state 271
    PLUS            shift and go to state 272
    MINUS           shift and go to state 273
    RSHIFT          shift and go to state 274
    LSHIFT          shift and go to state 275

  ! TIMES           [ reduce using rule 267 (binary_expression -> binary_expression LE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 267 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MOD             [ reduce using rule 267 (binary_expression -> binary_expression LE binary_expression .) ]
  ! PLUS            [ reduce using rule 267 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MINUS           [ reduce using rule 267 (binary_expression -> binary_expression LE binary_expression .) ]
  ! RSHIFT          [ reduce using rule 267 (binary_expression -> binary_expression LE binary_expression .) ]
  ! LSHIFT          [ reduce using rule 267 (binary_expression -> binary_expression LE binary_expression .) ]
  ! LT              [ shift and go to state 276 ]
  ! LE              [ shift and go to state 277 ]
  ! GE              [ shift and go to state 278 ]
  ! GT              [ shift and go to state 279 ]
  ! EQ              [ shift and go to state 280 ]
  ! NE              [ shift and go to state 281 ]
  ! AND             [ shift and go to state 282 ]
  ! OR              [ shift and go to state 283 ]
  ! XOR             [ shift and go to state 284 ]
  ! LAND            [ shift and go to state 285 ]
  ! LOR             [ shift and go to state 286 ]


state 418

    (268) binary_expression -> binary_expression GE binary_expression .
    (259) binary_expression -> binary_expression . TIMES binary_expression
    (260) binary_expression -> binary_expression . DIVIDE binary_expression
    (261) binary_expression -> binary_expression . MOD binary_expression
    (262) binary_expression -> binary_expression . PLUS binary_expression
    (263) binary_expression -> binary_expression . MINUS binary_expression
    (264) binary_expression -> binary_expression . RSHIFT binary_expression
    (265) binary_expression -> binary_expression . LSHIFT binary_expression
    (266) binary_expression -> binary_expression . LT binary_expression
    (267) binary_expression -> binary_expression . LE binary_expression
    (268) binary_expression -> binary_expression . GE binary_expression
    (269) binary_expression -> binary_expression . GT binary_expression
    (270) binary_expression -> binary_expression . EQ binary_expression
    (271) binary_expression -> binary_expression . NE binary_expression
    (272) binary_expression -> binary_expression . AND binary_expression
    (273) binary_expression -> binary_expression . OR binary_expression
    (274) binary_expression -> binary_expression . XOR binary_expression
    (275) binary_expression -> binary_expression . LAND binary_expression
    (276) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 268 (binary_expression -> binary_expression GE binary_expression .)
    LT              reduce using rule 268 (binary_expression -> binary_expression GE binary_expression .)
    LE              reduce using rule 268 (binary_expression -> binary_expression GE binary_expression .)
    GE              reduce using rule 268 (binary_expression -> binary_expression GE binary_expression .)
    GT              reduce using rule 268 (binary_expression -> binary_expression GE binary_expression .)
    EQ              reduce using rule 268 (binary_expression -> binary_expression GE binary_expression .)
    NE              reduce using rule 268 (binary_expression -> binary_expression GE binary_expression .)
    AND             reduce using rule 268 (binary_expression -> binary_expression GE binary_expression .)
    OR              reduce using rule 268 (binary_expression -> binary_expression GE binary_expression .)
    XOR             reduce using rule 268 (binary_expression -> binary_expression GE binary_expression .)
    LAND            reduce using rule 268 (binary_expression -> binary_expression GE binary_expression .)
    LOR             reduce using rule 268 (binary_expression -> binary_expression GE binary_expression .)
    COMMA           reduce using rule 268 (binary_expression -> binary_expression GE binary_expression .)
    RPAREN          reduce using rule 268 (binary_expression -> binary_expression GE binary_expression .)
    SEMI            reduce using rule 268 (binary_expression -> binary_expression GE binary_expression .)
    RBRACKET        reduce using rule 268 (binary_expression -> binary_expression GE binary_expression .)
    COLON           reduce using rule 268 (binary_expression -> binary_expression GE binary_expression .)
    RBRACE          reduce using rule 268 (binary_expression -> binary_expression GE binary_expression .)
    TIMES           shift and go to state 269
    DIVIDE          shift and go to state 270
    MOD             shift and go to state 271
    PLUS            shift and go to state 272
    MINUS           shift and go to state 273
    RSHIFT          shift and go to state 274
    LSHIFT          shift and go to state 275

  ! TIMES           [ reduce using rule 268 (binary_expression -> binary_expression GE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 268 (binary_expression -> binary_expression GE binary_expression .) ]
  ! MOD             [ reduce using rule 268 (binary_expression -> binary_expression GE binary_expression .) ]
  ! PLUS            [ reduce using rule 268 (binary_expression -> binary_expression GE binary_expression .) ]
  ! MINUS           [ reduce using rule 268 (binary_expression -> binary_expression GE binary_expression .) ]
  ! RSHIFT          [ reduce using rule 268 (binary_expression -> binary_expression GE binary_expression .) ]
  ! LSHIFT          [ reduce using rule 268 (binary_expression -> binary_expression GE binary_expression .) ]
  ! LT              [ shift and go to state 276 ]
  ! LE              [ shift and go to state 277 ]
  ! GE              [ shift and go to state 278 ]
  ! GT              [ shift and go to state 279 ]
  ! EQ              [ shift and go to state 280 ]
  ! NE              [ shift and go to state 281 ]
  ! AND             [ shift and go to state 282 ]
  ! OR              [ shift and go to state 283 ]
  ! XOR             [ shift and go to state 284 ]
  ! LAND            [ shift and go to state 285 ]
  ! LOR             [ shift and go to state 286 ]


state 419

    (269) binary_expression -> binary_expression GT binary_expression .
    (259) binary_expression -> binary_expression . TIMES binary_expression
    (260) binary_expression -> binary_expression . DIVIDE binary_expression
    (261) binary_expression -> binary_expression . MOD binary_expression
    (262) binary_expression -> binary_expression . PLUS binary_expression
    (263) binary_expression -> binary_expression . MINUS binary_expression
    (264) binary_expression -> binary_expression . RSHIFT binary_expression
    (265) binary_expression -> binary_expression . LSHIFT binary_expression
    (266) binary_expression -> binary_expression . LT binary_expression
    (267) binary_expression -> binary_expression . LE binary_expression
    (268) binary_expression -> binary_expression . GE binary_expression
    (269) binary_expression -> binary_expression . GT binary_expression
    (270) binary_expression -> binary_expression . EQ binary_expression
    (271) binary_expression -> binary_expression . NE binary_expression
    (272) binary_expression -> binary_expression . AND binary_expression
    (273) binary_expression -> binary_expression . OR binary_expression
    (274) binary_expression -> binary_expression . XOR binary_expression
    (275) binary_expression -> binary_expression . LAND binary_expression
    (276) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 269 (binary_expression -> binary_expression GT binary_expression .)
    LT              reduce using rule 269 (binary_expression -> binary_expression GT binary_expression .)
    LE              reduce using rule 269 (binary_expression -> binary_expression GT binary_expression .)
    GE              reduce using rule 269 (binary_expression -> binary_expression GT binary_expression .)
    GT              reduce using rule 269 (binary_expression -> binary_expression GT binary_expression .)
    EQ              reduce using rule 269 (binary_expression -> binary_expression GT binary_expression .)
    NE              reduce using rule 269 (binary_expression -> binary_expression GT binary_expression .)
    AND             reduce using rule 269 (binary_expression -> binary_expression GT binary_expression .)
    OR              reduce using rule 269 (binary_expression -> binary_expression GT binary_expression .)
    XOR             reduce using rule 269 (binary_expression -> binary_expression GT binary_expression .)
    LAND            reduce using rule 269 (binary_expression -> binary_expression GT binary_expression .)
    LOR             reduce using rule 269 (binary_expression -> binary_expression GT binary_expression .)
    COMMA           reduce using rule 269 (binary_expression -> binary_expression GT binary_expression .)
    RPAREN          reduce using rule 269 (binary_expression -> binary_expression GT binary_expression .)
    SEMI            reduce using rule 269 (binary_expression -> binary_expression GT binary_expression .)
    RBRACKET        reduce using rule 269 (binary_expression -> binary_expression GT binary_expression .)
    COLON           reduce using rule 269 (binary_expression -> binary_expression GT binary_expression .)
    RBRACE          reduce using rule 269 (binary_expression -> binary_expression GT binary_expression .)
    TIMES           shift and go to state 269
    DIVIDE          shift and go to state 270
    MOD             shift and go to state 271
    PLUS            shift and go to state 272
    MINUS           shift and go to state 273
    RSHIFT          shift and go to state 274
    LSHIFT          shift and go to state 275

  ! TIMES           [ reduce using rule 269 (binary_expression -> binary_expression GT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 269 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MOD             [ reduce using rule 269 (binary_expression -> binary_expression GT binary_expression .) ]
  ! PLUS            [ reduce using rule 269 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MINUS           [ reduce using rule 269 (binary_expression -> binary_expression GT binary_expression .) ]
  ! RSHIFT          [ reduce using rule 269 (binary_expression -> binary_expression GT binary_expression .) ]
  ! LSHIFT          [ reduce using rule 269 (binary_expression -> binary_expression GT binary_expression .) ]
  ! LT              [ shift and go to state 276 ]
  ! LE              [ shift and go to state 277 ]
  ! GE              [ shift and go to state 278 ]
  ! GT              [ shift and go to state 279 ]
  ! EQ              [ shift and go to state 280 ]
  ! NE              [ shift and go to state 281 ]
  ! AND             [ shift and go to state 282 ]
  ! OR              [ shift and go to state 283 ]
  ! XOR             [ shift and go to state 284 ]
  ! LAND            [ shift and go to state 285 ]
  ! LOR             [ shift and go to state 286 ]


state 420

    (270) binary_expression -> binary_expression EQ binary_expression .
    (259) binary_expression -> binary_expression . TIMES binary_expression
    (260) binary_expression -> binary_expression . DIVIDE binary_expression
    (261) binary_expression -> binary_expression . MOD binary_expression
    (262) binary_expression -> binary_expression . PLUS binary_expression
    (263) binary_expression -> binary_expression . MINUS binary_expression
    (264) binary_expression -> binary_expression . RSHIFT binary_expression
    (265) binary_expression -> binary_expression . LSHIFT binary_expression
    (266) binary_expression -> binary_expression . LT binary_expression
    (267) binary_expression -> binary_expression . LE binary_expression
    (268) binary_expression -> binary_expression . GE binary_expression
    (269) binary_expression -> binary_expression . GT binary_expression
    (270) binary_expression -> binary_expression . EQ binary_expression
    (271) binary_expression -> binary_expression . NE binary_expression
    (272) binary_expression -> binary_expression . AND binary_expression
    (273) binary_expression -> binary_expression . OR binary_expression
    (274) binary_expression -> binary_expression . XOR binary_expression
    (275) binary_expression -> binary_expression . LAND binary_expression
    (276) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 270 (binary_expression -> binary_expression EQ binary_expression .)
    EQ              reduce using rule 270 (binary_expression -> binary_expression EQ binary_expression .)
    NE              reduce using rule 270 (binary_expression -> binary_expression EQ binary_expression .)
    AND             reduce using rule 270 (binary_expression -> binary_expression EQ binary_expression .)
    OR              reduce using rule 270 (binary_expression -> binary_expression EQ binary_expression .)
    XOR             reduce using rule 270 (binary_expression -> binary_expression EQ binary_expression .)
    LAND            reduce using rule 270 (binary_expression -> binary_expression EQ binary_expression .)
    LOR             reduce using rule 270 (binary_expression -> binary_expression EQ binary_expression .)
    COMMA           reduce using rule 270 (binary_expression -> binary_expression EQ binary_expression .)
    RPAREN          reduce using rule 270 (binary_expression -> binary_expression EQ binary_expression .)
    SEMI            reduce using rule 270 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACKET        reduce using rule 270 (binary_expression -> binary_expression EQ binary_expression .)
    COLON           reduce using rule 270 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACE          reduce using rule 270 (binary_expression -> binary_expression EQ binary_expression .)
    TIMES           shift and go to state 269
    DIVIDE          shift and go to state 270
    MOD             shift and go to state 271
    PLUS            shift and go to state 272
    MINUS           shift and go to state 273
    RSHIFT          shift and go to state 274
    LSHIFT          shift and go to state 275
    LT              shift and go to state 276
    LE              shift and go to state 277
    GE              shift and go to state 278
    GT              shift and go to state 279

  ! TIMES           [ reduce using rule 270 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! DIVIDE          [ reduce using rule 270 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MOD             [ reduce using rule 270 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! PLUS            [ reduce using rule 270 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MINUS           [ reduce using rule 270 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! RSHIFT          [ reduce using rule 270 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LSHIFT          [ reduce using rule 270 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LT              [ reduce using rule 270 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LE              [ reduce using rule 270 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GE              [ reduce using rule 270 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GT              [ reduce using rule 270 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! EQ              [ shift and go to state 280 ]
  ! NE              [ shift and go to state 281 ]
  ! AND             [ shift and go to state 282 ]
  ! OR              [ shift and go to state 283 ]
  ! XOR             [ shift and go to state 284 ]
  ! LAND            [ shift and go to state 285 ]
  ! LOR             [ shift and go to state 286 ]


state 421

    (271) binary_expression -> binary_expression NE binary_expression .
    (259) binary_expression -> binary_expression . TIMES binary_expression
    (260) binary_expression -> binary_expression . DIVIDE binary_expression
    (261) binary_expression -> binary_expression . MOD binary_expression
    (262) binary_expression -> binary_expression . PLUS binary_expression
    (263) binary_expression -> binary_expression . MINUS binary_expression
    (264) binary_expression -> binary_expression . RSHIFT binary_expression
    (265) binary_expression -> binary_expression . LSHIFT binary_expression
    (266) binary_expression -> binary_expression . LT binary_expression
    (267) binary_expression -> binary_expression . LE binary_expression
    (268) binary_expression -> binary_expression . GE binary_expression
    (269) binary_expression -> binary_expression . GT binary_expression
    (270) binary_expression -> binary_expression . EQ binary_expression
    (271) binary_expression -> binary_expression . NE binary_expression
    (272) binary_expression -> binary_expression . AND binary_expression
    (273) binary_expression -> binary_expression . OR binary_expression
    (274) binary_expression -> binary_expression . XOR binary_expression
    (275) binary_expression -> binary_expression . LAND binary_expression
    (276) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 271 (binary_expression -> binary_expression NE binary_expression .)
    EQ              reduce using rule 271 (binary_expression -> binary_expression NE binary_expression .)
    NE              reduce using rule 271 (binary_expression -> binary_expression NE binary_expression .)
    AND             reduce using rule 271 (binary_expression -> binary_expression NE binary_expression .)
    OR              reduce using rule 271 (binary_expression -> binary_expression NE binary_expression .)
    XOR             reduce using rule 271 (binary_expression -> binary_expression NE binary_expression .)
    LAND            reduce using rule 271 (binary_expression -> binary_expression NE binary_expression .)
    LOR             reduce using rule 271 (binary_expression -> binary_expression NE binary_expression .)
    COMMA           reduce using rule 271 (binary_expression -> binary_expression NE binary_expression .)
    RPAREN          reduce using rule 271 (binary_expression -> binary_expression NE binary_expression .)
    SEMI            reduce using rule 271 (binary_expression -> binary_expression NE binary_expression .)
    RBRACKET        reduce using rule 271 (binary_expression -> binary_expression NE binary_expression .)
    COLON           reduce using rule 271 (binary_expression -> binary_expression NE binary_expression .)
    RBRACE          reduce using rule 271 (binary_expression -> binary_expression NE binary_expression .)
    TIMES           shift and go to state 269
    DIVIDE          shift and go to state 270
    MOD             shift and go to state 271
    PLUS            shift and go to state 272
    MINUS           shift and go to state 273
    RSHIFT          shift and go to state 274
    LSHIFT          shift and go to state 275
    LT              shift and go to state 276
    LE              shift and go to state 277
    GE              shift and go to state 278
    GT              shift and go to state 279

  ! TIMES           [ reduce using rule 271 (binary_expression -> binary_expression NE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 271 (binary_expression -> binary_expression NE binary_expression .) ]
  ! MOD             [ reduce using rule 271 (binary_expression -> binary_expression NE binary_expression .) ]
  ! PLUS            [ reduce using rule 271 (binary_expression -> binary_expression NE binary_expression .) ]
  ! MINUS           [ reduce using rule 271 (binary_expression -> binary_expression NE binary_expression .) ]
  ! RSHIFT          [ reduce using rule 271 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LSHIFT          [ reduce using rule 271 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LT              [ reduce using rule 271 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LE              [ reduce using rule 271 (binary_expression -> binary_expression NE binary_expression .) ]
  ! GE              [ reduce using rule 271 (binary_expression -> binary_expression NE binary_expression .) ]
  ! GT              [ reduce using rule 271 (binary_expression -> binary_expression NE binary_expression .) ]
  ! EQ              [ shift and go to state 280 ]
  ! NE              [ shift and go to state 281 ]
  ! AND             [ shift and go to state 282 ]
  ! OR              [ shift and go to state 283 ]
  ! XOR             [ shift and go to state 284 ]
  ! LAND            [ shift and go to state 285 ]
  ! LOR             [ shift and go to state 286 ]


state 422

    (272) binary_expression -> binary_expression AND binary_expression .
    (259) binary_expression -> binary_expression . TIMES binary_expression
    (260) binary_expression -> binary_expression . DIVIDE binary_expression
    (261) binary_expression -> binary_expression . MOD binary_expression
    (262) binary_expression -> binary_expression . PLUS binary_expression
    (263) binary_expression -> binary_expression . MINUS binary_expression
    (264) binary_expression -> binary_expression . RSHIFT binary_expression
    (265) binary_expression -> binary_expression . LSHIFT binary_expression
    (266) binary_expression -> binary_expression . LT binary_expression
    (267) binary_expression -> binary_expression . LE binary_expression
    (268) binary_expression -> binary_expression . GE binary_expression
    (269) binary_expression -> binary_expression . GT binary_expression
    (270) binary_expression -> binary_expression . EQ binary_expression
    (271) binary_expression -> binary_expression . NE binary_expression
    (272) binary_expression -> binary_expression . AND binary_expression
    (273) binary_expression -> binary_expression . OR binary_expression
    (274) binary_expression -> binary_expression . XOR binary_expression
    (275) binary_expression -> binary_expression . LAND binary_expression
    (276) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 272 (binary_expression -> binary_expression AND binary_expression .)
    AND             reduce using rule 272 (binary_expression -> binary_expression AND binary_expression .)
    OR              reduce using rule 272 (binary_expression -> binary_expression AND binary_expression .)
    XOR             reduce using rule 272 (binary_expression -> binary_expression AND binary_expression .)
    LAND            reduce using rule 272 (binary_expression -> binary_expression AND binary_expression .)
    LOR             reduce using rule 272 (binary_expression -> binary_expression AND binary_expression .)
    COMMA           reduce using rule 272 (binary_expression -> binary_expression AND binary_expression .)
    RPAREN          reduce using rule 272 (binary_expression -> binary_expression AND binary_expression .)
    SEMI            reduce using rule 272 (binary_expression -> binary_expression AND binary_expression .)
    RBRACKET        reduce using rule 272 (binary_expression -> binary_expression AND binary_expression .)
    COLON           reduce using rule 272 (binary_expression -> binary_expression AND binary_expression .)
    RBRACE          reduce using rule 272 (binary_expression -> binary_expression AND binary_expression .)
    TIMES           shift and go to state 269
    DIVIDE          shift and go to state 270
    MOD             shift and go to state 271
    PLUS            shift and go to state 272
    MINUS           shift and go to state 273
    RSHIFT          shift and go to state 274
    LSHIFT          shift and go to state 275
    LT              shift and go to state 276
    LE              shift and go to state 277
    GE              shift and go to state 278
    GT              shift and go to state 279
    EQ              shift and go to state 280
    NE              shift and go to state 281

  ! TIMES           [ reduce using rule 272 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 272 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MOD             [ reduce using rule 272 (binary_expression -> binary_expression AND binary_expression .) ]
  ! PLUS            [ reduce using rule 272 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MINUS           [ reduce using rule 272 (binary_expression -> binary_expression AND binary_expression .) ]
  ! RSHIFT          [ reduce using rule 272 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LSHIFT          [ reduce using rule 272 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LT              [ reduce using rule 272 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LE              [ reduce using rule 272 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GE              [ reduce using rule 272 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GT              [ reduce using rule 272 (binary_expression -> binary_expression AND binary_expression .) ]
  ! EQ              [ reduce using rule 272 (binary_expression -> binary_expression AND binary_expression .) ]
  ! NE              [ reduce using rule 272 (binary_expression -> binary_expression AND binary_expression .) ]
  ! AND             [ shift and go to state 282 ]
  ! OR              [ shift and go to state 283 ]
  ! XOR             [ shift and go to state 284 ]
  ! LAND            [ shift and go to state 285 ]
  ! LOR             [ shift and go to state 286 ]


state 423

    (273) binary_expression -> binary_expression OR binary_expression .
    (259) binary_expression -> binary_expression . TIMES binary_expression
    (260) binary_expression -> binary_expression . DIVIDE binary_expression
    (261) binary_expression -> binary_expression . MOD binary_expression
    (262) binary_expression -> binary_expression . PLUS binary_expression
    (263) binary_expression -> binary_expression . MINUS binary_expression
    (264) binary_expression -> binary_expression . RSHIFT binary_expression
    (265) binary_expression -> binary_expression . LSHIFT binary_expression
    (266) binary_expression -> binary_expression . LT binary_expression
    (267) binary_expression -> binary_expression . LE binary_expression
    (268) binary_expression -> binary_expression . GE binary_expression
    (269) binary_expression -> binary_expression . GT binary_expression
    (270) binary_expression -> binary_expression . EQ binary_expression
    (271) binary_expression -> binary_expression . NE binary_expression
    (272) binary_expression -> binary_expression . AND binary_expression
    (273) binary_expression -> binary_expression . OR binary_expression
    (274) binary_expression -> binary_expression . XOR binary_expression
    (275) binary_expression -> binary_expression . LAND binary_expression
    (276) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 273 (binary_expression -> binary_expression OR binary_expression .)
    OR              reduce using rule 273 (binary_expression -> binary_expression OR binary_expression .)
    LAND            reduce using rule 273 (binary_expression -> binary_expression OR binary_expression .)
    LOR             reduce using rule 273 (binary_expression -> binary_expression OR binary_expression .)
    COMMA           reduce using rule 273 (binary_expression -> binary_expression OR binary_expression .)
    RPAREN          reduce using rule 273 (binary_expression -> binary_expression OR binary_expression .)
    SEMI            reduce using rule 273 (binary_expression -> binary_expression OR binary_expression .)
    RBRACKET        reduce using rule 273 (binary_expression -> binary_expression OR binary_expression .)
    COLON           reduce using rule 273 (binary_expression -> binary_expression OR binary_expression .)
    RBRACE          reduce using rule 273 (binary_expression -> binary_expression OR binary_expression .)
    TIMES           shift and go to state 269
    DIVIDE          shift and go to state 270
    MOD             shift and go to state 271
    PLUS            shift and go to state 272
    MINUS           shift and go to state 273
    RSHIFT          shift and go to state 274
    LSHIFT          shift and go to state 275
    LT              shift and go to state 276
    LE              shift and go to state 277
    GE              shift and go to state 278
    GT              shift and go to state 279
    EQ              shift and go to state 280
    NE              shift and go to state 281
    AND             shift and go to state 282
    XOR             shift and go to state 284

  ! TIMES           [ reduce using rule 273 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 273 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MOD             [ reduce using rule 273 (binary_expression -> binary_expression OR binary_expression .) ]
  ! PLUS            [ reduce using rule 273 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MINUS           [ reduce using rule 273 (binary_expression -> binary_expression OR binary_expression .) ]
  ! RSHIFT          [ reduce using rule 273 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LSHIFT          [ reduce using rule 273 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LT              [ reduce using rule 273 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LE              [ reduce using rule 273 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GE              [ reduce using rule 273 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GT              [ reduce using rule 273 (binary_expression -> binary_expression OR binary_expression .) ]
  ! EQ              [ reduce using rule 273 (binary_expression -> binary_expression OR binary_expression .) ]
  ! NE              [ reduce using rule 273 (binary_expression -> binary_expression OR binary_expression .) ]
  ! AND             [ reduce using rule 273 (binary_expression -> binary_expression OR binary_expression .) ]
  ! XOR             [ reduce using rule 273 (binary_expression -> binary_expression OR binary_expression .) ]
  ! OR              [ shift and go to state 283 ]
  ! LAND            [ shift and go to state 285 ]
  ! LOR             [ shift and go to state 286 ]


state 424

    (274) binary_expression -> binary_expression XOR binary_expression .
    (259) binary_expression -> binary_expression . TIMES binary_expression
    (260) binary_expression -> binary_expression . DIVIDE binary_expression
    (261) binary_expression -> binary_expression . MOD binary_expression
    (262) binary_expression -> binary_expression . PLUS binary_expression
    (263) binary_expression -> binary_expression . MINUS binary_expression
    (264) binary_expression -> binary_expression . RSHIFT binary_expression
    (265) binary_expression -> binary_expression . LSHIFT binary_expression
    (266) binary_expression -> binary_expression . LT binary_expression
    (267) binary_expression -> binary_expression . LE binary_expression
    (268) binary_expression -> binary_expression . GE binary_expression
    (269) binary_expression -> binary_expression . GT binary_expression
    (270) binary_expression -> binary_expression . EQ binary_expression
    (271) binary_expression -> binary_expression . NE binary_expression
    (272) binary_expression -> binary_expression . AND binary_expression
    (273) binary_expression -> binary_expression . OR binary_expression
    (274) binary_expression -> binary_expression . XOR binary_expression
    (275) binary_expression -> binary_expression . LAND binary_expression
    (276) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 274 (binary_expression -> binary_expression XOR binary_expression .)
    OR              reduce using rule 274 (binary_expression -> binary_expression XOR binary_expression .)
    XOR             reduce using rule 274 (binary_expression -> binary_expression XOR binary_expression .)
    LAND            reduce using rule 274 (binary_expression -> binary_expression XOR binary_expression .)
    LOR             reduce using rule 274 (binary_expression -> binary_expression XOR binary_expression .)
    COMMA           reduce using rule 274 (binary_expression -> binary_expression XOR binary_expression .)
    RPAREN          reduce using rule 274 (binary_expression -> binary_expression XOR binary_expression .)
    SEMI            reduce using rule 274 (binary_expression -> binary_expression XOR binary_expression .)
    RBRACKET        reduce using rule 274 (binary_expression -> binary_expression XOR binary_expression .)
    COLON           reduce using rule 274 (binary_expression -> binary_expression XOR binary_expression .)
    RBRACE          reduce using rule 274 (binary_expression -> binary_expression XOR binary_expression .)
    TIMES           shift and go to state 269
    DIVIDE          shift and go to state 270
    MOD             shift and go to state 271
    PLUS            shift and go to state 272
    MINUS           shift and go to state 273
    RSHIFT          shift and go to state 274
    LSHIFT          shift and go to state 275
    LT              shift and go to state 276
    LE              shift and go to state 277
    GE              shift and go to state 278
    GT              shift and go to state 279
    EQ              shift and go to state 280
    NE              shift and go to state 281
    AND             shift and go to state 282

  ! TIMES           [ reduce using rule 274 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 274 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! MOD             [ reduce using rule 274 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! PLUS            [ reduce using rule 274 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! MINUS           [ reduce using rule 274 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! RSHIFT          [ reduce using rule 274 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! LSHIFT          [ reduce using rule 274 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! LT              [ reduce using rule 274 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! LE              [ reduce using rule 274 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! GE              [ reduce using rule 274 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! GT              [ reduce using rule 274 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! EQ              [ reduce using rule 274 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! NE              [ reduce using rule 274 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! AND             [ reduce using rule 274 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! OR              [ shift and go to state 283 ]
  ! XOR             [ shift and go to state 284 ]
  ! LAND            [ shift and go to state 285 ]
  ! LOR             [ shift and go to state 286 ]


state 425

    (275) binary_expression -> binary_expression LAND binary_expression .
    (259) binary_expression -> binary_expression . TIMES binary_expression
    (260) binary_expression -> binary_expression . DIVIDE binary_expression
    (261) binary_expression -> binary_expression . MOD binary_expression
    (262) binary_expression -> binary_expression . PLUS binary_expression
    (263) binary_expression -> binary_expression . MINUS binary_expression
    (264) binary_expression -> binary_expression . RSHIFT binary_expression
    (265) binary_expression -> binary_expression . LSHIFT binary_expression
    (266) binary_expression -> binary_expression . LT binary_expression
    (267) binary_expression -> binary_expression . LE binary_expression
    (268) binary_expression -> binary_expression . GE binary_expression
    (269) binary_expression -> binary_expression . GT binary_expression
    (270) binary_expression -> binary_expression . EQ binary_expression
    (271) binary_expression -> binary_expression . NE binary_expression
    (272) binary_expression -> binary_expression . AND binary_expression
    (273) binary_expression -> binary_expression . OR binary_expression
    (274) binary_expression -> binary_expression . XOR binary_expression
    (275) binary_expression -> binary_expression . LAND binary_expression
    (276) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 275 (binary_expression -> binary_expression LAND binary_expression .)
    LAND            reduce using rule 275 (binary_expression -> binary_expression LAND binary_expression .)
    LOR             reduce using rule 275 (binary_expression -> binary_expression LAND binary_expression .)
    COMMA           reduce using rule 275 (binary_expression -> binary_expression LAND binary_expression .)
    RPAREN          reduce using rule 275 (binary_expression -> binary_expression LAND binary_expression .)
    SEMI            reduce using rule 275 (binary_expression -> binary_expression LAND binary_expression .)
    RBRACKET        reduce using rule 275 (binary_expression -> binary_expression LAND binary_expression .)
    COLON           reduce using rule 275 (binary_expression -> binary_expression LAND binary_expression .)
    RBRACE          reduce using rule 275 (binary_expression -> binary_expression LAND binary_expression .)
    TIMES           shift and go to state 269
    DIVIDE          shift and go to state 270
    MOD             shift and go to state 271
    PLUS            shift and go to state 272
    MINUS           shift and go to state 273
    RSHIFT          shift and go to state 274
    LSHIFT          shift and go to state 275
    LT              shift and go to state 276
    LE              shift and go to state 277
    GE              shift and go to state 278
    GT              shift and go to state 279
    EQ              shift and go to state 280
    NE              shift and go to state 281
    AND             shift and go to state 282
    OR              shift and go to state 283
    XOR             shift and go to state 284

  ! TIMES           [ reduce using rule 275 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 275 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! MOD             [ reduce using rule 275 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! PLUS            [ reduce using rule 275 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! MINUS           [ reduce using rule 275 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! RSHIFT          [ reduce using rule 275 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LSHIFT          [ reduce using rule 275 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LT              [ reduce using rule 275 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LE              [ reduce using rule 275 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! GE              [ reduce using rule 275 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! GT              [ reduce using rule 275 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! EQ              [ reduce using rule 275 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! NE              [ reduce using rule 275 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! AND             [ reduce using rule 275 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! OR              [ reduce using rule 275 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! XOR             [ reduce using rule 275 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LAND            [ shift and go to state 285 ]
  ! LOR             [ shift and go to state 286 ]


state 426

    (276) binary_expression -> binary_expression LOR binary_expression .
    (259) binary_expression -> binary_expression . TIMES binary_expression
    (260) binary_expression -> binary_expression . DIVIDE binary_expression
    (261) binary_expression -> binary_expression . MOD binary_expression
    (262) binary_expression -> binary_expression . PLUS binary_expression
    (263) binary_expression -> binary_expression . MINUS binary_expression
    (264) binary_expression -> binary_expression . RSHIFT binary_expression
    (265) binary_expression -> binary_expression . LSHIFT binary_expression
    (266) binary_expression -> binary_expression . LT binary_expression
    (267) binary_expression -> binary_expression . LE binary_expression
    (268) binary_expression -> binary_expression . GE binary_expression
    (269) binary_expression -> binary_expression . GT binary_expression
    (270) binary_expression -> binary_expression . EQ binary_expression
    (271) binary_expression -> binary_expression . NE binary_expression
    (272) binary_expression -> binary_expression . AND binary_expression
    (273) binary_expression -> binary_expression . OR binary_expression
    (274) binary_expression -> binary_expression . XOR binary_expression
    (275) binary_expression -> binary_expression . LAND binary_expression
    (276) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 276 (binary_expression -> binary_expression LOR binary_expression .)
    LOR             reduce using rule 276 (binary_expression -> binary_expression LOR binary_expression .)
    COMMA           reduce using rule 276 (binary_expression -> binary_expression LOR binary_expression .)
    RPAREN          reduce using rule 276 (binary_expression -> binary_expression LOR binary_expression .)
    SEMI            reduce using rule 276 (binary_expression -> binary_expression LOR binary_expression .)
    RBRACKET        reduce using rule 276 (binary_expression -> binary_expression LOR binary_expression .)
    COLON           reduce using rule 276 (binary_expression -> binary_expression LOR binary_expression .)
    RBRACE          reduce using rule 276 (binary_expression -> binary_expression LOR binary_expression .)
    TIMES           shift and go to state 269
    DIVIDE          shift and go to state 270
    MOD             shift and go to state 271
    PLUS            shift and go to state 272
    MINUS           shift and go to state 273
    RSHIFT          shift and go to state 274
    LSHIFT          shift and go to state 275
    LT              shift and go to state 276
    LE              shift and go to state 277
    GE              shift and go to state 278
    GT              shift and go to state 279
    EQ              shift and go to state 280
    NE              shift and go to state 281
    AND             shift and go to state 282
    OR              shift and go to state 283
    XOR             shift and go to state 284
    LAND            shift and go to state 285

  ! TIMES           [ reduce using rule 276 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 276 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! MOD             [ reduce using rule 276 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! PLUS            [ reduce using rule 276 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! MINUS           [ reduce using rule 276 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! RSHIFT          [ reduce using rule 276 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LSHIFT          [ reduce using rule 276 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LT              [ reduce using rule 276 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LE              [ reduce using rule 276 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! GE              [ reduce using rule 276 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! GT              [ reduce using rule 276 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! EQ              [ reduce using rule 276 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! NE              [ reduce using rule 276 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! AND             [ reduce using rule 276 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! OR              [ reduce using rule 276 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! XOR             [ reduce using rule 276 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LAND            [ reduce using rule 276 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LOR             [ shift and go to state 286 ]


state 427

    (293) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (239) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 501
    COMMA           shift and go to state 365


state 428

    (294) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (314) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 502
    COMMA           shift and go to state 503


state 429

    (295) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACKET        reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PERIOD          reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROW           reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSPLUS        reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSMINUS      reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    CONDOP          reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFT          reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFT          reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LE              reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GE              reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT              reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NE              reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOR             reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LAND            reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LOR             reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOREQUAL        reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMESEQUAL      reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVEQUAL        reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODEQUAL        reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSEQUAL       reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSEQUAL      reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFTEQUAL     reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFTEQUAL     reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ANDEQUAL        reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OREQUAL         reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI            reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 295 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 430

    (313) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 313 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 313 (argument_expression_list -> assignment_expression .)


state 431

    (296) postfix_expression -> postfix_expression PERIOD ID .

    LBRACKET        reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    LPAREN          reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    PERIOD          reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    ARROW           reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    PLUSPLUS        reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    MINUSMINUS      reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    CONDOP          reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    TIMES           reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    DIVIDE          reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    MOD             reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    PLUS            reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    MINUS           reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    RSHIFT          reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    LSHIFT          reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    LT              reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    LE              reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    GE              reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    GT              reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    EQ              reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    NE              reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    AND             reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    OR              reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    XOR             reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    LAND            reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    LOR             reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    COMMA           reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    RPAREN          reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    EQUALS          reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    XOREQUAL        reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    TIMESEQUAL      reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    DIVEQUAL        reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    MODEQUAL        reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    PLUSEQUAL       reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    MINUSEQUAL      reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    LSHIFTEQUAL     reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    RSHIFTEQUAL     reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    ANDEQUAL        reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    OREQUAL         reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    SEMI            reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    RBRACKET        reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    COLON           reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)
    RBRACE          reduce using rule 296 (postfix_expression -> postfix_expression PERIOD ID .)


state 432

    (297) postfix_expression -> postfix_expression PERIOD TYPEID .

    LBRACKET        reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    LPAREN          reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    PERIOD          reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    ARROW           reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    PLUSPLUS        reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    MINUSMINUS      reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    CONDOP          reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    TIMES           reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    DIVIDE          reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    MOD             reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    PLUS            reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    MINUS           reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    RSHIFT          reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    LSHIFT          reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    LT              reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    LE              reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    GE              reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    GT              reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    EQ              reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    NE              reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    AND             reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    OR              reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    XOR             reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    LAND            reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    LOR             reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    COMMA           reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    RPAREN          reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    EQUALS          reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    XOREQUAL        reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    TIMESEQUAL      reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    DIVEQUAL        reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    MODEQUAL        reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    PLUSEQUAL       reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    MINUSEQUAL      reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    LSHIFTEQUAL     reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    RSHIFTEQUAL     reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    ANDEQUAL        reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    OREQUAL         reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    SEMI            reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    RBRACKET        reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    COLON           reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    RBRACE          reduce using rule 297 (postfix_expression -> postfix_expression PERIOD TYPEID .)


state 433

    (298) postfix_expression -> postfix_expression ARROW ID .

    LBRACKET        reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    LPAREN          reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    PERIOD          reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    ARROW           reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    PLUSPLUS        reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    MINUSMINUS      reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    CONDOP          reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    TIMES           reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    DIVIDE          reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    MOD             reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    PLUS            reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    MINUS           reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    RSHIFT          reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    LSHIFT          reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    LT              reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    LE              reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    GE              reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    GT              reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    EQ              reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    NE              reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    AND             reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    OR              reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    XOR             reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    LAND            reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    LOR             reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    COMMA           reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    RPAREN          reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    EQUALS          reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    XOREQUAL        reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    TIMESEQUAL      reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    DIVEQUAL        reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    MODEQUAL        reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    PLUSEQUAL       reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    MINUSEQUAL      reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    LSHIFTEQUAL     reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    RSHIFTEQUAL     reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    ANDEQUAL        reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    OREQUAL         reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    SEMI            reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    RBRACKET        reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    COLON           reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)
    RBRACE          reduce using rule 298 (postfix_expression -> postfix_expression ARROW ID .)


state 434

    (299) postfix_expression -> postfix_expression ARROW TYPEID .

    LBRACKET        reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LPAREN          reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    PERIOD          reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    ARROW           reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    PLUSPLUS        reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    MINUSMINUS      reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    CONDOP          reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    TIMES           reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    DIVIDE          reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    MOD             reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    PLUS            reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    MINUS           reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    RSHIFT          reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LSHIFT          reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LT              reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LE              reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    GE              reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    GT              reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    EQ              reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    NE              reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    AND             reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    OR              reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    XOR             reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LAND            reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LOR             reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    COMMA           reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    RPAREN          reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    EQUALS          reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    XOREQUAL        reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    TIMESEQUAL      reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    DIVEQUAL        reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    MODEQUAL        reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    PLUSEQUAL       reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    MINUSEQUAL      reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LSHIFTEQUAL     reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    RSHIFTEQUAL     reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    ANDEQUAL        reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    OREQUAL         reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    SEMI            reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    RBRACKET        reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    COLON           reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)
    RBRACE          reduce using rule 299 (postfix_expression -> postfix_expression ARROW TYPEID .)


state 435

    (302) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list COMMA brace_close

    RPAREN          shift and go to state 504


state 436

    (284) unary_expression -> SIZEOF LPAREN type_name . RPAREN
    (302) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list COMMA brace_close

    RPAREN          shift and go to state 505


state 437

    (285) unary_expression -> _ALIGNOF LPAREN type_name . RPAREN

    RPAREN          shift and go to state 506


state 438

    (309) primary_expression -> OFFSETOF LPAREN type_name . COMMA offsetof_member_designator RPAREN

    COMMA           shift and go to state 507


state 439

    (31) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .

    LBRACKET        reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    LPAREN          reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    CONST           reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    RESTRICT        reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    VOLATILE        reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    _ATOMIC         reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    AUTO            reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    REGISTER        reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    STATIC          reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    EXTERN          reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    TYPEDEF         reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    _THREAD_LOCAL   reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    INLINE          reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    _NORETURN       reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    _ALIGNAS        reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    TYPEID          reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    ENUM            reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    VOID            reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    _BOOL           reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    CHAR            reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    SHORT           reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    INT             reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    LONG            reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    FLOAT           reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    DOUBLE          reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    _COMPLEX        reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    SIGNED          reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    UNSIGNED        reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    __INT128        reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    STRUCT          reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    UNION           reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    LBRACE          reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    EQUALS          reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    COMMA           reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    SEMI            reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    RPAREN          reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    COLON           reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)


state 440

    (34) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .

    LBRACKET        reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    LPAREN          reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    CONST           reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    RESTRICT        reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    VOLATILE        reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    _ATOMIC         reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    AUTO            reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    REGISTER        reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    STATIC          reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    EXTERN          reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    TYPEDEF         reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    _THREAD_LOCAL   reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    INLINE          reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    _NORETURN       reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    _ALIGNAS        reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    TYPEID          reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    ENUM            reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    VOID            reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    _BOOL           reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    CHAR            reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    SHORT           reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    INT             reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    LONG            reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    FLOAT           reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    DOUBLE          reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    _COMPLEX        reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    SIGNED          reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    UNSIGNED        reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    __INT128        reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    STRUCT          reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    UNION           reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    LBRACE          reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    EQUALS          reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    COMMA           reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    SEMI            reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    RPAREN          reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    COLON           reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)


state 441

    (32) direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression . RBRACKET

    RBRACKET        shift and go to state 508


state 442

    (33) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 509


state 443

    (188) parameter_type_list -> parameter_list COMMA ELLIPSIS .

    RPAREN          reduce using rule 188 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)


state 444

    (190) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 190 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RPAREN          reduce using rule 190 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 445

    (195) identifier_list -> identifier_list COMMA identifier .

    COMMA           reduce using rule 195 (identifier_list -> identifier_list COMMA identifier .)
    RPAREN          reduce using rule 195 (identifier_list -> identifier_list COMMA identifier .)


state 446

    (57) typeid_noparen_declarator -> pointer direct_typeid_noparen_declarator .
    (46) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (47) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (48) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (49) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (50) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LPAREN parameter_type_list RPAREN
    (51) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LPAREN identifier_list_opt RPAREN

    COMMA           reduce using rule 57 (typeid_noparen_declarator -> pointer direct_typeid_noparen_declarator .)
    RPAREN          reduce using rule 57 (typeid_noparen_declarator -> pointer direct_typeid_noparen_declarator .)
    LBRACKET        shift and go to state 448
    LPAREN          shift and go to state 449


state 447

    (208) abstract_declarator -> pointer direct_abstract_declarator .
    (211) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET assignment_expression_opt RBRACKET
    (213) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET TIMES RBRACKET
    (215) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list_opt RPAREN

    COMMA           reduce using rule 208 (abstract_declarator -> pointer direct_abstract_declarator .)
    RPAREN          reduce using rule 208 (abstract_declarator -> pointer direct_abstract_declarator .)
    LBRACKET        shift and go to state 457
    LPAREN          shift and go to state 458


state 448

    (46) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET . type_qualifier_list_opt assignment_expression_opt RBRACKET
    (47) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET . STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (48) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET . type_qualifier_list STATIC assignment_expression RBRACKET
    (49) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET . type_qualifier_list_opt TIMES RBRACKET
    (27) type_qualifier_list_opt -> . empty
    (28) type_qualifier_list_opt -> . type_qualifier_list
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (340) empty -> .
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC

    STATIC          shift and go to state 511
    TIMES           reduce using rule 340 (empty -> .)
    LPAREN          reduce using rule 340 (empty -> .)
    PLUSPLUS        reduce using rule 340 (empty -> .)
    MINUSMINUS      reduce using rule 340 (empty -> .)
    SIZEOF          reduce using rule 340 (empty -> .)
    _ALIGNOF        reduce using rule 340 (empty -> .)
    AND             reduce using rule 340 (empty -> .)
    PLUS            reduce using rule 340 (empty -> .)
    MINUS           reduce using rule 340 (empty -> .)
    NOT             reduce using rule 340 (empty -> .)
    LNOT            reduce using rule 340 (empty -> .)
    OFFSETOF        reduce using rule 340 (empty -> .)
    ID              reduce using rule 340 (empty -> .)
    INT_CONST_DEC   reduce using rule 340 (empty -> .)
    INT_CONST_OCT   reduce using rule 340 (empty -> .)
    INT_CONST_HEX   reduce using rule 340 (empty -> .)
    INT_CONST_BIN   reduce using rule 340 (empty -> .)
    INT_CONST_CHAR  reduce using rule 340 (empty -> .)
    FLOAT_CONST     reduce using rule 340 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 340 (empty -> .)
    CHAR_CONST      reduce using rule 340 (empty -> .)
    WCHAR_CONST     reduce using rule 340 (empty -> .)
    U8CHAR_CONST    reduce using rule 340 (empty -> .)
    U16CHAR_CONST   reduce using rule 340 (empty -> .)
    U32CHAR_CONST   reduce using rule 340 (empty -> .)
    STRING_LITERAL  reduce using rule 340 (empty -> .)
    WSTRING_LITERAL reduce using rule 340 (empty -> .)
    U8STRING_LITERAL reduce using rule 340 (empty -> .)
    U16STRING_LITERAL reduce using rule 340 (empty -> .)
    U32STRING_LITERAL reduce using rule 340 (empty -> .)
    RBRACKET        reduce using rule 340 (empty -> .)
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 81

    type_qualifier_list_opt        shift and go to state 510
    type_qualifier_list            shift and go to state 512
    empty                          shift and go to state 114
    type_qualifier                 shift and go to state 116

state 449

    (50) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN . parameter_type_list RPAREN
    (51) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN . identifier_list_opt RPAREN
    (187) parameter_type_list -> . parameter_list
    (188) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (17) identifier_list_opt -> . empty
    (18) identifier_list_opt -> . identifier_list
    (189) parameter_list -> . parameter_declaration
    (190) parameter_list -> . parameter_list COMMA parameter_declaration
    (340) empty -> .
    (194) identifier_list -> . identifier
    (195) identifier_list -> . identifier_list COMMA identifier
    (191) parameter_declaration -> . declaration_specifiers id_declarator
    (192) parameter_declaration -> . declaration_specifiers typeid_noparen_declarator
    (193) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (315) identifier -> . ID
    (98) declaration_specifiers -> . declaration_specifiers type_qualifier
    (99) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (100) declaration_specifiers -> . declaration_specifiers function_specifier
    (101) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (102) declaration_specifiers -> . type_specifier
    (103) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (104) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (93) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (94) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (95) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (96) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (97) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) storage_class_specifier -> . STATIC
    (108) storage_class_specifier -> . EXTERN
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . _THREAD_LOCAL
    (111) function_specifier -> . INLINE
    (112) function_specifier -> . _NORETURN
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION

    RPAREN          reduce using rule 340 (empty -> .)
    ID              shift and go to state 159
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ATOMIC         shift and go to state 50
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    AUTO            shift and go to state 54
    REGISTER        shift and go to state 55
    STATIC          shift and go to state 29
    EXTERN          shift and go to state 56
    TYPEDEF         shift and go to state 57
    _THREAD_LOCAL   shift and go to state 58
    INLINE          shift and go to state 59
    _NORETURN       shift and go to state 60
    _ALIGNAS        shift and go to state 61
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63

    parameter_type_list            shift and go to state 513
    identifier_list_opt            shift and go to state 514
    parameter_list                 shift and go to state 187
    empty                          shift and go to state 188
    identifier_list                shift and go to state 189
    parameter_declaration          shift and go to state 190
    identifier                     shift and go to state 191
    declaration_specifiers         shift and go to state 192
    type_qualifier                 shift and go to state 21
    storage_class_specifier        shift and go to state 22
    function_specifier             shift and go to state 23
    type_specifier_no_typeid       shift and go to state 24
    type_specifier                 shift and go to state 25
    declaration_specifiers_no_type shift and go to state 193
    alignment_specifier            shift and go to state 27
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    atomic_specifier               shift and go to state 34
    struct_or_union                shift and go to state 37

state 450

    (210) direct_abstract_declarator -> LPAREN abstract_declarator . RPAREN

    RPAREN          shift and go to state 515


state 451

    (216) direct_abstract_declarator -> LPAREN parameter_type_list_opt . RPAREN

    RPAREN          shift and go to state 516


state 452

    (53) id_declarator -> pointer . direct_id_declarator
    (207) abstract_declarator -> pointer .
    (208) abstract_declarator -> pointer . direct_abstract_declarator
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (210) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (211) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (212) direct_abstract_declarator -> . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (213) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (214) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (215) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (216) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    RPAREN          reduce using rule 207 (abstract_declarator -> pointer .)
    ID              shift and go to state 28
    LPAREN          shift and go to state 322
    LBRACKET        shift and go to state 323

    direct_id_declarator           shift and go to state 97
    direct_abstract_declarator     shift and go to state 447

state 453

    (23) parameter_type_list_opt -> empty .

    RPAREN          reduce using rule 23 (parameter_type_list_opt -> empty .)


state 454

    (24) parameter_type_list_opt -> parameter_type_list .

    RPAREN          reduce using rule 24 (parameter_type_list_opt -> parameter_type_list .)


state 455

    (212) direct_abstract_declarator -> LBRACKET type_qualifier_list_opt . assignment_expression_opt RBRACKET
    (3) assignment_expression_opt -> . empty
    (4) assignment_expression_opt -> . assignment_expression
    (340) empty -> .
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    RBRACKET        reduce using rule 340 (empty -> .)
    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    assignment_expression_opt      shift and go to state 517
    empty                          shift and go to state 307
    assignment_expression          shift and go to state 308
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 456

    (214) direct_abstract_declarator -> LBRACKET TIMES . RBRACKET

    RBRACKET        shift and go to state 518


state 457

    (211) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . assignment_expression_opt RBRACKET
    (213) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . TIMES RBRACKET
    (3) assignment_expression_opt -> . empty
    (4) assignment_expression_opt -> . assignment_expression
    (340) empty -> .
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    TIMES           shift and go to state 520
    RBRACKET        reduce using rule 340 (empty -> .)
    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    assignment_expression_opt      shift and go to state 519
    empty                          shift and go to state 307
    assignment_expression          shift and go to state 308
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 458

    (215) direct_abstract_declarator -> direct_abstract_declarator LPAREN . parameter_type_list_opt RPAREN
    (23) parameter_type_list_opt -> . empty
    (24) parameter_type_list_opt -> . parameter_type_list
    (340) empty -> .
    (187) parameter_type_list -> . parameter_list
    (188) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (189) parameter_list -> . parameter_declaration
    (190) parameter_list -> . parameter_list COMMA parameter_declaration
    (191) parameter_declaration -> . declaration_specifiers id_declarator
    (192) parameter_declaration -> . declaration_specifiers typeid_noparen_declarator
    (193) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (98) declaration_specifiers -> . declaration_specifiers type_qualifier
    (99) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (100) declaration_specifiers -> . declaration_specifiers function_specifier
    (101) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (102) declaration_specifiers -> . type_specifier
    (103) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (104) declaration_specifiers -> . declaration_specifiers alignment_specifier
    (125) type_specifier -> . typedef_name
    (126) type_specifier -> . enum_specifier
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . type_specifier_no_typeid
    (129) type_specifier -> . atomic_specifier
    (93) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (94) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (95) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (96) declaration_specifiers_no_type -> . atomic_specifier declaration_specifiers_no_type_opt
    (97) declaration_specifiers_no_type -> . alignment_specifier declaration_specifiers_no_type_opt
    (241) typedef_name -> . TYPEID
    (169) enum_specifier -> . ENUM ID
    (170) enum_specifier -> . ENUM TYPEID
    (171) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (172) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (173) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (149) struct_or_union_specifier -> . struct_or_union ID
    (150) struct_or_union_specifier -> . struct_or_union TYPEID
    (151) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (152) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (153) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (154) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (155) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (156) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (113) type_specifier_no_typeid -> . VOID
    (114) type_specifier_no_typeid -> . _BOOL
    (115) type_specifier_no_typeid -> . CHAR
    (116) type_specifier_no_typeid -> . SHORT
    (117) type_specifier_no_typeid -> . INT
    (118) type_specifier_no_typeid -> . LONG
    (119) type_specifier_no_typeid -> . FLOAT
    (120) type_specifier_no_typeid -> . DOUBLE
    (121) type_specifier_no_typeid -> . _COMPLEX
    (122) type_specifier_no_typeid -> . SIGNED
    (123) type_specifier_no_typeid -> . UNSIGNED
    (124) type_specifier_no_typeid -> . __INT128
    (130) atomic_specifier -> . _ATOMIC LPAREN type_name RPAREN
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) storage_class_specifier -> . STATIC
    (108) storage_class_specifier -> . EXTERN
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . _THREAD_LOCAL
    (111) function_specifier -> . INLINE
    (112) function_specifier -> . _NORETURN
    (177) alignment_specifier -> . _ALIGNAS LPAREN type_name RPAREN
    (178) alignment_specifier -> . _ALIGNAS LPAREN constant_expression RPAREN
    (157) struct_or_union -> . STRUCT
    (158) struct_or_union -> . UNION

    RPAREN          reduce using rule 340 (empty -> .)
    TYPEID          shift and go to state 35
    ENUM            shift and go to state 36
    VOID            shift and go to state 38
    _BOOL           shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    FLOAT           shift and go to state 44
    DOUBLE          shift and go to state 45
    _COMPLEX        shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    __INT128        shift and go to state 49
    _ATOMIC         shift and go to state 50
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    AUTO            shift and go to state 54
    REGISTER        shift and go to state 55
    STATIC          shift and go to state 29
    EXTERN          shift and go to state 56
    TYPEDEF         shift and go to state 57
    _THREAD_LOCAL   shift and go to state 58
    INLINE          shift and go to state 59
    _NORETURN       shift and go to state 60
    _ALIGNAS        shift and go to state 61
    STRUCT          shift and go to state 62
    UNION           shift and go to state 63

    parameter_type_list_opt        shift and go to state 521
    empty                          shift and go to state 453
    parameter_type_list            shift and go to state 454
    parameter_list                 shift and go to state 187
    parameter_declaration          shift and go to state 190
    declaration_specifiers         shift and go to state 192
    type_qualifier                 shift and go to state 21
    storage_class_specifier        shift and go to state 22
    function_specifier             shift and go to state 23
    type_specifier_no_typeid       shift and go to state 24
    type_specifier                 shift and go to state 25
    declaration_specifiers_no_type shift and go to state 193
    alignment_specifier            shift and go to state 27
    typedef_name                   shift and go to state 31
    enum_specifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    atomic_specifier               shift and go to state 34
    struct_or_union                shift and go to state 37

state 459

    (172) enum_specifier -> ENUM ID brace_open enumerator_list brace_close .

    CONST           reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    RESTRICT        reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    VOLATILE        reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    _ATOMIC         reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    AUTO            reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    REGISTER        reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    STATIC          reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    EXTERN          reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    TYPEDEF         reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    _THREAD_LOCAL   reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    INLINE          reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    _NORETURN       reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    VOID            reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    _BOOL           reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    CHAR            reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    SHORT           reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    INT             reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    LONG            reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    FLOAT           reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    DOUBLE          reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    _COMPLEX        reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    SIGNED          reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    UNSIGNED        reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    __INT128        reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    _ALIGNAS        reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    ID              reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    LPAREN          reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    TIMES           reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    TYPEID          reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    SEMI            reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    LBRACKET        reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    COMMA           reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    RPAREN          reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    COLON           reduce using rule 172 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)


state 460

    (173) enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .

    CONST           reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    RESTRICT        reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    VOLATILE        reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    _ATOMIC         reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    AUTO            reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    REGISTER        reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    STATIC          reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    EXTERN          reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    TYPEDEF         reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    _THREAD_LOCAL   reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    INLINE          reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    _NORETURN       reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    VOID            reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    _BOOL           reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    CHAR            reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    SHORT           reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    INT             reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    LONG            reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    FLOAT           reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    DOUBLE          reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    _COMPLEX        reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    SIGNED          reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    UNSIGNED        reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    __INT128        reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    _ALIGNAS        reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    ID              reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    LPAREN          reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    TIMES           reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    TYPEID          reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    SEMI            reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    LBRACKET        reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    COMMA           reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    RPAREN          reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    COLON           reduce using rule 173 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)


state 461

    (176) enumerator_list -> enumerator_list COMMA enumerator .

    COMMA           reduce using rule 176 (enumerator_list -> enumerator_list COMMA enumerator .)
    RBRACE          reduce using rule 176 (enumerator_list -> enumerator_list COMMA enumerator .)


state 462

    (180) enumerator -> ID EQUALS constant_expression .

    COMMA           reduce using rule 180 (enumerator -> ID EQUALS constant_expression .)
    RBRACE          reduce using rule 180 (enumerator -> ID EQUALS constant_expression .)


state 463

    (153) struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .

    CONST           reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    RESTRICT        reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    VOLATILE        reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    _ATOMIC         reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    AUTO            reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    REGISTER        reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    STATIC          reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    EXTERN          reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    TYPEDEF         reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    _THREAD_LOCAL   reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    INLINE          reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    _NORETURN       reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    VOID            reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    _BOOL           reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    CHAR            reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    SHORT           reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    INT             reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    LONG            reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    FLOAT           reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    DOUBLE          reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    _COMPLEX        reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    SIGNED          reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    UNSIGNED        reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    __INT128        reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    _ALIGNAS        reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    ID              reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    LPAREN          reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    TIMES           reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    TYPEID          reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    SEMI            reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    LBRACKET        reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    COMMA           reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    RPAREN          reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    COLON           reduce using rule 153 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)


state 464

    (155) struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .

    CONST           reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    RESTRICT        reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    VOLATILE        reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    _ATOMIC         reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    AUTO            reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    REGISTER        reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    STATIC          reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    EXTERN          reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    TYPEDEF         reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    _THREAD_LOCAL   reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    INLINE          reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    _NORETURN       reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    VOID            reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    _BOOL           reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    CHAR            reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    SHORT           reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    INT             reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    LONG            reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    FLOAT           reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    DOUBLE          reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    _COMPLEX        reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    SIGNED          reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    UNSIGNED        reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    __INT128        reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    _ALIGNAS        reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    ID              reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    LPAREN          reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    TIMES           reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    TYPEID          reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    SEMI            reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    LBRACKET        reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    COMMA           reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    RPAREN          reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    COLON           reduce using rule 155 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)


state 465

    (161) struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .

    RBRACE          reduce using rule 161 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    SEMI            reduce using rule 161 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    PPPRAGMA        reduce using rule 161 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    _PRAGMA         reduce using rule 161 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    _ALIGNAS        reduce using rule 161 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    TYPEID          reduce using rule 161 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    ENUM            reduce using rule 161 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    VOID            reduce using rule 161 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    _BOOL           reduce using rule 161 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    CHAR            reduce using rule 161 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    SHORT           reduce using rule 161 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    INT             reduce using rule 161 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    LONG            reduce using rule 161 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    FLOAT           reduce using rule 161 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    DOUBLE          reduce using rule 161 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    _COMPLEX        reduce using rule 161 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    SIGNED          reduce using rule 161 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    UNSIGNED        reduce using rule 161 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    __INT128        reduce using rule 161 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    _ATOMIC         reduce using rule 161 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    CONST           reduce using rule 161 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    RESTRICT        reduce using rule 161 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    VOLATILE        reduce using rule 161 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    STRUCT          reduce using rule 161 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    UNION           reduce using rule 161 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)


state 466

    (165) struct_declarator_list -> struct_declarator_list COMMA . struct_declarator
    (166) struct_declarator -> . declarator
    (167) struct_declarator -> . declarator COLON constant_expression
    (168) struct_declarator -> . COLON constant_expression
    (181) declarator -> . id_declarator
    (182) declarator -> . typeid_declarator
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (54) typeid_declarator -> . direct_typeid_declarator
    (55) typeid_declarator -> . pointer direct_typeid_declarator
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (183) pointer -> . TIMES type_qualifier_list_opt
    (184) pointer -> . TIMES type_qualifier_list_opt pointer
    (37) direct_typeid_declarator -> . TYPEID
    (38) direct_typeid_declarator -> . LPAREN typeid_declarator RPAREN
    (39) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (40) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (41) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (42) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (43) direct_typeid_declarator -> . direct_typeid_declarator LPAREN parameter_type_list RPAREN
    (44) direct_typeid_declarator -> . direct_typeid_declarator LPAREN identifier_list_opt RPAREN

    COLON           shift and go to state 347
    ID              shift and go to state 28
    LPAREN          shift and go to state 82
    TIMES           shift and go to state 30
    TYPEID          shift and go to state 89

    struct_declarator              shift and go to state 522
    declarator                     shift and go to state 346
    id_declarator                  shift and go to state 130
    typeid_declarator              shift and go to state 87
    direct_id_declarator           shift and go to state 19
    pointer                        shift and go to state 80
    direct_typeid_declarator       shift and go to state 88

state 467

    (167) struct_declarator -> declarator COLON . constant_expression
    (255) constant_expression -> . conditional_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    constant_expression            shift and go to state 523
    conditional_expression         shift and go to state 144
    binary_expression              shift and go to state 145
    cast_expression                shift and go to state 146
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 468

    (168) struct_declarator -> COLON constant_expression .

    COMMA           reduce using rule 168 (struct_declarator -> COLON constant_expression .)
    SEMI            reduce using rule 168 (struct_declarator -> COLON constant_expression .)


state 469

    (222) labeled_statement -> ID COLON pragmacomp_or_statement .

    ID              reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    CASE            reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    DEFAULT         reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    IF              reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    SWITCH          reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    WHILE           reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    DO              reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    FOR             reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    GOTO            reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    BREAK           reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    CONTINUE        reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    RETURN          reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    _PRAGMA         reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    _STATIC_ASSERT  reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    LBRACE          reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    CONST           reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    RESTRICT        reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    VOLATILE        reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    _ATOMIC         reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    AUTO            reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    REGISTER        reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    STATIC          reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    EXTERN          reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    _THREAD_LOCAL   reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    INLINE          reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    _NORETURN       reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    _ALIGNAS        reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    TYPEID          reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    ENUM            reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    VOID            reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    _BOOL           reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    CHAR            reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    SHORT           reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    INT             reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    LONG            reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    FLOAT           reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    DOUBLE          reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    _COMPLEX        reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    SIGNED          reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    __INT128        reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    LPAREN          reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    STRUCT          reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    UNION           reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    SIZEOF          reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    _ALIGNOF        reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    AND             reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    TIMES           reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    PLUS            reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    MINUS           reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    NOT             reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    LNOT            reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    INT_CONST_CHAR  reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    U8CHAR_CONST    reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    U16CHAR_CONST   reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    U32CHAR_CONST   reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    U8STRING_LITERAL reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    U16STRING_LITERAL reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    U32STRING_LITERAL reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    SEMI            reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    RBRACE          reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    ELSE            reduce using rule 222 (labeled_statement -> ID COLON pragmacomp_or_statement .)


state 470

    (223) labeled_statement -> CASE constant_expression COLON . pragmacomp_or_statement
    (86) pragmacomp_or_statement -> . pppragma_directive_list statement
    (87) pragmacomp_or_statement -> . statement
    (74) pppragma_directive_list -> . pppragma_directive
    (75) pppragma_directive_list -> . pppragma_directive_list pppragma_directive
    (78) statement -> . labeled_statement
    (79) statement -> . expression_statement
    (80) statement -> . compound_statement
    (81) statement -> . selection_statement
    (82) statement -> . iteration_statement
    (83) statement -> . jump_statement
    (84) statement -> . pppragma_directive
    (85) statement -> . static_assert
    (71) pppragma_directive -> . PPPRAGMA
    (72) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (73) pppragma_directive -> . _PRAGMA LPAREN unified_string_literal RPAREN
    (222) labeled_statement -> . ID COLON pragmacomp_or_statement
    (223) labeled_statement -> . CASE constant_expression COLON pragmacomp_or_statement
    (224) labeled_statement -> . DEFAULT COLON pragmacomp_or_statement
    (237) expression_statement -> . expression_opt SEMI
    (221) compound_statement -> . brace_open block_item_list_opt brace_close
    (225) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (226) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (227) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (228) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (229) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (230) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (231) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (232) jump_statement -> . GOTO ID SEMI
    (233) jump_statement -> . BREAK SEMI
    (234) jump_statement -> . CONTINUE SEMI
    (235) jump_statement -> . RETURN expression SEMI
    (236) jump_statement -> . RETURN SEMI
    (68) static_assert -> . _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN
    (69) static_assert -> . _STATIC_ASSERT LPAREN constant_expression RPAREN
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (338) brace_open -> . LBRACE
    (340) empty -> .
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    PPPRAGMA        shift and go to state 15
    _PRAGMA         shift and go to state 16
    ID              shift and go to state 233
    CASE            shift and go to state 234
    DEFAULT         shift and go to state 235
    IF              shift and go to state 237
    SWITCH          shift and go to state 240
    WHILE           shift and go to state 241
    DO              shift and go to state 242
    FOR             shift and go to state 243
    GOTO            shift and go to state 244
    BREAK           shift and go to state 245
    CONTINUE        shift and go to state 246
    RETURN          shift and go to state 247
    _STATIC_ASSERT  shift and go to state 18
    LBRACE          shift and go to state 121
    SEMI            reduce using rule 340 (empty -> .)
    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    pragmacomp_or_statement        shift and go to state 524
    pppragma_directive_list        shift and go to state 369
    statement                      shift and go to state 370
    pppragma_directive             shift and go to state 371
    labeled_statement              shift and go to state 225
    expression_statement           shift and go to state 226
    compound_statement             shift and go to state 227
    selection_statement            shift and go to state 228
    iteration_statement            shift and go to state 229
    jump_statement                 shift and go to state 230
    static_assert                  shift and go to state 232
    unified_string_literal         shift and go to state 143
    expression_opt                 shift and go to state 236
    brace_open                     shift and go to state 128
    expression                     shift and go to state 239
    empty                          shift and go to state 357
    assignment_expression          shift and go to state 248
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_wstring_literal        shift and go to state 164

state 471

    (224) labeled_statement -> DEFAULT COLON pragmacomp_or_statement .

    ID              reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    CASE            reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    DEFAULT         reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    IF              reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    SWITCH          reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    WHILE           reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    DO              reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    FOR             reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    GOTO            reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    BREAK           reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    CONTINUE        reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    RETURN          reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    _PRAGMA         reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    _STATIC_ASSERT  reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    LBRACE          reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    CONST           reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    RESTRICT        reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    VOLATILE        reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    _ATOMIC         reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    AUTO            reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    REGISTER        reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    STATIC          reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    EXTERN          reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    _THREAD_LOCAL   reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    INLINE          reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    _NORETURN       reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    _ALIGNAS        reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    TYPEID          reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    ENUM            reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    VOID            reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    _BOOL           reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    CHAR            reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    SHORT           reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    INT             reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    LONG            reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    FLOAT           reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    DOUBLE          reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    _COMPLEX        reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    SIGNED          reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    __INT128        reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    LPAREN          reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    STRUCT          reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    UNION           reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    SIZEOF          reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    _ALIGNOF        reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    AND             reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    TIMES           reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    PLUS            reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    MINUS           reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    NOT             reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    LNOT            reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    INT_CONST_CHAR  reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    U8CHAR_CONST    reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    U16CHAR_CONST   reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    U32CHAR_CONST   reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    U8STRING_LITERAL reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    U16STRING_LITERAL reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    U32STRING_LITERAL reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    SEMI            reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    RBRACE          reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    ELSE            reduce using rule 224 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)


state 472

    (225) selection_statement -> IF LPAREN expression . RPAREN pragmacomp_or_statement
    (226) selection_statement -> IF LPAREN expression . RPAREN statement ELSE pragmacomp_or_statement
    (239) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 525
    COMMA           shift and go to state 365


state 473

    (240) assignment_expression -> LPAREN compound_statement RPAREN .

    COMMA           reduce using rule 240 (assignment_expression -> LPAREN compound_statement RPAREN .)
    SEMI            reduce using rule 240 (assignment_expression -> LPAREN compound_statement RPAREN .)
    RPAREN          reduce using rule 240 (assignment_expression -> LPAREN compound_statement RPAREN .)
    RBRACKET        reduce using rule 240 (assignment_expression -> LPAREN compound_statement RPAREN .)
    COLON           reduce using rule 240 (assignment_expression -> LPAREN compound_statement RPAREN .)
    RBRACE          reduce using rule 240 (assignment_expression -> LPAREN compound_statement RPAREN .)


state 474

    (302) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list brace_close
    (303) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list COMMA brace_close
    (278) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (338) brace_open -> . LBRACE
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LBRACE          shift and go to state 121
    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    brace_open                     shift and go to state 498
    cast_expression                shift and go to state 497
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 475

    (239) expression -> expression COMMA assignment_expression .

    COMMA           reduce using rule 239 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 239 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 239 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 239 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 239 (expression -> expression COMMA assignment_expression .)


state 476

    (227) selection_statement -> SWITCH LPAREN expression . RPAREN pragmacomp_or_statement
    (239) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 526
    COMMA           shift and go to state 365


state 477

    (228) iteration_statement -> WHILE LPAREN expression . RPAREN pragmacomp_or_statement
    (239) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 527
    COMMA           shift and go to state 365


state 478

    (229) iteration_statement -> DO pragmacomp_or_statement WHILE . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 528


state 479

    (86) pragmacomp_or_statement -> pppragma_directive_list statement .

    WHILE           reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    ID              reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    CASE            reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    DEFAULT         reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    IF              reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    SWITCH          reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    DO              reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    FOR             reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    GOTO            reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    BREAK           reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    CONTINUE        reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    RETURN          reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    PPPRAGMA        reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    _PRAGMA         reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    _STATIC_ASSERT  reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    LBRACE          reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    CONST           reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    RESTRICT        reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    VOLATILE        reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    _ATOMIC         reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    AUTO            reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    REGISTER        reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    STATIC          reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    EXTERN          reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    TYPEDEF         reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    _THREAD_LOCAL   reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    INLINE          reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    _NORETURN       reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    _ALIGNAS        reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    TYPEID          reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    ENUM            reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    VOID            reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    _BOOL           reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    CHAR            reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    SHORT           reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    INT             reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    LONG            reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    FLOAT           reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    DOUBLE          reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    _COMPLEX        reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    SIGNED          reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    UNSIGNED        reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    __INT128        reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    LPAREN          reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    STRUCT          reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    UNION           reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    PLUSPLUS        reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    MINUSMINUS      reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    SIZEOF          reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    _ALIGNOF        reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    AND             reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    TIMES           reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    PLUS            reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    MINUS           reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    NOT             reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    LNOT            reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    OFFSETOF        reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    INT_CONST_DEC   reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    INT_CONST_OCT   reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    INT_CONST_HEX   reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    INT_CONST_BIN   reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    INT_CONST_CHAR  reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    FLOAT_CONST     reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    HEX_FLOAT_CONST reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    CHAR_CONST      reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    WCHAR_CONST     reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    U8CHAR_CONST    reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    U16CHAR_CONST   reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    U32CHAR_CONST   reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    STRING_LITERAL  reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    WSTRING_LITERAL reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    U8STRING_LITERAL reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    U16STRING_LITERAL reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    U32STRING_LITERAL reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    SEMI            reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    RBRACE          reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)
    ELSE            reduce using rule 86 (pragmacomp_or_statement -> pppragma_directive_list statement .)


state 480

    (75) pppragma_directive_list -> pppragma_directive_list pppragma_directive .
    (84) statement -> pppragma_directive .

  ! reduce/reduce conflict for ID resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for CASE resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for IF resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for SWITCH resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for WHILE resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for DO resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for FOR resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for GOTO resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for BREAK resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for RETURN resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for PPPRAGMA resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for _PRAGMA resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for _STATIC_ASSERT resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for LBRACE resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for LPAREN resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for SIZEOF resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for _ALIGNOF resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for AND resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for TIMES resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for PLUS resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for MINUS resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for NOT resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for LNOT resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for OFFSETOF resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for INT_CONST_DEC resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for INT_CONST_OCT resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for INT_CONST_HEX resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for INT_CONST_BIN resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for INT_CONST_CHAR resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for FLOAT_CONST resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for HEX_FLOAT_CONST resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for CHAR_CONST resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for WCHAR_CONST resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for U8CHAR_CONST resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for U16CHAR_CONST resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for U32CHAR_CONST resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for STRING_LITERAL resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for WSTRING_LITERAL resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for U8STRING_LITERAL resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for U16STRING_LITERAL resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for U32STRING_LITERAL resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
  ! reduce/reduce conflict for SEMI resolved using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    PPPRAGMA        reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    _PRAGMA         reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    ID              reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    CASE            reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    DEFAULT         reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    IF              reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    SWITCH          reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    WHILE           reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    DO              reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    FOR             reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    GOTO            reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    BREAK           reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    CONTINUE        reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    RETURN          reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    _STATIC_ASSERT  reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    LBRACE          reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    LPAREN          reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    PLUSPLUS        reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    MINUSMINUS      reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    SIZEOF          reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    _ALIGNOF        reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    AND             reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    TIMES           reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    PLUS            reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    MINUS           reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    NOT             reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    LNOT            reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    OFFSETOF        reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    INT_CONST_DEC   reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    INT_CONST_OCT   reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    INT_CONST_HEX   reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    INT_CONST_BIN   reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    INT_CONST_CHAR  reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    FLOAT_CONST     reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    HEX_FLOAT_CONST reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    CHAR_CONST      reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    WCHAR_CONST     reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    U8CHAR_CONST    reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    U16CHAR_CONST   reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    U32CHAR_CONST   reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    STRING_LITERAL  reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    WSTRING_LITERAL reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    U8STRING_LITERAL reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    U16STRING_LITERAL reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    U32STRING_LITERAL reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    SEMI            reduce using rule 75 (pppragma_directive_list -> pppragma_directive_list pppragma_directive .)
    CONST           reduce using rule 84 (statement -> pppragma_directive .)
    RESTRICT        reduce using rule 84 (statement -> pppragma_directive .)
    VOLATILE        reduce using rule 84 (statement -> pppragma_directive .)
    _ATOMIC         reduce using rule 84 (statement -> pppragma_directive .)
    AUTO            reduce using rule 84 (statement -> pppragma_directive .)
    REGISTER        reduce using rule 84 (statement -> pppragma_directive .)
    STATIC          reduce using rule 84 (statement -> pppragma_directive .)
    EXTERN          reduce using rule 84 (statement -> pppragma_directive .)
    TYPEDEF         reduce using rule 84 (statement -> pppragma_directive .)
    _THREAD_LOCAL   reduce using rule 84 (statement -> pppragma_directive .)
    INLINE          reduce using rule 84 (statement -> pppragma_directive .)
    _NORETURN       reduce using rule 84 (statement -> pppragma_directive .)
    _ALIGNAS        reduce using rule 84 (statement -> pppragma_directive .)
    TYPEID          reduce using rule 84 (statement -> pppragma_directive .)
    ENUM            reduce using rule 84 (statement -> pppragma_directive .)
    VOID            reduce using rule 84 (statement -> pppragma_directive .)
    _BOOL           reduce using rule 84 (statement -> pppragma_directive .)
    CHAR            reduce using rule 84 (statement -> pppragma_directive .)
    SHORT           reduce using rule 84 (statement -> pppragma_directive .)
    INT             reduce using rule 84 (statement -> pppragma_directive .)
    LONG            reduce using rule 84 (statement -> pppragma_directive .)
    FLOAT           reduce using rule 84 (statement -> pppragma_directive .)
    DOUBLE          reduce using rule 84 (statement -> pppragma_directive .)
    _COMPLEX        reduce using rule 84 (statement -> pppragma_directive .)
    SIGNED          reduce using rule 84 (statement -> pppragma_directive .)
    UNSIGNED        reduce using rule 84 (statement -> pppragma_directive .)
    __INT128        reduce using rule 84 (statement -> pppragma_directive .)
    STRUCT          reduce using rule 84 (statement -> pppragma_directive .)
    UNION           reduce using rule 84 (statement -> pppragma_directive .)
    RBRACE          reduce using rule 84 (statement -> pppragma_directive .)
    ELSE            reduce using rule 84 (statement -> pppragma_directive .)

  ! ID              [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! CASE            [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! DEFAULT         [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! IF              [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! SWITCH          [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! WHILE           [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! DO              [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! FOR             [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! GOTO            [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! BREAK           [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! CONTINUE        [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! RETURN          [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! PPPRAGMA        [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! _PRAGMA         [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! _STATIC_ASSERT  [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! LBRACE          [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! LPAREN          [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! PLUSPLUS        [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! MINUSMINUS      [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! SIZEOF          [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! _ALIGNOF        [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! AND             [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! TIMES           [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! PLUS            [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! MINUS           [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! NOT             [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! LNOT            [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! OFFSETOF        [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! INT_CONST_DEC   [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! INT_CONST_OCT   [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! INT_CONST_HEX   [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! INT_CONST_BIN   [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! INT_CONST_CHAR  [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! FLOAT_CONST     [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! HEX_FLOAT_CONST [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! CHAR_CONST      [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! WCHAR_CONST     [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! U8CHAR_CONST    [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! U16CHAR_CONST   [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! U32CHAR_CONST   [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! STRING_LITERAL  [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! WSTRING_LITERAL [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! U8STRING_LITERAL [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! U16STRING_LITERAL [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! U32STRING_LITERAL [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! SEMI            [ reduce using rule 84 (statement -> pppragma_directive .) ]


state 481

    (230) iteration_statement -> FOR LPAREN expression_opt . SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement

    SEMI            shift and go to state 529


state 482

    (231) iteration_statement -> FOR LPAREN declaration . expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (340) empty -> .
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    SEMI            reduce using rule 340 (empty -> .)
    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    expression_opt                 shift and go to state 530
    empty                          shift and go to state 357
    expression                     shift and go to state 239
    assignment_expression          shift and go to state 248
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 483

    (232) jump_statement -> GOTO ID SEMI .

    ID              reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    CASE            reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    DEFAULT         reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    IF              reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    SWITCH          reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    WHILE           reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    DO              reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    FOR             reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    GOTO            reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    BREAK           reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    CONTINUE        reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    RETURN          reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    PPPRAGMA        reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    _PRAGMA         reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    _STATIC_ASSERT  reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    LBRACE          reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    CONST           reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    RESTRICT        reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    VOLATILE        reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    _ATOMIC         reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    AUTO            reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    REGISTER        reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    STATIC          reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    EXTERN          reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    TYPEDEF         reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    _THREAD_LOCAL   reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    INLINE          reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    _NORETURN       reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    _ALIGNAS        reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    TYPEID          reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    ENUM            reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    VOID            reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    _BOOL           reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    CHAR            reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    SHORT           reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    INT             reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    LONG            reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    FLOAT           reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    DOUBLE          reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    _COMPLEX        reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    SIGNED          reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    UNSIGNED        reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    __INT128        reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    LPAREN          reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    STRUCT          reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    UNION           reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    PLUSPLUS        reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    MINUSMINUS      reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    SIZEOF          reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    _ALIGNOF        reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    AND             reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    TIMES           reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    PLUS            reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    MINUS           reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    NOT             reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    LNOT            reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    OFFSETOF        reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    INT_CONST_DEC   reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    INT_CONST_OCT   reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    INT_CONST_HEX   reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    INT_CONST_BIN   reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    INT_CONST_CHAR  reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    FLOAT_CONST     reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    HEX_FLOAT_CONST reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    CHAR_CONST      reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    WCHAR_CONST     reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    U8CHAR_CONST    reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    U16CHAR_CONST   reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    U32CHAR_CONST   reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    STRING_LITERAL  reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    WSTRING_LITERAL reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    U8STRING_LITERAL reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    U16STRING_LITERAL reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    U32STRING_LITERAL reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    SEMI            reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    RBRACE          reduce using rule 232 (jump_statement -> GOTO ID SEMI .)
    ELSE            reduce using rule 232 (jump_statement -> GOTO ID SEMI .)


state 484

    (235) jump_statement -> RETURN expression SEMI .

    ID              reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    CASE            reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    DEFAULT         reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    IF              reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    SWITCH          reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    DO              reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    GOTO            reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    CONTINUE        reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    PPPRAGMA        reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    _PRAGMA         reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    _STATIC_ASSERT  reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    LBRACE          reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    CONST           reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    RESTRICT        reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    VOLATILE        reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    _ATOMIC         reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    AUTO            reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    REGISTER        reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    STATIC          reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    EXTERN          reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    TYPEDEF         reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    _THREAD_LOCAL   reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    INLINE          reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    _NORETURN       reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    _ALIGNAS        reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    TYPEID          reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    ENUM            reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    VOID            reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    _BOOL           reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    CHAR            reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    SHORT           reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    INT             reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    LONG            reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    FLOAT           reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    DOUBLE          reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    _COMPLEX        reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    SIGNED          reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    UNSIGNED        reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    __INT128        reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    STRUCT          reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    UNION           reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    PLUSPLUS        reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    MINUSMINUS      reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    SIZEOF          reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    _ALIGNOF        reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    AND             reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    TIMES           reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    PLUS            reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    MINUS           reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    NOT             reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    LNOT            reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    OFFSETOF        reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    INT_CONST_DEC   reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    INT_CONST_OCT   reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    INT_CONST_HEX   reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    INT_CONST_BIN   reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    INT_CONST_CHAR  reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    FLOAT_CONST     reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    HEX_FLOAT_CONST reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    CHAR_CONST      reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    WCHAR_CONST     reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    U8CHAR_CONST    reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    U16CHAR_CONST   reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    U32CHAR_CONST   reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    STRING_LITERAL  reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    WSTRING_LITERAL reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    U8STRING_LITERAL reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    U16STRING_LITERAL reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    U32STRING_LITERAL reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    SEMI            reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    RBRACE          reduce using rule 235 (jump_statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 235 (jump_statement -> RETURN expression SEMI .)


state 485

    (243) assignment_expression -> unary_expression assignment_operator assignment_expression .

    COMMA           reduce using rule 243 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMI            reduce using rule 243 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 243 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 243 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 243 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 243 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 486

    (197) initializer -> brace_open initializer_list_opt brace_close .

    COMMA           reduce using rule 197 (initializer -> brace_open initializer_list_opt brace_close .)
    SEMI            reduce using rule 197 (initializer -> brace_open initializer_list_opt brace_close .)
    RBRACE          reduce using rule 197 (initializer -> brace_open initializer_list_opt brace_close .)


state 487

    (198) initializer -> brace_open initializer_list COMMA . brace_close
    (200) initializer_list -> initializer_list COMMA . designation_opt initializer
    (339) brace_close -> . RBRACE
    (11) designation_opt -> . empty
    (12) designation_opt -> . designation
    (340) empty -> .
    (201) designation -> . designator_list EQUALS
    (202) designator_list -> . designator
    (203) designator_list -> . designator_list designator
    (204) designator -> . LBRACKET constant_expression RBRACKET
    (205) designator -> . PERIOD identifier

    RBRACE          shift and go to state 208
    LPAREN          reduce using rule 340 (empty -> .)
    LBRACE          reduce using rule 340 (empty -> .)
    PLUSPLUS        reduce using rule 340 (empty -> .)
    MINUSMINUS      reduce using rule 340 (empty -> .)
    SIZEOF          reduce using rule 340 (empty -> .)
    _ALIGNOF        reduce using rule 340 (empty -> .)
    AND             reduce using rule 340 (empty -> .)
    TIMES           reduce using rule 340 (empty -> .)
    PLUS            reduce using rule 340 (empty -> .)
    MINUS           reduce using rule 340 (empty -> .)
    NOT             reduce using rule 340 (empty -> .)
    LNOT            reduce using rule 340 (empty -> .)
    OFFSETOF        reduce using rule 340 (empty -> .)
    ID              reduce using rule 340 (empty -> .)
    INT_CONST_DEC   reduce using rule 340 (empty -> .)
    INT_CONST_OCT   reduce using rule 340 (empty -> .)
    INT_CONST_HEX   reduce using rule 340 (empty -> .)
    INT_CONST_BIN   reduce using rule 340 (empty -> .)
    INT_CONST_CHAR  reduce using rule 340 (empty -> .)
    FLOAT_CONST     reduce using rule 340 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 340 (empty -> .)
    CHAR_CONST      reduce using rule 340 (empty -> .)
    WCHAR_CONST     reduce using rule 340 (empty -> .)
    U8CHAR_CONST    reduce using rule 340 (empty -> .)
    U16CHAR_CONST   reduce using rule 340 (empty -> .)
    U32CHAR_CONST   reduce using rule 340 (empty -> .)
    STRING_LITERAL  reduce using rule 340 (empty -> .)
    WSTRING_LITERAL reduce using rule 340 (empty -> .)
    U8STRING_LITERAL reduce using rule 340 (empty -> .)
    U16STRING_LITERAL reduce using rule 340 (empty -> .)
    U32STRING_LITERAL reduce using rule 340 (empty -> .)
    LBRACKET        shift and go to state 397
    PERIOD          shift and go to state 398

    brace_close                    shift and go to state 531
    designation_opt                shift and go to state 532
    empty                          shift and go to state 533
    designation                    shift and go to state 394
    designator_list                shift and go to state 395
    designator                     shift and go to state 396

state 488

    (199) initializer_list -> designation_opt initializer .

    COMMA           reduce using rule 199 (initializer_list -> designation_opt initializer .)
    RBRACE          reduce using rule 199 (initializer_list -> designation_opt initializer .)


state 489

    (201) designation -> designator_list EQUALS .

    LPAREN          reduce using rule 201 (designation -> designator_list EQUALS .)
    LBRACE          reduce using rule 201 (designation -> designator_list EQUALS .)
    PLUSPLUS        reduce using rule 201 (designation -> designator_list EQUALS .)
    MINUSMINUS      reduce using rule 201 (designation -> designator_list EQUALS .)
    SIZEOF          reduce using rule 201 (designation -> designator_list EQUALS .)
    _ALIGNOF        reduce using rule 201 (designation -> designator_list EQUALS .)
    AND             reduce using rule 201 (designation -> designator_list EQUALS .)
    TIMES           reduce using rule 201 (designation -> designator_list EQUALS .)
    PLUS            reduce using rule 201 (designation -> designator_list EQUALS .)
    MINUS           reduce using rule 201 (designation -> designator_list EQUALS .)
    NOT             reduce using rule 201 (designation -> designator_list EQUALS .)
    LNOT            reduce using rule 201 (designation -> designator_list EQUALS .)
    OFFSETOF        reduce using rule 201 (designation -> designator_list EQUALS .)
    ID              reduce using rule 201 (designation -> designator_list EQUALS .)
    INT_CONST_DEC   reduce using rule 201 (designation -> designator_list EQUALS .)
    INT_CONST_OCT   reduce using rule 201 (designation -> designator_list EQUALS .)
    INT_CONST_HEX   reduce using rule 201 (designation -> designator_list EQUALS .)
    INT_CONST_BIN   reduce using rule 201 (designation -> designator_list EQUALS .)
    INT_CONST_CHAR  reduce using rule 201 (designation -> designator_list EQUALS .)
    FLOAT_CONST     reduce using rule 201 (designation -> designator_list EQUALS .)
    HEX_FLOAT_CONST reduce using rule 201 (designation -> designator_list EQUALS .)
    CHAR_CONST      reduce using rule 201 (designation -> designator_list EQUALS .)
    WCHAR_CONST     reduce using rule 201 (designation -> designator_list EQUALS .)
    U8CHAR_CONST    reduce using rule 201 (designation -> designator_list EQUALS .)
    U16CHAR_CONST   reduce using rule 201 (designation -> designator_list EQUALS .)
    U32CHAR_CONST   reduce using rule 201 (designation -> designator_list EQUALS .)
    STRING_LITERAL  reduce using rule 201 (designation -> designator_list EQUALS .)
    WSTRING_LITERAL reduce using rule 201 (designation -> designator_list EQUALS .)
    U8STRING_LITERAL reduce using rule 201 (designation -> designator_list EQUALS .)
    U16STRING_LITERAL reduce using rule 201 (designation -> designator_list EQUALS .)
    U32STRING_LITERAL reduce using rule 201 (designation -> designator_list EQUALS .)


state 490

    (203) designator_list -> designator_list designator .

    EQUALS          reduce using rule 203 (designator_list -> designator_list designator .)
    LBRACKET        reduce using rule 203 (designator_list -> designator_list designator .)
    PERIOD          reduce using rule 203 (designator_list -> designator_list designator .)


state 491

    (204) designator -> LBRACKET constant_expression . RBRACKET

    RBRACKET        shift and go to state 534


state 492

    (205) designator -> PERIOD identifier .

    EQUALS          reduce using rule 205 (designator -> PERIOD identifier .)
    LBRACKET        reduce using rule 205 (designator -> PERIOD identifier .)
    PERIOD          reduce using rule 205 (designator -> PERIOD identifier .)


state 493

    (39) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .

    LBRACKET        reduce using rule 39 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    LPAREN          reduce using rule 39 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    EQUALS          reduce using rule 39 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    COMMA           reduce using rule 39 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    SEMI            reduce using rule 39 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    RPAREN          reduce using rule 39 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    COLON           reduce using rule 39 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)


state 494

    (42) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .

    LBRACKET        reduce using rule 42 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    LPAREN          reduce using rule 42 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    EQUALS          reduce using rule 42 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    COMMA           reduce using rule 42 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    SEMI            reduce using rule 42 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    RPAREN          reduce using rule 42 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    COLON           reduce using rule 42 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)


state 495

    (40) direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression . RBRACKET

    RBRACKET        shift and go to state 535


state 496

    (41) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 536


state 497

    (278) cast_expression -> LPAREN type_name RPAREN cast_expression .

    CONDOP          reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    TIMES           reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVIDE          reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MOD             reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUS            reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUS           reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFT          reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFT          reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LT              reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LE              reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GE              reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GT              reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQ              reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NE              reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND             reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR              reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOR             reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LAND            reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LOR             reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMI            reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUALS          reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOREQUAL        reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    TIMESEQUAL      reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVEQUAL        reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODEQUAL        reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSEQUAL       reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSEQUAL      reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFTEQUAL     reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFTEQUAL     reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ANDEQUAL        reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OREQUAL         reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACKET        reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COLON           reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACE          reduce using rule 278 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 498

    (302) postfix_expression -> LPAREN type_name RPAREN brace_open . initializer_list brace_close
    (303) postfix_expression -> LPAREN type_name RPAREN brace_open . initializer_list COMMA brace_close
    (199) initializer_list -> . designation_opt initializer
    (200) initializer_list -> . initializer_list COMMA designation_opt initializer
    (11) designation_opt -> . empty
    (12) designation_opt -> . designation
    (340) empty -> .
    (201) designation -> . designator_list EQUALS
    (202) designator_list -> . designator
    (203) designator_list -> . designator_list designator
    (204) designator -> . LBRACKET constant_expression RBRACKET
    (205) designator -> . PERIOD identifier

    LPAREN          reduce using rule 340 (empty -> .)
    LBRACE          reduce using rule 340 (empty -> .)
    PLUSPLUS        reduce using rule 340 (empty -> .)
    MINUSMINUS      reduce using rule 340 (empty -> .)
    SIZEOF          reduce using rule 340 (empty -> .)
    _ALIGNOF        reduce using rule 340 (empty -> .)
    AND             reduce using rule 340 (empty -> .)
    TIMES           reduce using rule 340 (empty -> .)
    PLUS            reduce using rule 340 (empty -> .)
    MINUS           reduce using rule 340 (empty -> .)
    NOT             reduce using rule 340 (empty -> .)
    LNOT            reduce using rule 340 (empty -> .)
    OFFSETOF        reduce using rule 340 (empty -> .)
    ID              reduce using rule 340 (empty -> .)
    INT_CONST_DEC   reduce using rule 340 (empty -> .)
    INT_CONST_OCT   reduce using rule 340 (empty -> .)
    INT_CONST_HEX   reduce using rule 340 (empty -> .)
    INT_CONST_BIN   reduce using rule 340 (empty -> .)
    INT_CONST_CHAR  reduce using rule 340 (empty -> .)
    FLOAT_CONST     reduce using rule 340 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 340 (empty -> .)
    CHAR_CONST      reduce using rule 340 (empty -> .)
    WCHAR_CONST     reduce using rule 340 (empty -> .)
    U8CHAR_CONST    reduce using rule 340 (empty -> .)
    U16CHAR_CONST   reduce using rule 340 (empty -> .)
    U32CHAR_CONST   reduce using rule 340 (empty -> .)
    STRING_LITERAL  reduce using rule 340 (empty -> .)
    WSTRING_LITERAL reduce using rule 340 (empty -> .)
    U8STRING_LITERAL reduce using rule 340 (empty -> .)
    U16STRING_LITERAL reduce using rule 340 (empty -> .)
    U32STRING_LITERAL reduce using rule 340 (empty -> .)
    LBRACKET        shift and go to state 397
    PERIOD          shift and go to state 398

    initializer_list               shift and go to state 537
    designation_opt                shift and go to state 393
    empty                          shift and go to state 533
    designation                    shift and go to state 394
    designator_list                shift and go to state 395
    designator                     shift and go to state 396

state 499

    (68) static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .

    SEMI            reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    PPHASH          reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    PPPRAGMA        reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    _PRAGMA         reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    _STATIC_ASSERT  reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    ID              reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    LPAREN          reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    TIMES           reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    TYPEID          reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    ENUM            reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    VOID            reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    _BOOL           reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    CHAR            reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    SHORT           reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    INT             reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    LONG            reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    FLOAT           reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    DOUBLE          reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    _COMPLEX        reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    SIGNED          reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    UNSIGNED        reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    __INT128        reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    _ATOMIC         reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    CONST           reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    RESTRICT        reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    VOLATILE        reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    AUTO            reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    REGISTER        reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    STATIC          reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    EXTERN          reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    TYPEDEF         reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    _THREAD_LOCAL   reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    INLINE          reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    _NORETURN       reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    _ALIGNAS        reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    STRUCT          reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    UNION           reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    $end            reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    CASE            reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    DEFAULT         reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    IF              reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    SWITCH          reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    WHILE           reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    DO              reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    FOR             reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    GOTO            reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    BREAK           reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    CONTINUE        reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    RETURN          reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    LBRACE          reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    PLUSPLUS        reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    MINUSMINUS      reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    SIZEOF          reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    _ALIGNOF        reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    AND             reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    PLUS            reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    MINUS           reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    NOT             reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    LNOT            reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    OFFSETOF        reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    INT_CONST_DEC   reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    INT_CONST_OCT   reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    INT_CONST_HEX   reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    INT_CONST_BIN   reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    INT_CONST_CHAR  reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    FLOAT_CONST     reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    HEX_FLOAT_CONST reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    CHAR_CONST      reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    WCHAR_CONST     reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    U8CHAR_CONST    reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    U16CHAR_CONST   reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    U32CHAR_CONST   reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    STRING_LITERAL  reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    WSTRING_LITERAL reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    U8STRING_LITERAL reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    U16STRING_LITERAL reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    U32STRING_LITERAL reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    RBRACE          reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)
    ELSE            reduce using rule 68 (static_assert -> _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN .)


state 500

    (257) conditional_expression -> binary_expression CONDOP expression COLON . conditional_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 141
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    binary_expression              shift and go to state 145
    conditional_expression         shift and go to state 538
    cast_expression                shift and go to state 146
    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 501

    (293) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PERIOD          reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ARROW           reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    CONDOP          reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFT          reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFT          reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NE              reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOR             reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LAND            reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LOR             reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOREQUAL        reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMESEQUAL      reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVEQUAL        reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODEQUAL        reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSEQUAL       reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSEQUAL      reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFTEQUAL     reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFTEQUAL     reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ANDEQUAL        reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OREQUAL         reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 293 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 502

    (294) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    LBRACKET        reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LPAREN          reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PERIOD          reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ARROW           reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUSPLUS        reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUSMINUS      reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    CONDOP          reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMES           reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVIDE          reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD             reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFT          reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFT          reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LT              reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LE              reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GE              reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GT              reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ              reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NE              reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND             reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR              reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOR             reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LAND            reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LOR             reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQUALS          reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOREQUAL        reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMESEQUAL      reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVEQUAL        reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MODEQUAL        reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUSEQUAL       reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUSEQUAL      reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFTEQUAL     reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFTEQUAL     reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ANDEQUAL        reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OREQUAL         reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SEMI            reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACKET        reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COLON           reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACE          reduce using rule 294 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)


state 503

    (314) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    assignment_expression          shift and go to state 539
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 504

    (302) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list brace_close
    (303) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list COMMA brace_close
    (338) brace_open -> . LBRACE

    LBRACE          shift and go to state 121

    brace_open                     shift and go to state 498

state 505

    (284) unary_expression -> SIZEOF LPAREN type_name RPAREN .
    (302) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list brace_close
    (303) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list COMMA brace_close
    (338) brace_open -> . LBRACE

    CONDOP          reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    TIMES           reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVIDE          reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MOD             reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUS            reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUS           reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LT              reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LE              reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GE              reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GT              reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQ              reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    NE              reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    AND             reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OR              reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOR             reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LAND            reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LOR             reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQUALS          reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOREQUAL        reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    TIMESEQUAL      reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVEQUAL        reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODEQUAL        reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSEQUAL       reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSEQUAL      reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFTEQUAL     reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFTEQUAL     reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ANDEQUAL        reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OREQUAL         reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SEMI            reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACKET        reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACE          reduce using rule 284 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LBRACE          shift and go to state 121

    brace_open                     shift and go to state 498

state 506

    (285) unary_expression -> _ALIGNOF LPAREN type_name RPAREN .

    CONDOP          reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    TIMES           reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    DIVIDE          reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    MOD             reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    PLUS            reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    MINUS           reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    LT              reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    LE              reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    GE              reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    GT              reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    EQ              reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    NE              reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    AND             reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    OR              reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    XOR             reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    LAND            reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    LOR             reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    EQUALS          reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    XOREQUAL        reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    TIMESEQUAL      reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    DIVEQUAL        reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    MODEQUAL        reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    PLUSEQUAL       reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    MINUSEQUAL      reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    LSHIFTEQUAL     reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    RSHIFTEQUAL     reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    ANDEQUAL        reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    OREQUAL         reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    SEMI            reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    RBRACKET        reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)
    RBRACE          reduce using rule 285 (unary_expression -> _ALIGNOF LPAREN type_name RPAREN .)


state 507

    (309) primary_expression -> OFFSETOF LPAREN type_name COMMA . offsetof_member_designator RPAREN
    (310) offsetof_member_designator -> . identifier
    (311) offsetof_member_designator -> . offsetof_member_designator PERIOD identifier
    (312) offsetof_member_designator -> . offsetof_member_designator LBRACKET expression RBRACKET
    (315) identifier -> . ID

    ID              shift and go to state 159

    offsetof_member_designator     shift and go to state 540
    identifier                     shift and go to state 541

state 508

    (32) direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .

    LBRACKET        reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    LPAREN          reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    CONST           reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    RESTRICT        reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    VOLATILE        reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    _ATOMIC         reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    AUTO            reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    REGISTER        reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    STATIC          reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    EXTERN          reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    TYPEDEF         reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    _THREAD_LOCAL   reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    INLINE          reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    _NORETURN       reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    _ALIGNAS        reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    TYPEID          reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    ENUM            reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    VOID            reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    _BOOL           reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    CHAR            reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    SHORT           reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    INT             reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    LONG            reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    FLOAT           reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    DOUBLE          reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    _COMPLEX        reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    SIGNED          reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    UNSIGNED        reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    __INT128        reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    STRUCT          reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    UNION           reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    LBRACE          reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    EQUALS          reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    COMMA           reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    SEMI            reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    RPAREN          reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    COLON           reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)


state 509

    (33) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .

    LBRACKET        reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LPAREN          reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    CONST           reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RESTRICT        reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    VOLATILE        reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    _ATOMIC         reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    AUTO            reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    REGISTER        reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    STATIC          reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    EXTERN          reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    TYPEDEF         reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    _THREAD_LOCAL   reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    INLINE          reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    _NORETURN       reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    _ALIGNAS        reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    TYPEID          reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    ENUM            reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    VOID            reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    _BOOL           reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    CHAR            reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    SHORT           reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    INT             reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LONG            reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    FLOAT           reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    DOUBLE          reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    _COMPLEX        reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    SIGNED          reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    UNSIGNED        reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    __INT128        reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    STRUCT          reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    UNION           reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LBRACE          reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    EQUALS          reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    SEMI            reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COLON           reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)


state 510

    (46) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt . assignment_expression_opt RBRACKET
    (49) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt . TIMES RBRACKET
    (3) assignment_expression_opt -> . empty
    (4) assignment_expression_opt -> . assignment_expression
    (340) empty -> .
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    TIMES           shift and go to state 543
    RBRACKET        reduce using rule 340 (empty -> .)
    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    assignment_expression_opt      shift and go to state 542
    empty                          shift and go to state 307
    assignment_expression          shift and go to state 308
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 511

    (47) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC . type_qualifier_list_opt assignment_expression RBRACKET
    (27) type_qualifier_list_opt -> . empty
    (28) type_qualifier_list_opt -> . type_qualifier_list
    (340) empty -> .
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC

    LPAREN          reduce using rule 340 (empty -> .)
    PLUSPLUS        reduce using rule 340 (empty -> .)
    MINUSMINUS      reduce using rule 340 (empty -> .)
    SIZEOF          reduce using rule 340 (empty -> .)
    _ALIGNOF        reduce using rule 340 (empty -> .)
    AND             reduce using rule 340 (empty -> .)
    TIMES           reduce using rule 340 (empty -> .)
    PLUS            reduce using rule 340 (empty -> .)
    MINUS           reduce using rule 340 (empty -> .)
    NOT             reduce using rule 340 (empty -> .)
    LNOT            reduce using rule 340 (empty -> .)
    OFFSETOF        reduce using rule 340 (empty -> .)
    ID              reduce using rule 340 (empty -> .)
    INT_CONST_DEC   reduce using rule 340 (empty -> .)
    INT_CONST_OCT   reduce using rule 340 (empty -> .)
    INT_CONST_HEX   reduce using rule 340 (empty -> .)
    INT_CONST_BIN   reduce using rule 340 (empty -> .)
    INT_CONST_CHAR  reduce using rule 340 (empty -> .)
    FLOAT_CONST     reduce using rule 340 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 340 (empty -> .)
    CHAR_CONST      reduce using rule 340 (empty -> .)
    WCHAR_CONST     reduce using rule 340 (empty -> .)
    U8CHAR_CONST    reduce using rule 340 (empty -> .)
    U16CHAR_CONST   reduce using rule 340 (empty -> .)
    U32CHAR_CONST   reduce using rule 340 (empty -> .)
    STRING_LITERAL  reduce using rule 340 (empty -> .)
    WSTRING_LITERAL reduce using rule 340 (empty -> .)
    U8STRING_LITERAL reduce using rule 340 (empty -> .)
    U16STRING_LITERAL reduce using rule 340 (empty -> .)
    U32STRING_LITERAL reduce using rule 340 (empty -> .)
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 81

    type_qualifier_list_opt        shift and go to state 544
    empty                          shift and go to state 114
    type_qualifier_list            shift and go to state 115
    type_qualifier                 shift and go to state 116

state 512

    (48) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list . STATIC assignment_expression RBRACKET
    (28) type_qualifier_list_opt -> type_qualifier_list .
    (186) type_qualifier_list -> type_qualifier_list . type_qualifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . RESTRICT
    (133) type_qualifier -> . VOLATILE
    (134) type_qualifier -> . _ATOMIC

    STATIC          shift and go to state 545
    TIMES           reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    LPAREN          reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUSPLUS        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUSMINUS      reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    SIZEOF          reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    _ALIGNOF        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    AND             reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUS            reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUS           reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    NOT             reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    LNOT            reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    OFFSETOF        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    ID              reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_DEC   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_OCT   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_HEX   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_BIN   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_CHAR  reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    FLOAT_CONST     reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    HEX_FLOAT_CONST reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    CHAR_CONST      reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    WCHAR_CONST     reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    U8CHAR_CONST    reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    U16CHAR_CONST   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    U32CHAR_CONST   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    STRING_LITERAL  reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    WSTRING_LITERAL reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    U8STRING_LITERAL reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    U16STRING_LITERAL reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    U32STRING_LITERAL reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    RBRACKET        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    CONST           shift and go to state 51
    RESTRICT        shift and go to state 52
    VOLATILE        shift and go to state 53
    _ATOMIC         shift and go to state 81

    type_qualifier                 shift and go to state 197

state 513

    (50) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 546


state 514

    (51) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN identifier_list_opt . RPAREN

    RPAREN          shift and go to state 547


state 515

    (210) direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .

    LBRACKET        reduce using rule 210 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LPAREN          reduce using rule 210 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COMMA           reduce using rule 210 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    RPAREN          reduce using rule 210 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)


state 516

    (216) direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .

    LBRACKET        reduce using rule 216 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)
    LPAREN          reduce using rule 216 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)
    COMMA           reduce using rule 216 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)
    RPAREN          reduce using rule 216 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)


state 517

    (212) direct_abstract_declarator -> LBRACKET type_qualifier_list_opt assignment_expression_opt . RBRACKET

    RBRACKET        shift and go to state 548


state 518

    (214) direct_abstract_declarator -> LBRACKET TIMES RBRACKET .

    LBRACKET        reduce using rule 214 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    LPAREN          reduce using rule 214 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    COMMA           reduce using rule 214 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    RPAREN          reduce using rule 214 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)


state 519

    (211) direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt . RBRACKET

    RBRACKET        shift and go to state 549


state 520

    (213) direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES . RBRACKET
    (287) unary_operator -> TIMES .

    RBRACKET        shift and go to state 550
    LPAREN          reduce using rule 287 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 287 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 287 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 287 (unary_operator -> TIMES .)
    _ALIGNOF        reduce using rule 287 (unary_operator -> TIMES .)
    AND             reduce using rule 287 (unary_operator -> TIMES .)
    TIMES           reduce using rule 287 (unary_operator -> TIMES .)
    PLUS            reduce using rule 287 (unary_operator -> TIMES .)
    MINUS           reduce using rule 287 (unary_operator -> TIMES .)
    NOT             reduce using rule 287 (unary_operator -> TIMES .)
    LNOT            reduce using rule 287 (unary_operator -> TIMES .)
    OFFSETOF        reduce using rule 287 (unary_operator -> TIMES .)
    ID              reduce using rule 287 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 287 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 287 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 287 (unary_operator -> TIMES .)
    INT_CONST_BIN   reduce using rule 287 (unary_operator -> TIMES .)
    INT_CONST_CHAR  reduce using rule 287 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 287 (unary_operator -> TIMES .)
    HEX_FLOAT_CONST reduce using rule 287 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 287 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 287 (unary_operator -> TIMES .)
    U8CHAR_CONST    reduce using rule 287 (unary_operator -> TIMES .)
    U16CHAR_CONST   reduce using rule 287 (unary_operator -> TIMES .)
    U32CHAR_CONST   reduce using rule 287 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 287 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 287 (unary_operator -> TIMES .)
    U8STRING_LITERAL reduce using rule 287 (unary_operator -> TIMES .)
    U16STRING_LITERAL reduce using rule 287 (unary_operator -> TIMES .)
    U32STRING_LITERAL reduce using rule 287 (unary_operator -> TIMES .)


state 521

    (215) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt . RPAREN

    RPAREN          shift and go to state 551


state 522

    (165) struct_declarator_list -> struct_declarator_list COMMA struct_declarator .

    COMMA           reduce using rule 165 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    SEMI            reduce using rule 165 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)


state 523

    (167) struct_declarator -> declarator COLON constant_expression .

    COMMA           reduce using rule 167 (struct_declarator -> declarator COLON constant_expression .)
    SEMI            reduce using rule 167 (struct_declarator -> declarator COLON constant_expression .)


state 524

    (223) labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .

    ID              reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    CASE            reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    DEFAULT         reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    IF              reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    SWITCH          reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    WHILE           reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    DO              reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    FOR             reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    GOTO            reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    BREAK           reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    CONTINUE        reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    RETURN          reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    _PRAGMA         reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    _STATIC_ASSERT  reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    LBRACE          reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    CONST           reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    RESTRICT        reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    VOLATILE        reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    _ATOMIC         reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    AUTO            reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    REGISTER        reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    STATIC          reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    EXTERN          reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    _THREAD_LOCAL   reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    INLINE          reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    _NORETURN       reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    _ALIGNAS        reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    TYPEID          reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    ENUM            reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    VOID            reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    _BOOL           reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    CHAR            reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    SHORT           reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    INT             reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    LONG            reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    FLOAT           reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    DOUBLE          reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    _COMPLEX        reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    SIGNED          reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    __INT128        reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    LPAREN          reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    STRUCT          reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    UNION           reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    SIZEOF          reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    _ALIGNOF        reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    AND             reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    TIMES           reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    PLUS            reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    MINUS           reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    NOT             reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    LNOT            reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    INT_CONST_CHAR  reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    U8CHAR_CONST    reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    U16CHAR_CONST   reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    U32CHAR_CONST   reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    U8STRING_LITERAL reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    U16STRING_LITERAL reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    U32STRING_LITERAL reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    SEMI            reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    RBRACE          reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    ELSE            reduce using rule 223 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)


state 525

    (225) selection_statement -> IF LPAREN expression RPAREN . pragmacomp_or_statement
    (226) selection_statement -> IF LPAREN expression RPAREN . statement ELSE pragmacomp_or_statement
    (86) pragmacomp_or_statement -> . pppragma_directive_list statement
    (87) pragmacomp_or_statement -> . statement
    (78) statement -> . labeled_statement
    (79) statement -> . expression_statement
    (80) statement -> . compound_statement
    (81) statement -> . selection_statement
    (82) statement -> . iteration_statement
    (83) statement -> . jump_statement
    (84) statement -> . pppragma_directive
    (85) statement -> . static_assert
    (74) pppragma_directive_list -> . pppragma_directive
    (75) pppragma_directive_list -> . pppragma_directive_list pppragma_directive
    (222) labeled_statement -> . ID COLON pragmacomp_or_statement
    (223) labeled_statement -> . CASE constant_expression COLON pragmacomp_or_statement
    (224) labeled_statement -> . DEFAULT COLON pragmacomp_or_statement
    (237) expression_statement -> . expression_opt SEMI
    (221) compound_statement -> . brace_open block_item_list_opt brace_close
    (225) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (226) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (227) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (228) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (229) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (230) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (231) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (232) jump_statement -> . GOTO ID SEMI
    (233) jump_statement -> . BREAK SEMI
    (234) jump_statement -> . CONTINUE SEMI
    (235) jump_statement -> . RETURN expression SEMI
    (236) jump_statement -> . RETURN SEMI
    (71) pppragma_directive -> . PPPRAGMA
    (72) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (73) pppragma_directive -> . _PRAGMA LPAREN unified_string_literal RPAREN
    (68) static_assert -> . _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN
    (69) static_assert -> . _STATIC_ASSERT LPAREN constant_expression RPAREN
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (338) brace_open -> . LBRACE
    (340) empty -> .
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    ID              shift and go to state 233
    CASE            shift and go to state 234
    DEFAULT         shift and go to state 235
    IF              shift and go to state 237
    SWITCH          shift and go to state 240
    WHILE           shift and go to state 241
    DO              shift and go to state 242
    FOR             shift and go to state 243
    GOTO            shift and go to state 244
    BREAK           shift and go to state 245
    CONTINUE        shift and go to state 246
    RETURN          shift and go to state 247
    PPPRAGMA        shift and go to state 15
    _PRAGMA         shift and go to state 16
    _STATIC_ASSERT  shift and go to state 18
    LBRACE          shift and go to state 121
    SEMI            reduce using rule 340 (empty -> .)
    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    expression                     shift and go to state 239
    pragmacomp_or_statement        shift and go to state 552
    statement                      shift and go to state 553
    pppragma_directive_list        shift and go to state 369
    labeled_statement              shift and go to state 225
    expression_statement           shift and go to state 226
    compound_statement             shift and go to state 227
    selection_statement            shift and go to state 228
    iteration_statement            shift and go to state 229
    jump_statement                 shift and go to state 230
    pppragma_directive             shift and go to state 554
    static_assert                  shift and go to state 232
    expression_opt                 shift and go to state 236
    brace_open                     shift and go to state 128
    unified_string_literal         shift and go to state 143
    empty                          shift and go to state 357
    assignment_expression          shift and go to state 248
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_wstring_literal        shift and go to state 164

state 526

    (227) selection_statement -> SWITCH LPAREN expression RPAREN . pragmacomp_or_statement
    (86) pragmacomp_or_statement -> . pppragma_directive_list statement
    (87) pragmacomp_or_statement -> . statement
    (74) pppragma_directive_list -> . pppragma_directive
    (75) pppragma_directive_list -> . pppragma_directive_list pppragma_directive
    (78) statement -> . labeled_statement
    (79) statement -> . expression_statement
    (80) statement -> . compound_statement
    (81) statement -> . selection_statement
    (82) statement -> . iteration_statement
    (83) statement -> . jump_statement
    (84) statement -> . pppragma_directive
    (85) statement -> . static_assert
    (71) pppragma_directive -> . PPPRAGMA
    (72) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (73) pppragma_directive -> . _PRAGMA LPAREN unified_string_literal RPAREN
    (222) labeled_statement -> . ID COLON pragmacomp_or_statement
    (223) labeled_statement -> . CASE constant_expression COLON pragmacomp_or_statement
    (224) labeled_statement -> . DEFAULT COLON pragmacomp_or_statement
    (237) expression_statement -> . expression_opt SEMI
    (221) compound_statement -> . brace_open block_item_list_opt brace_close
    (225) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (226) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (227) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (228) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (229) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (230) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (231) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (232) jump_statement -> . GOTO ID SEMI
    (233) jump_statement -> . BREAK SEMI
    (234) jump_statement -> . CONTINUE SEMI
    (235) jump_statement -> . RETURN expression SEMI
    (236) jump_statement -> . RETURN SEMI
    (68) static_assert -> . _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN
    (69) static_assert -> . _STATIC_ASSERT LPAREN constant_expression RPAREN
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (338) brace_open -> . LBRACE
    (340) empty -> .
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    PPPRAGMA        shift and go to state 15
    _PRAGMA         shift and go to state 16
    ID              shift and go to state 233
    CASE            shift and go to state 234
    DEFAULT         shift and go to state 235
    IF              shift and go to state 237
    SWITCH          shift and go to state 240
    WHILE           shift and go to state 241
    DO              shift and go to state 242
    FOR             shift and go to state 243
    GOTO            shift and go to state 244
    BREAK           shift and go to state 245
    CONTINUE        shift and go to state 246
    RETURN          shift and go to state 247
    _STATIC_ASSERT  shift and go to state 18
    LBRACE          shift and go to state 121
    SEMI            reduce using rule 340 (empty -> .)
    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    expression                     shift and go to state 239
    pragmacomp_or_statement        shift and go to state 555
    pppragma_directive_list        shift and go to state 369
    statement                      shift and go to state 370
    pppragma_directive             shift and go to state 371
    labeled_statement              shift and go to state 225
    expression_statement           shift and go to state 226
    compound_statement             shift and go to state 227
    selection_statement            shift and go to state 228
    iteration_statement            shift and go to state 229
    jump_statement                 shift and go to state 230
    static_assert                  shift and go to state 232
    unified_string_literal         shift and go to state 143
    expression_opt                 shift and go to state 236
    brace_open                     shift and go to state 128
    empty                          shift and go to state 357
    assignment_expression          shift and go to state 248
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_wstring_literal        shift and go to state 164

state 527

    (228) iteration_statement -> WHILE LPAREN expression RPAREN . pragmacomp_or_statement
    (86) pragmacomp_or_statement -> . pppragma_directive_list statement
    (87) pragmacomp_or_statement -> . statement
    (74) pppragma_directive_list -> . pppragma_directive
    (75) pppragma_directive_list -> . pppragma_directive_list pppragma_directive
    (78) statement -> . labeled_statement
    (79) statement -> . expression_statement
    (80) statement -> . compound_statement
    (81) statement -> . selection_statement
    (82) statement -> . iteration_statement
    (83) statement -> . jump_statement
    (84) statement -> . pppragma_directive
    (85) statement -> . static_assert
    (71) pppragma_directive -> . PPPRAGMA
    (72) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (73) pppragma_directive -> . _PRAGMA LPAREN unified_string_literal RPAREN
    (222) labeled_statement -> . ID COLON pragmacomp_or_statement
    (223) labeled_statement -> . CASE constant_expression COLON pragmacomp_or_statement
    (224) labeled_statement -> . DEFAULT COLON pragmacomp_or_statement
    (237) expression_statement -> . expression_opt SEMI
    (221) compound_statement -> . brace_open block_item_list_opt brace_close
    (225) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (226) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (227) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (228) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (229) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (230) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (231) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (232) jump_statement -> . GOTO ID SEMI
    (233) jump_statement -> . BREAK SEMI
    (234) jump_statement -> . CONTINUE SEMI
    (235) jump_statement -> . RETURN expression SEMI
    (236) jump_statement -> . RETURN SEMI
    (68) static_assert -> . _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN
    (69) static_assert -> . _STATIC_ASSERT LPAREN constant_expression RPAREN
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (338) brace_open -> . LBRACE
    (340) empty -> .
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    PPPRAGMA        shift and go to state 15
    _PRAGMA         shift and go to state 16
    ID              shift and go to state 233
    CASE            shift and go to state 234
    DEFAULT         shift and go to state 235
    IF              shift and go to state 237
    SWITCH          shift and go to state 240
    WHILE           shift and go to state 241
    DO              shift and go to state 242
    FOR             shift and go to state 243
    GOTO            shift and go to state 244
    BREAK           shift and go to state 245
    CONTINUE        shift and go to state 246
    RETURN          shift and go to state 247
    _STATIC_ASSERT  shift and go to state 18
    LBRACE          shift and go to state 121
    SEMI            reduce using rule 340 (empty -> .)
    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    expression                     shift and go to state 239
    pragmacomp_or_statement        shift and go to state 556
    pppragma_directive_list        shift and go to state 369
    statement                      shift and go to state 370
    pppragma_directive             shift and go to state 371
    labeled_statement              shift and go to state 225
    expression_statement           shift and go to state 226
    compound_statement             shift and go to state 227
    selection_statement            shift and go to state 228
    iteration_statement            shift and go to state 229
    jump_statement                 shift and go to state 230
    static_assert                  shift and go to state 232
    unified_string_literal         shift and go to state 143
    expression_opt                 shift and go to state 236
    brace_open                     shift and go to state 128
    empty                          shift and go to state 357
    assignment_expression          shift and go to state 248
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_wstring_literal        shift and go to state 164

state 528

    (229) iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN . expression RPAREN SEMI
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    expression                     shift and go to state 557
    assignment_expression          shift and go to state 248
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 529

    (230) iteration_statement -> FOR LPAREN expression_opt SEMI . expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (340) empty -> .
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    SEMI            reduce using rule 340 (empty -> .)
    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    expression_opt                 shift and go to state 558
    empty                          shift and go to state 357
    expression                     shift and go to state 239
    assignment_expression          shift and go to state 248
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 530

    (231) iteration_statement -> FOR LPAREN declaration expression_opt . SEMI expression_opt RPAREN pragmacomp_or_statement

    SEMI            shift and go to state 559


state 531

    (198) initializer -> brace_open initializer_list COMMA brace_close .

    COMMA           reduce using rule 198 (initializer -> brace_open initializer_list COMMA brace_close .)
    SEMI            reduce using rule 198 (initializer -> brace_open initializer_list COMMA brace_close .)
    RBRACE          reduce using rule 198 (initializer -> brace_open initializer_list COMMA brace_close .)


state 532

    (200) initializer_list -> initializer_list COMMA designation_opt . initializer
    (196) initializer -> . assignment_expression
    (197) initializer -> . brace_open initializer_list_opt brace_close
    (198) initializer -> . brace_open initializer_list COMMA brace_close
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (338) brace_open -> . LBRACE
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 238
    LBRACE          shift and go to state 121
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    initializer                    shift and go to state 560
    assignment_expression          shift and go to state 255
    brace_open                     shift and go to state 256
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 533

    (11) designation_opt -> empty .

    LPAREN          reduce using rule 11 (designation_opt -> empty .)
    LBRACE          reduce using rule 11 (designation_opt -> empty .)
    PLUSPLUS        reduce using rule 11 (designation_opt -> empty .)
    MINUSMINUS      reduce using rule 11 (designation_opt -> empty .)
    SIZEOF          reduce using rule 11 (designation_opt -> empty .)
    _ALIGNOF        reduce using rule 11 (designation_opt -> empty .)
    AND             reduce using rule 11 (designation_opt -> empty .)
    TIMES           reduce using rule 11 (designation_opt -> empty .)
    PLUS            reduce using rule 11 (designation_opt -> empty .)
    MINUS           reduce using rule 11 (designation_opt -> empty .)
    NOT             reduce using rule 11 (designation_opt -> empty .)
    LNOT            reduce using rule 11 (designation_opt -> empty .)
    OFFSETOF        reduce using rule 11 (designation_opt -> empty .)
    ID              reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_DEC   reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_OCT   reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_HEX   reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_BIN   reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_CHAR  reduce using rule 11 (designation_opt -> empty .)
    FLOAT_CONST     reduce using rule 11 (designation_opt -> empty .)
    HEX_FLOAT_CONST reduce using rule 11 (designation_opt -> empty .)
    CHAR_CONST      reduce using rule 11 (designation_opt -> empty .)
    WCHAR_CONST     reduce using rule 11 (designation_opt -> empty .)
    U8CHAR_CONST    reduce using rule 11 (designation_opt -> empty .)
    U16CHAR_CONST   reduce using rule 11 (designation_opt -> empty .)
    U32CHAR_CONST   reduce using rule 11 (designation_opt -> empty .)
    STRING_LITERAL  reduce using rule 11 (designation_opt -> empty .)
    WSTRING_LITERAL reduce using rule 11 (designation_opt -> empty .)
    U8STRING_LITERAL reduce using rule 11 (designation_opt -> empty .)
    U16STRING_LITERAL reduce using rule 11 (designation_opt -> empty .)
    U32STRING_LITERAL reduce using rule 11 (designation_opt -> empty .)


state 534

    (204) designator -> LBRACKET constant_expression RBRACKET .

    EQUALS          reduce using rule 204 (designator -> LBRACKET constant_expression RBRACKET .)
    LBRACKET        reduce using rule 204 (designator -> LBRACKET constant_expression RBRACKET .)
    PERIOD          reduce using rule 204 (designator -> LBRACKET constant_expression RBRACKET .)


state 535

    (40) direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .

    LBRACKET        reduce using rule 40 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    LPAREN          reduce using rule 40 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    EQUALS          reduce using rule 40 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    COMMA           reduce using rule 40 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    SEMI            reduce using rule 40 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    RPAREN          reduce using rule 40 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    COLON           reduce using rule 40 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)


state 536

    (41) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .

    LBRACKET        reduce using rule 41 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LPAREN          reduce using rule 41 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    EQUALS          reduce using rule 41 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 41 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    SEMI            reduce using rule 41 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 41 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COLON           reduce using rule 41 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)


state 537

    (302) postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list . brace_close
    (303) postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list . COMMA brace_close
    (200) initializer_list -> initializer_list . COMMA designation_opt initializer
    (339) brace_close -> . RBRACE

    COMMA           shift and go to state 562
    RBRACE          shift and go to state 208

    brace_close                    shift and go to state 561

state 538

    (257) conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .

    COMMA           reduce using rule 257 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    RPAREN          reduce using rule 257 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    SEMI            reduce using rule 257 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    RBRACKET        reduce using rule 257 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    COLON           reduce using rule 257 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    RBRACE          reduce using rule 257 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)


state 539

    (314) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 314 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 314 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 540

    (309) primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator . RPAREN
    (311) offsetof_member_designator -> offsetof_member_designator . PERIOD identifier
    (312) offsetof_member_designator -> offsetof_member_designator . LBRACKET expression RBRACKET

    RPAREN          shift and go to state 563
    PERIOD          shift and go to state 564
    LBRACKET        shift and go to state 565


state 541

    (310) offsetof_member_designator -> identifier .

    RPAREN          reduce using rule 310 (offsetof_member_designator -> identifier .)
    PERIOD          reduce using rule 310 (offsetof_member_designator -> identifier .)
    LBRACKET        reduce using rule 310 (offsetof_member_designator -> identifier .)


state 542

    (46) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt . RBRACKET

    RBRACKET        shift and go to state 566


state 543

    (49) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES . RBRACKET
    (287) unary_operator -> TIMES .

    RBRACKET        shift and go to state 567
    LPAREN          reduce using rule 287 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 287 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 287 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 287 (unary_operator -> TIMES .)
    _ALIGNOF        reduce using rule 287 (unary_operator -> TIMES .)
    AND             reduce using rule 287 (unary_operator -> TIMES .)
    TIMES           reduce using rule 287 (unary_operator -> TIMES .)
    PLUS            reduce using rule 287 (unary_operator -> TIMES .)
    MINUS           reduce using rule 287 (unary_operator -> TIMES .)
    NOT             reduce using rule 287 (unary_operator -> TIMES .)
    LNOT            reduce using rule 287 (unary_operator -> TIMES .)
    OFFSETOF        reduce using rule 287 (unary_operator -> TIMES .)
    ID              reduce using rule 287 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 287 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 287 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 287 (unary_operator -> TIMES .)
    INT_CONST_BIN   reduce using rule 287 (unary_operator -> TIMES .)
    INT_CONST_CHAR  reduce using rule 287 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 287 (unary_operator -> TIMES .)
    HEX_FLOAT_CONST reduce using rule 287 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 287 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 287 (unary_operator -> TIMES .)
    U8CHAR_CONST    reduce using rule 287 (unary_operator -> TIMES .)
    U16CHAR_CONST   reduce using rule 287 (unary_operator -> TIMES .)
    U32CHAR_CONST   reduce using rule 287 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 287 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 287 (unary_operator -> TIMES .)
    U8STRING_LITERAL reduce using rule 287 (unary_operator -> TIMES .)
    U16STRING_LITERAL reduce using rule 287 (unary_operator -> TIMES .)
    U32STRING_LITERAL reduce using rule 287 (unary_operator -> TIMES .)


state 544

    (47) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt . assignment_expression RBRACKET
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    assignment_expression          shift and go to state 568
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 545

    (48) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC . assignment_expression RBRACKET
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    assignment_expression          shift and go to state 569
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 546

    (50) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 50 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 50 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 50 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 50 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN parameter_type_list RPAREN .)


state 547

    (51) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN identifier_list_opt RPAREN .

    LBRACKET        reduce using rule 51 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN identifier_list_opt RPAREN .)
    LPAREN          reduce using rule 51 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN identifier_list_opt RPAREN .)
    COMMA           reduce using rule 51 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN identifier_list_opt RPAREN .)
    RPAREN          reduce using rule 51 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN identifier_list_opt RPAREN .)


state 548

    (212) direct_abstract_declarator -> LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .

    LBRACKET        reduce using rule 212 (direct_abstract_declarator -> LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    LPAREN          reduce using rule 212 (direct_abstract_declarator -> LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    COMMA           reduce using rule 212 (direct_abstract_declarator -> LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    RPAREN          reduce using rule 212 (direct_abstract_declarator -> LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)


state 549

    (211) direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .

    LBRACKET        reduce using rule 211 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .)
    LPAREN          reduce using rule 211 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .)
    COMMA           reduce using rule 211 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .)
    RPAREN          reduce using rule 211 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .)


state 550

    (213) direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .

    LBRACKET        reduce using rule 213 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    LPAREN          reduce using rule 213 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    COMMA           reduce using rule 213 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    RPAREN          reduce using rule 213 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)


state 551

    (215) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .

    LBRACKET        reduce using rule 215 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)
    LPAREN          reduce using rule 215 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)
    COMMA           reduce using rule 215 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)
    RPAREN          reduce using rule 215 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)


state 552

    (225) selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .

    ID              reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    CASE            reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    DEFAULT         reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    IF              reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    SWITCH          reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    WHILE           reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    DO              reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    FOR             reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    GOTO            reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    BREAK           reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    CONTINUE        reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    RETURN          reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    _PRAGMA         reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    _STATIC_ASSERT  reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    LBRACE          reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    CONST           reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    RESTRICT        reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    VOLATILE        reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    _ATOMIC         reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    AUTO            reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    REGISTER        reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    STATIC          reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    EXTERN          reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    _THREAD_LOCAL   reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    INLINE          reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    _NORETURN       reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    _ALIGNAS        reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    TYPEID          reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    ENUM            reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    VOID            reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    _BOOL           reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    CHAR            reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    SHORT           reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    INT             reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    LONG            reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    FLOAT           reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    DOUBLE          reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    _COMPLEX        reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    SIGNED          reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    __INT128        reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    LPAREN          reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    STRUCT          reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    UNION           reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    SIZEOF          reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    _ALIGNOF        reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    AND             reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    TIMES           reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    PLUS            reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    MINUS           reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    NOT             reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    LNOT            reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_CHAR  reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    U8CHAR_CONST    reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    U16CHAR_CONST   reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    U32CHAR_CONST   reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    U8STRING_LITERAL reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    U16STRING_LITERAL reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    U32STRING_LITERAL reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    SEMI            reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    RBRACE          reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    ELSE            reduce using rule 225 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)


state 553

    (226) selection_statement -> IF LPAREN expression RPAREN statement . ELSE pragmacomp_or_statement
    (87) pragmacomp_or_statement -> statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 570
    ID              reduce using rule 87 (pragmacomp_or_statement -> statement .)
    CASE            reduce using rule 87 (pragmacomp_or_statement -> statement .)
    DEFAULT         reduce using rule 87 (pragmacomp_or_statement -> statement .)
    IF              reduce using rule 87 (pragmacomp_or_statement -> statement .)
    SWITCH          reduce using rule 87 (pragmacomp_or_statement -> statement .)
    WHILE           reduce using rule 87 (pragmacomp_or_statement -> statement .)
    DO              reduce using rule 87 (pragmacomp_or_statement -> statement .)
    FOR             reduce using rule 87 (pragmacomp_or_statement -> statement .)
    GOTO            reduce using rule 87 (pragmacomp_or_statement -> statement .)
    BREAK           reduce using rule 87 (pragmacomp_or_statement -> statement .)
    CONTINUE        reduce using rule 87 (pragmacomp_or_statement -> statement .)
    RETURN          reduce using rule 87 (pragmacomp_or_statement -> statement .)
    PPPRAGMA        reduce using rule 87 (pragmacomp_or_statement -> statement .)
    _PRAGMA         reduce using rule 87 (pragmacomp_or_statement -> statement .)
    _STATIC_ASSERT  reduce using rule 87 (pragmacomp_or_statement -> statement .)
    LBRACE          reduce using rule 87 (pragmacomp_or_statement -> statement .)
    CONST           reduce using rule 87 (pragmacomp_or_statement -> statement .)
    RESTRICT        reduce using rule 87 (pragmacomp_or_statement -> statement .)
    VOLATILE        reduce using rule 87 (pragmacomp_or_statement -> statement .)
    _ATOMIC         reduce using rule 87 (pragmacomp_or_statement -> statement .)
    AUTO            reduce using rule 87 (pragmacomp_or_statement -> statement .)
    REGISTER        reduce using rule 87 (pragmacomp_or_statement -> statement .)
    STATIC          reduce using rule 87 (pragmacomp_or_statement -> statement .)
    EXTERN          reduce using rule 87 (pragmacomp_or_statement -> statement .)
    TYPEDEF         reduce using rule 87 (pragmacomp_or_statement -> statement .)
    _THREAD_LOCAL   reduce using rule 87 (pragmacomp_or_statement -> statement .)
    INLINE          reduce using rule 87 (pragmacomp_or_statement -> statement .)
    _NORETURN       reduce using rule 87 (pragmacomp_or_statement -> statement .)
    _ALIGNAS        reduce using rule 87 (pragmacomp_or_statement -> statement .)
    TYPEID          reduce using rule 87 (pragmacomp_or_statement -> statement .)
    ENUM            reduce using rule 87 (pragmacomp_or_statement -> statement .)
    VOID            reduce using rule 87 (pragmacomp_or_statement -> statement .)
    _BOOL           reduce using rule 87 (pragmacomp_or_statement -> statement .)
    CHAR            reduce using rule 87 (pragmacomp_or_statement -> statement .)
    SHORT           reduce using rule 87 (pragmacomp_or_statement -> statement .)
    INT             reduce using rule 87 (pragmacomp_or_statement -> statement .)
    LONG            reduce using rule 87 (pragmacomp_or_statement -> statement .)
    FLOAT           reduce using rule 87 (pragmacomp_or_statement -> statement .)
    DOUBLE          reduce using rule 87 (pragmacomp_or_statement -> statement .)
    _COMPLEX        reduce using rule 87 (pragmacomp_or_statement -> statement .)
    SIGNED          reduce using rule 87 (pragmacomp_or_statement -> statement .)
    UNSIGNED        reduce using rule 87 (pragmacomp_or_statement -> statement .)
    __INT128        reduce using rule 87 (pragmacomp_or_statement -> statement .)
    LPAREN          reduce using rule 87 (pragmacomp_or_statement -> statement .)
    STRUCT          reduce using rule 87 (pragmacomp_or_statement -> statement .)
    UNION           reduce using rule 87 (pragmacomp_or_statement -> statement .)
    PLUSPLUS        reduce using rule 87 (pragmacomp_or_statement -> statement .)
    MINUSMINUS      reduce using rule 87 (pragmacomp_or_statement -> statement .)
    SIZEOF          reduce using rule 87 (pragmacomp_or_statement -> statement .)
    _ALIGNOF        reduce using rule 87 (pragmacomp_or_statement -> statement .)
    AND             reduce using rule 87 (pragmacomp_or_statement -> statement .)
    TIMES           reduce using rule 87 (pragmacomp_or_statement -> statement .)
    PLUS            reduce using rule 87 (pragmacomp_or_statement -> statement .)
    MINUS           reduce using rule 87 (pragmacomp_or_statement -> statement .)
    NOT             reduce using rule 87 (pragmacomp_or_statement -> statement .)
    LNOT            reduce using rule 87 (pragmacomp_or_statement -> statement .)
    OFFSETOF        reduce using rule 87 (pragmacomp_or_statement -> statement .)
    INT_CONST_DEC   reduce using rule 87 (pragmacomp_or_statement -> statement .)
    INT_CONST_OCT   reduce using rule 87 (pragmacomp_or_statement -> statement .)
    INT_CONST_HEX   reduce using rule 87 (pragmacomp_or_statement -> statement .)
    INT_CONST_BIN   reduce using rule 87 (pragmacomp_or_statement -> statement .)
    INT_CONST_CHAR  reduce using rule 87 (pragmacomp_or_statement -> statement .)
    FLOAT_CONST     reduce using rule 87 (pragmacomp_or_statement -> statement .)
    HEX_FLOAT_CONST reduce using rule 87 (pragmacomp_or_statement -> statement .)
    CHAR_CONST      reduce using rule 87 (pragmacomp_or_statement -> statement .)
    WCHAR_CONST     reduce using rule 87 (pragmacomp_or_statement -> statement .)
    U8CHAR_CONST    reduce using rule 87 (pragmacomp_or_statement -> statement .)
    U16CHAR_CONST   reduce using rule 87 (pragmacomp_or_statement -> statement .)
    U32CHAR_CONST   reduce using rule 87 (pragmacomp_or_statement -> statement .)
    STRING_LITERAL  reduce using rule 87 (pragmacomp_or_statement -> statement .)
    WSTRING_LITERAL reduce using rule 87 (pragmacomp_or_statement -> statement .)
    U8STRING_LITERAL reduce using rule 87 (pragmacomp_or_statement -> statement .)
    U16STRING_LITERAL reduce using rule 87 (pragmacomp_or_statement -> statement .)
    U32STRING_LITERAL reduce using rule 87 (pragmacomp_or_statement -> statement .)
    SEMI            reduce using rule 87 (pragmacomp_or_statement -> statement .)
    RBRACE          reduce using rule 87 (pragmacomp_or_statement -> statement .)

  ! ELSE            [ reduce using rule 87 (pragmacomp_or_statement -> statement .) ]


state 554

    (84) statement -> pppragma_directive .
    (74) pppragma_directive_list -> pppragma_directive .

  ! reduce/reduce conflict for PPPRAGMA resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for _PRAGMA resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for ID resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for CASE resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for IF resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for SWITCH resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for WHILE resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for DO resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for FOR resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for GOTO resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for BREAK resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for RETURN resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for _STATIC_ASSERT resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for LBRACE resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for LPAREN resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for SIZEOF resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for _ALIGNOF resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for AND resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for TIMES resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for PLUS resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for MINUS resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for NOT resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for LNOT resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for OFFSETOF resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for INT_CONST_DEC resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for INT_CONST_OCT resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for INT_CONST_HEX resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for INT_CONST_BIN resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for INT_CONST_CHAR resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for FLOAT_CONST resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for HEX_FLOAT_CONST resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for CHAR_CONST resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for WCHAR_CONST resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for U8CHAR_CONST resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for U16CHAR_CONST resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for U32CHAR_CONST resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for STRING_LITERAL resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for WSTRING_LITERAL resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for U8STRING_LITERAL resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for U16STRING_LITERAL resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for U32STRING_LITERAL resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
  ! reduce/reduce conflict for SEMI resolved using rule 74 (pppragma_directive_list -> pppragma_directive .)
    CONST           reduce using rule 84 (statement -> pppragma_directive .)
    RESTRICT        reduce using rule 84 (statement -> pppragma_directive .)
    VOLATILE        reduce using rule 84 (statement -> pppragma_directive .)
    _ATOMIC         reduce using rule 84 (statement -> pppragma_directive .)
    AUTO            reduce using rule 84 (statement -> pppragma_directive .)
    REGISTER        reduce using rule 84 (statement -> pppragma_directive .)
    STATIC          reduce using rule 84 (statement -> pppragma_directive .)
    EXTERN          reduce using rule 84 (statement -> pppragma_directive .)
    TYPEDEF         reduce using rule 84 (statement -> pppragma_directive .)
    _THREAD_LOCAL   reduce using rule 84 (statement -> pppragma_directive .)
    INLINE          reduce using rule 84 (statement -> pppragma_directive .)
    _NORETURN       reduce using rule 84 (statement -> pppragma_directive .)
    _ALIGNAS        reduce using rule 84 (statement -> pppragma_directive .)
    TYPEID          reduce using rule 84 (statement -> pppragma_directive .)
    ENUM            reduce using rule 84 (statement -> pppragma_directive .)
    VOID            reduce using rule 84 (statement -> pppragma_directive .)
    _BOOL           reduce using rule 84 (statement -> pppragma_directive .)
    CHAR            reduce using rule 84 (statement -> pppragma_directive .)
    SHORT           reduce using rule 84 (statement -> pppragma_directive .)
    INT             reduce using rule 84 (statement -> pppragma_directive .)
    LONG            reduce using rule 84 (statement -> pppragma_directive .)
    FLOAT           reduce using rule 84 (statement -> pppragma_directive .)
    DOUBLE          reduce using rule 84 (statement -> pppragma_directive .)
    _COMPLEX        reduce using rule 84 (statement -> pppragma_directive .)
    SIGNED          reduce using rule 84 (statement -> pppragma_directive .)
    UNSIGNED        reduce using rule 84 (statement -> pppragma_directive .)
    __INT128        reduce using rule 84 (statement -> pppragma_directive .)
    STRUCT          reduce using rule 84 (statement -> pppragma_directive .)
    UNION           reduce using rule 84 (statement -> pppragma_directive .)
    RBRACE          reduce using rule 84 (statement -> pppragma_directive .)
    ELSE            reduce using rule 84 (statement -> pppragma_directive .)
    PPPRAGMA        reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    _PRAGMA         reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    ID              reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    CASE            reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    DEFAULT         reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    IF              reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    SWITCH          reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    WHILE           reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    DO              reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    FOR             reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    GOTO            reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    BREAK           reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    CONTINUE        reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    RETURN          reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    _STATIC_ASSERT  reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    LBRACE          reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    LPAREN          reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    PLUSPLUS        reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    MINUSMINUS      reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    SIZEOF          reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    _ALIGNOF        reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    AND             reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    TIMES           reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    PLUS            reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    MINUS           reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    NOT             reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    LNOT            reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    OFFSETOF        reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    INT_CONST_DEC   reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    INT_CONST_OCT   reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    INT_CONST_HEX   reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    INT_CONST_BIN   reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    INT_CONST_CHAR  reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    FLOAT_CONST     reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    HEX_FLOAT_CONST reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    CHAR_CONST      reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    WCHAR_CONST     reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    U8CHAR_CONST    reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    U16CHAR_CONST   reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    U32CHAR_CONST   reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    STRING_LITERAL  reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    WSTRING_LITERAL reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    U8STRING_LITERAL reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    U16STRING_LITERAL reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    U32STRING_LITERAL reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)
    SEMI            reduce using rule 74 (pppragma_directive_list -> pppragma_directive .)

  ! ID              [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! CASE            [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! DEFAULT         [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! IF              [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! SWITCH          [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! WHILE           [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! DO              [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! FOR             [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! GOTO            [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! BREAK           [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! CONTINUE        [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! RETURN          [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! PPPRAGMA        [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! _PRAGMA         [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! _STATIC_ASSERT  [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! LBRACE          [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! LPAREN          [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! PLUSPLUS        [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! MINUSMINUS      [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! SIZEOF          [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! _ALIGNOF        [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! AND             [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! TIMES           [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! PLUS            [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! MINUS           [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! NOT             [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! LNOT            [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! OFFSETOF        [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! INT_CONST_DEC   [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! INT_CONST_OCT   [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! INT_CONST_HEX   [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! INT_CONST_BIN   [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! INT_CONST_CHAR  [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! FLOAT_CONST     [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! HEX_FLOAT_CONST [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! CHAR_CONST      [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! WCHAR_CONST     [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! U8CHAR_CONST    [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! U16CHAR_CONST   [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! U32CHAR_CONST   [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! STRING_LITERAL  [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! WSTRING_LITERAL [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! U8STRING_LITERAL [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! U16STRING_LITERAL [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! U32STRING_LITERAL [ reduce using rule 84 (statement -> pppragma_directive .) ]
  ! SEMI            [ reduce using rule 84 (statement -> pppragma_directive .) ]


state 555

    (227) selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .

    ID              reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    CASE            reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    DEFAULT         reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    IF              reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    SWITCH          reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    WHILE           reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    DO              reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    FOR             reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    GOTO            reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    BREAK           reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    CONTINUE        reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    RETURN          reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    _PRAGMA         reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    _STATIC_ASSERT  reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    LBRACE          reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    CONST           reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    RESTRICT        reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    VOLATILE        reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    _ATOMIC         reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    AUTO            reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    REGISTER        reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    STATIC          reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    EXTERN          reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    _THREAD_LOCAL   reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    INLINE          reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    _NORETURN       reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    _ALIGNAS        reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    TYPEID          reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    ENUM            reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    VOID            reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    _BOOL           reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    CHAR            reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    SHORT           reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    INT             reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    LONG            reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    FLOAT           reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    DOUBLE          reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    _COMPLEX        reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    SIGNED          reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    __INT128        reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    LPAREN          reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    STRUCT          reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    UNION           reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    SIZEOF          reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    _ALIGNOF        reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    AND             reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    TIMES           reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    PLUS            reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    MINUS           reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    NOT             reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    LNOT            reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_CHAR  reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    U8CHAR_CONST    reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    U16CHAR_CONST   reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    U32CHAR_CONST   reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    U8STRING_LITERAL reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    U16STRING_LITERAL reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    U32STRING_LITERAL reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    SEMI            reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    RBRACE          reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    ELSE            reduce using rule 227 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)


state 556

    (228) iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .

    ID              reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    CASE            reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    DEFAULT         reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    IF              reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    SWITCH          reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    WHILE           reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    DO              reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    FOR             reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    GOTO            reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    BREAK           reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    CONTINUE        reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    RETURN          reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    _PRAGMA         reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    _STATIC_ASSERT  reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    LBRACE          reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    CONST           reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    RESTRICT        reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    VOLATILE        reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    _ATOMIC         reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    AUTO            reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    REGISTER        reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    STATIC          reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    EXTERN          reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    _THREAD_LOCAL   reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    INLINE          reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    _NORETURN       reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    _ALIGNAS        reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    TYPEID          reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    ENUM            reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    VOID            reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    _BOOL           reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    CHAR            reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    SHORT           reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    INT             reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    LONG            reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    FLOAT           reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    DOUBLE          reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    _COMPLEX        reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    SIGNED          reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    __INT128        reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    LPAREN          reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    STRUCT          reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    UNION           reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    SIZEOF          reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    _ALIGNOF        reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    AND             reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    TIMES           reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    PLUS            reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    MINUS           reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    NOT             reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    LNOT            reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_CHAR  reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    U8CHAR_CONST    reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    U16CHAR_CONST   reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    U32CHAR_CONST   reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    U8STRING_LITERAL reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    U16STRING_LITERAL reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    U32STRING_LITERAL reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    SEMI            reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    RBRACE          reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    ELSE            reduce using rule 228 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)


state 557

    (229) iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression . RPAREN SEMI
    (239) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 571
    COMMA           shift and go to state 365


state 558

    (230) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt . SEMI expression_opt RPAREN pragmacomp_or_statement

    SEMI            shift and go to state 572


state 559

    (231) iteration_statement -> FOR LPAREN declaration expression_opt SEMI . expression_opt RPAREN pragmacomp_or_statement
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (340) empty -> .
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    RPAREN          reduce using rule 340 (empty -> .)
    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    expression_opt                 shift and go to state 573
    empty                          shift and go to state 357
    expression                     shift and go to state 239
    assignment_expression          shift and go to state 248
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 560

    (200) initializer_list -> initializer_list COMMA designation_opt initializer .

    COMMA           reduce using rule 200 (initializer_list -> initializer_list COMMA designation_opt initializer .)
    RBRACE          reduce using rule 200 (initializer_list -> initializer_list COMMA designation_opt initializer .)


state 561

    (302) postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .

    LBRACKET        reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LPAREN          reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    PERIOD          reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    ARROW           reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    PLUSPLUS        reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    MINUSMINUS      reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    CONDOP          reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    TIMES           reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    DIVIDE          reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    MOD             reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    PLUS            reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    MINUS           reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    RSHIFT          reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LSHIFT          reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LT              reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LE              reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    GE              reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    GT              reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    EQ              reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    NE              reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    AND             reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    OR              reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    XOR             reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LAND            reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LOR             reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    COMMA           reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    RPAREN          reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    EQUALS          reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    XOREQUAL        reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    TIMESEQUAL      reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    DIVEQUAL        reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    MODEQUAL        reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    PLUSEQUAL       reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    MINUSEQUAL      reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LSHIFTEQUAL     reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    RSHIFTEQUAL     reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    ANDEQUAL        reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    OREQUAL         reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    SEMI            reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    RBRACKET        reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    COLON           reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    RBRACE          reduce using rule 302 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)


state 562

    (303) postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA . brace_close
    (200) initializer_list -> initializer_list COMMA . designation_opt initializer
    (339) brace_close -> . RBRACE
    (11) designation_opt -> . empty
    (12) designation_opt -> . designation
    (340) empty -> .
    (201) designation -> . designator_list EQUALS
    (202) designator_list -> . designator
    (203) designator_list -> . designator_list designator
    (204) designator -> . LBRACKET constant_expression RBRACKET
    (205) designator -> . PERIOD identifier

    RBRACE          shift and go to state 208
    LPAREN          reduce using rule 340 (empty -> .)
    LBRACE          reduce using rule 340 (empty -> .)
    PLUSPLUS        reduce using rule 340 (empty -> .)
    MINUSMINUS      reduce using rule 340 (empty -> .)
    SIZEOF          reduce using rule 340 (empty -> .)
    _ALIGNOF        reduce using rule 340 (empty -> .)
    AND             reduce using rule 340 (empty -> .)
    TIMES           reduce using rule 340 (empty -> .)
    PLUS            reduce using rule 340 (empty -> .)
    MINUS           reduce using rule 340 (empty -> .)
    NOT             reduce using rule 340 (empty -> .)
    LNOT            reduce using rule 340 (empty -> .)
    OFFSETOF        reduce using rule 340 (empty -> .)
    ID              reduce using rule 340 (empty -> .)
    INT_CONST_DEC   reduce using rule 340 (empty -> .)
    INT_CONST_OCT   reduce using rule 340 (empty -> .)
    INT_CONST_HEX   reduce using rule 340 (empty -> .)
    INT_CONST_BIN   reduce using rule 340 (empty -> .)
    INT_CONST_CHAR  reduce using rule 340 (empty -> .)
    FLOAT_CONST     reduce using rule 340 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 340 (empty -> .)
    CHAR_CONST      reduce using rule 340 (empty -> .)
    WCHAR_CONST     reduce using rule 340 (empty -> .)
    U8CHAR_CONST    reduce using rule 340 (empty -> .)
    U16CHAR_CONST   reduce using rule 340 (empty -> .)
    U32CHAR_CONST   reduce using rule 340 (empty -> .)
    STRING_LITERAL  reduce using rule 340 (empty -> .)
    WSTRING_LITERAL reduce using rule 340 (empty -> .)
    U8STRING_LITERAL reduce using rule 340 (empty -> .)
    U16STRING_LITERAL reduce using rule 340 (empty -> .)
    U32STRING_LITERAL reduce using rule 340 (empty -> .)
    LBRACKET        shift and go to state 397
    PERIOD          shift and go to state 398

    brace_close                    shift and go to state 574
    designation_opt                shift and go to state 532
    empty                          shift and go to state 533
    designation                    shift and go to state 394
    designator_list                shift and go to state 395
    designator                     shift and go to state 396

state 563

    (309) primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .

    LBRACKET        reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    LPAREN          reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    PERIOD          reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    ARROW           reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    PLUSPLUS        reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    MINUSMINUS      reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    CONDOP          reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    TIMES           reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    DIVIDE          reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    MOD             reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    PLUS            reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    MINUS           reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    RSHIFT          reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    LSHIFT          reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    LT              reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    LE              reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    GE              reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    GT              reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    EQ              reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    NE              reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    AND             reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    OR              reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    XOR             reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    LAND            reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    LOR             reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    COMMA           reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    RPAREN          reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    EQUALS          reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    XOREQUAL        reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    TIMESEQUAL      reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    DIVEQUAL        reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    MODEQUAL        reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    PLUSEQUAL       reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    MINUSEQUAL      reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    LSHIFTEQUAL     reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    RSHIFTEQUAL     reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    ANDEQUAL        reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    OREQUAL         reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    SEMI            reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    RBRACKET        reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    COLON           reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    RBRACE          reduce using rule 309 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)


state 564

    (311) offsetof_member_designator -> offsetof_member_designator PERIOD . identifier
    (315) identifier -> . ID

    ID              shift and go to state 159

    identifier                     shift and go to state 575

state 565

    (312) offsetof_member_designator -> offsetof_member_designator LBRACKET . expression RBRACKET
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    expression                     shift and go to state 576
    assignment_expression          shift and go to state 248
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 566

    (46) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .

    LBRACKET        reduce using rule 46 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    LPAREN          reduce using rule 46 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    COMMA           reduce using rule 46 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    RPAREN          reduce using rule 46 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)


state 567

    (49) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .

    LBRACKET        reduce using rule 49 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    LPAREN          reduce using rule 49 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    COMMA           reduce using rule 49 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    RPAREN          reduce using rule 49 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)


state 568

    (47) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression . RBRACKET

    RBRACKET        shift and go to state 577


state 569

    (48) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 578


state 570

    (226) selection_statement -> IF LPAREN expression RPAREN statement ELSE . pragmacomp_or_statement
    (86) pragmacomp_or_statement -> . pppragma_directive_list statement
    (87) pragmacomp_or_statement -> . statement
    (74) pppragma_directive_list -> . pppragma_directive
    (75) pppragma_directive_list -> . pppragma_directive_list pppragma_directive
    (78) statement -> . labeled_statement
    (79) statement -> . expression_statement
    (80) statement -> . compound_statement
    (81) statement -> . selection_statement
    (82) statement -> . iteration_statement
    (83) statement -> . jump_statement
    (84) statement -> . pppragma_directive
    (85) statement -> . static_assert
    (71) pppragma_directive -> . PPPRAGMA
    (72) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (73) pppragma_directive -> . _PRAGMA LPAREN unified_string_literal RPAREN
    (222) labeled_statement -> . ID COLON pragmacomp_or_statement
    (223) labeled_statement -> . CASE constant_expression COLON pragmacomp_or_statement
    (224) labeled_statement -> . DEFAULT COLON pragmacomp_or_statement
    (237) expression_statement -> . expression_opt SEMI
    (221) compound_statement -> . brace_open block_item_list_opt brace_close
    (225) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (226) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (227) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (228) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (229) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (230) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (231) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (232) jump_statement -> . GOTO ID SEMI
    (233) jump_statement -> . BREAK SEMI
    (234) jump_statement -> . CONTINUE SEMI
    (235) jump_statement -> . RETURN expression SEMI
    (236) jump_statement -> . RETURN SEMI
    (68) static_assert -> . _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN
    (69) static_assert -> . _STATIC_ASSERT LPAREN constant_expression RPAREN
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (338) brace_open -> . LBRACE
    (340) empty -> .
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    PPPRAGMA        shift and go to state 15
    _PRAGMA         shift and go to state 16
    ID              shift and go to state 233
    CASE            shift and go to state 234
    DEFAULT         shift and go to state 235
    IF              shift and go to state 237
    SWITCH          shift and go to state 240
    WHILE           shift and go to state 241
    DO              shift and go to state 242
    FOR             shift and go to state 243
    GOTO            shift and go to state 244
    BREAK           shift and go to state 245
    CONTINUE        shift and go to state 246
    RETURN          shift and go to state 247
    _STATIC_ASSERT  shift and go to state 18
    LBRACE          shift and go to state 121
    SEMI            reduce using rule 340 (empty -> .)
    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    expression                     shift and go to state 239
    statement                      shift and go to state 370
    pragmacomp_or_statement        shift and go to state 579
    pppragma_directive_list        shift and go to state 369
    pppragma_directive             shift and go to state 371
    labeled_statement              shift and go to state 225
    expression_statement           shift and go to state 226
    compound_statement             shift and go to state 227
    selection_statement            shift and go to state 228
    iteration_statement            shift and go to state 229
    jump_statement                 shift and go to state 230
    static_assert                  shift and go to state 232
    unified_string_literal         shift and go to state 143
    expression_opt                 shift and go to state 236
    brace_open                     shift and go to state 128
    empty                          shift and go to state 357
    assignment_expression          shift and go to state 248
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_wstring_literal        shift and go to state 164

state 571

    (229) iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 580


state 572

    (230) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI . expression_opt RPAREN pragmacomp_or_statement
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (340) empty -> .
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    RPAREN          reduce using rule 340 (empty -> .)
    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    ID              shift and go to state 159
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    expression_opt                 shift and go to state 581
    empty                          shift and go to state 357
    expression                     shift and go to state 239
    assignment_expression          shift and go to state 248
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_string_literal         shift and go to state 143
    unified_wstring_literal        shift and go to state 164

state 573

    (231) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt . RPAREN pragmacomp_or_statement

    RPAREN          shift and go to state 582


state 574

    (303) postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .

    LBRACKET        reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LPAREN          reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    PERIOD          reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    ARROW           reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    PLUSPLUS        reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    MINUSMINUS      reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    CONDOP          reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    TIMES           reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    DIVIDE          reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    MOD             reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    PLUS            reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    MINUS           reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    RSHIFT          reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LSHIFT          reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LT              reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LE              reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    GE              reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    GT              reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    EQ              reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    NE              reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    AND             reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    OR              reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    XOR             reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LAND            reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LOR             reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    COMMA           reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    RPAREN          reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    EQUALS          reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    XOREQUAL        reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    TIMESEQUAL      reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    DIVEQUAL        reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    MODEQUAL        reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    PLUSEQUAL       reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    MINUSEQUAL      reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LSHIFTEQUAL     reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    RSHIFTEQUAL     reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    ANDEQUAL        reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    OREQUAL         reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    SEMI            reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    RBRACKET        reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    COLON           reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    RBRACE          reduce using rule 303 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)


state 575

    (311) offsetof_member_designator -> offsetof_member_designator PERIOD identifier .

    RPAREN          reduce using rule 311 (offsetof_member_designator -> offsetof_member_designator PERIOD identifier .)
    PERIOD          reduce using rule 311 (offsetof_member_designator -> offsetof_member_designator PERIOD identifier .)
    LBRACKET        reduce using rule 311 (offsetof_member_designator -> offsetof_member_designator PERIOD identifier .)


state 576

    (312) offsetof_member_designator -> offsetof_member_designator LBRACKET expression . RBRACKET
    (239) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 583
    COMMA           shift and go to state 365


state 577

    (47) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .

    LBRACKET        reduce using rule 47 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    LPAREN          reduce using rule 47 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    COMMA           reduce using rule 47 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    RPAREN          reduce using rule 47 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)


state 578

    (48) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .

    LBRACKET        reduce using rule 48 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LPAREN          reduce using rule 48 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 48 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 48 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)


state 579

    (226) selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .

    ID              reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    CASE            reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    DEFAULT         reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    IF              reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    SWITCH          reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    WHILE           reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    DO              reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    FOR             reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    GOTO            reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    BREAK           reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    CONTINUE        reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    RETURN          reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    _PRAGMA         reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    _STATIC_ASSERT  reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    LBRACE          reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    CONST           reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    RESTRICT        reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    VOLATILE        reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    _ATOMIC         reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    AUTO            reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    REGISTER        reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    STATIC          reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    EXTERN          reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    _THREAD_LOCAL   reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    INLINE          reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    _NORETURN       reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    _ALIGNAS        reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    TYPEID          reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    ENUM            reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    VOID            reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    _BOOL           reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    CHAR            reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    SHORT           reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    INT             reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    LONG            reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    FLOAT           reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    DOUBLE          reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    _COMPLEX        reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    SIGNED          reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    __INT128        reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    LPAREN          reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    STRUCT          reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    UNION           reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    SIZEOF          reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    _ALIGNOF        reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    AND             reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    TIMES           reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    PLUS            reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    MINUS           reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    NOT             reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    LNOT            reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    INT_CONST_CHAR  reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    U8CHAR_CONST    reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    U16CHAR_CONST   reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    U32CHAR_CONST   reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    U8STRING_LITERAL reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    U16STRING_LITERAL reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    U32STRING_LITERAL reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    SEMI            reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    RBRACE          reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    ELSE            reduce using rule 226 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)


state 580

    (229) iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .

    ID              reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    CASE            reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    DEFAULT         reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    SWITCH          reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    DO              reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    GOTO            reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    BREAK           reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    CONTINUE        reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    PPPRAGMA        reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    _PRAGMA         reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    _STATIC_ASSERT  reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    LBRACE          reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    CONST           reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    RESTRICT        reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    VOLATILE        reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    _ATOMIC         reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    AUTO            reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    REGISTER        reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    STATIC          reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    EXTERN          reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    TYPEDEF         reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    _THREAD_LOCAL   reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    INLINE          reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    _NORETURN       reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    _ALIGNAS        reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    TYPEID          reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    ENUM            reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    VOID            reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    _BOOL           reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    CHAR            reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    SHORT           reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    INT             reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    LONG            reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    FLOAT           reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    DOUBLE          reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    _COMPLEX        reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    SIGNED          reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    UNSIGNED        reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    __INT128        reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    LPAREN          reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    STRUCT          reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    UNION           reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    PLUSPLUS        reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    MINUSMINUS      reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    SIZEOF          reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    _ALIGNOF        reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    AND             reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    TIMES           reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    PLUS            reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    MINUS           reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    NOT             reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    LNOT            reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    OFFSETOF        reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    INT_CONST_DEC   reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    INT_CONST_OCT   reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    INT_CONST_HEX   reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    INT_CONST_BIN   reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    INT_CONST_CHAR  reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    HEX_FLOAT_CONST reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    CHAR_CONST      reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    WCHAR_CONST     reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    U8CHAR_CONST    reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    U16CHAR_CONST   reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    U32CHAR_CONST   reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    STRING_LITERAL  reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    WSTRING_LITERAL reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    U8STRING_LITERAL reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    U16STRING_LITERAL reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    U32STRING_LITERAL reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    SEMI            reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    RBRACE          reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    ELSE            reduce using rule 229 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)


state 581

    (230) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt . RPAREN pragmacomp_or_statement

    RPAREN          shift and go to state 584


state 582

    (231) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN . pragmacomp_or_statement
    (86) pragmacomp_or_statement -> . pppragma_directive_list statement
    (87) pragmacomp_or_statement -> . statement
    (74) pppragma_directive_list -> . pppragma_directive
    (75) pppragma_directive_list -> . pppragma_directive_list pppragma_directive
    (78) statement -> . labeled_statement
    (79) statement -> . expression_statement
    (80) statement -> . compound_statement
    (81) statement -> . selection_statement
    (82) statement -> . iteration_statement
    (83) statement -> . jump_statement
    (84) statement -> . pppragma_directive
    (85) statement -> . static_assert
    (71) pppragma_directive -> . PPPRAGMA
    (72) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (73) pppragma_directive -> . _PRAGMA LPAREN unified_string_literal RPAREN
    (222) labeled_statement -> . ID COLON pragmacomp_or_statement
    (223) labeled_statement -> . CASE constant_expression COLON pragmacomp_or_statement
    (224) labeled_statement -> . DEFAULT COLON pragmacomp_or_statement
    (237) expression_statement -> . expression_opt SEMI
    (221) compound_statement -> . brace_open block_item_list_opt brace_close
    (225) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (226) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (227) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (228) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (229) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (230) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (231) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (232) jump_statement -> . GOTO ID SEMI
    (233) jump_statement -> . BREAK SEMI
    (234) jump_statement -> . CONTINUE SEMI
    (235) jump_statement -> . RETURN expression SEMI
    (236) jump_statement -> . RETURN SEMI
    (68) static_assert -> . _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN
    (69) static_assert -> . _STATIC_ASSERT LPAREN constant_expression RPAREN
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (338) brace_open -> . LBRACE
    (340) empty -> .
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    PPPRAGMA        shift and go to state 15
    _PRAGMA         shift and go to state 16
    ID              shift and go to state 233
    CASE            shift and go to state 234
    DEFAULT         shift and go to state 235
    IF              shift and go to state 237
    SWITCH          shift and go to state 240
    WHILE           shift and go to state 241
    DO              shift and go to state 242
    FOR             shift and go to state 243
    GOTO            shift and go to state 244
    BREAK           shift and go to state 245
    CONTINUE        shift and go to state 246
    RETURN          shift and go to state 247
    _STATIC_ASSERT  shift and go to state 18
    LBRACE          shift and go to state 121
    SEMI            reduce using rule 340 (empty -> .)
    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    expression_opt                 shift and go to state 236
    pragmacomp_or_statement        shift and go to state 585
    pppragma_directive_list        shift and go to state 369
    statement                      shift and go to state 370
    pppragma_directive             shift and go to state 371
    labeled_statement              shift and go to state 225
    expression_statement           shift and go to state 226
    compound_statement             shift and go to state 227
    selection_statement            shift and go to state 228
    iteration_statement            shift and go to state 229
    jump_statement                 shift and go to state 230
    static_assert                  shift and go to state 232
    unified_string_literal         shift and go to state 143
    brace_open                     shift and go to state 128
    expression                     shift and go to state 239
    empty                          shift and go to state 357
    assignment_expression          shift and go to state 248
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_wstring_literal        shift and go to state 164

state 583

    (312) offsetof_member_designator -> offsetof_member_designator LBRACKET expression RBRACKET .

    RPAREN          reduce using rule 312 (offsetof_member_designator -> offsetof_member_designator LBRACKET expression RBRACKET .)
    PERIOD          reduce using rule 312 (offsetof_member_designator -> offsetof_member_designator LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 312 (offsetof_member_designator -> offsetof_member_designator LBRACKET expression RBRACKET .)


state 584

    (230) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN . pragmacomp_or_statement
    (86) pragmacomp_or_statement -> . pppragma_directive_list statement
    (87) pragmacomp_or_statement -> . statement
    (74) pppragma_directive_list -> . pppragma_directive
    (75) pppragma_directive_list -> . pppragma_directive_list pppragma_directive
    (78) statement -> . labeled_statement
    (79) statement -> . expression_statement
    (80) statement -> . compound_statement
    (81) statement -> . selection_statement
    (82) statement -> . iteration_statement
    (83) statement -> . jump_statement
    (84) statement -> . pppragma_directive
    (85) statement -> . static_assert
    (71) pppragma_directive -> . PPPRAGMA
    (72) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (73) pppragma_directive -> . _PRAGMA LPAREN unified_string_literal RPAREN
    (222) labeled_statement -> . ID COLON pragmacomp_or_statement
    (223) labeled_statement -> . CASE constant_expression COLON pragmacomp_or_statement
    (224) labeled_statement -> . DEFAULT COLON pragmacomp_or_statement
    (237) expression_statement -> . expression_opt SEMI
    (221) compound_statement -> . brace_open block_item_list_opt brace_close
    (225) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (226) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (227) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (228) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (229) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (230) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (231) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (232) jump_statement -> . GOTO ID SEMI
    (233) jump_statement -> . BREAK SEMI
    (234) jump_statement -> . CONTINUE SEMI
    (235) jump_statement -> . RETURN expression SEMI
    (236) jump_statement -> . RETURN SEMI
    (68) static_assert -> . _STATIC_ASSERT LPAREN constant_expression COMMA unified_string_literal RPAREN
    (69) static_assert -> . _STATIC_ASSERT LPAREN constant_expression RPAREN
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (338) brace_open -> . LBRACE
    (340) empty -> .
    (238) expression -> . assignment_expression
    (239) expression -> . expression COMMA assignment_expression
    (240) assignment_expression -> . LPAREN compound_statement RPAREN
    (242) assignment_expression -> . conditional_expression
    (243) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (256) conditional_expression -> . binary_expression
    (257) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (279) unary_expression -> . postfix_expression
    (280) unary_expression -> . PLUSPLUS unary_expression
    (281) unary_expression -> . MINUSMINUS unary_expression
    (282) unary_expression -> . unary_operator cast_expression
    (283) unary_expression -> . SIZEOF unary_expression
    (284) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (285) unary_expression -> . _ALIGNOF LPAREN type_name RPAREN
    (258) binary_expression -> . cast_expression
    (259) binary_expression -> . binary_expression TIMES binary_expression
    (260) binary_expression -> . binary_expression DIVIDE binary_expression
    (261) binary_expression -> . binary_expression MOD binary_expression
    (262) binary_expression -> . binary_expression PLUS binary_expression
    (263) binary_expression -> . binary_expression MINUS binary_expression
    (264) binary_expression -> . binary_expression RSHIFT binary_expression
    (265) binary_expression -> . binary_expression LSHIFT binary_expression
    (266) binary_expression -> . binary_expression LT binary_expression
    (267) binary_expression -> . binary_expression LE binary_expression
    (268) binary_expression -> . binary_expression GE binary_expression
    (269) binary_expression -> . binary_expression GT binary_expression
    (270) binary_expression -> . binary_expression EQ binary_expression
    (271) binary_expression -> . binary_expression NE binary_expression
    (272) binary_expression -> . binary_expression AND binary_expression
    (273) binary_expression -> . binary_expression OR binary_expression
    (274) binary_expression -> . binary_expression XOR binary_expression
    (275) binary_expression -> . binary_expression LAND binary_expression
    (276) binary_expression -> . binary_expression LOR binary_expression
    (292) postfix_expression -> . primary_expression
    (293) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (294) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (295) postfix_expression -> . postfix_expression LPAREN RPAREN
    (296) postfix_expression -> . postfix_expression PERIOD ID
    (297) postfix_expression -> . postfix_expression PERIOD TYPEID
    (298) postfix_expression -> . postfix_expression ARROW ID
    (299) postfix_expression -> . postfix_expression ARROW TYPEID
    (300) postfix_expression -> . postfix_expression PLUSPLUS
    (301) postfix_expression -> . postfix_expression MINUSMINUS
    (302) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (303) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (286) unary_operator -> . AND
    (287) unary_operator -> . TIMES
    (288) unary_operator -> . PLUS
    (289) unary_operator -> . MINUS
    (290) unary_operator -> . NOT
    (291) unary_operator -> . LNOT
    (277) cast_expression -> . unary_expression
    (278) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (304) primary_expression -> . identifier
    (305) primary_expression -> . constant
    (306) primary_expression -> . unified_string_literal
    (307) primary_expression -> . unified_wstring_literal
    (308) primary_expression -> . LPAREN expression RPAREN
    (309) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (315) identifier -> . ID
    (316) constant -> . INT_CONST_DEC
    (317) constant -> . INT_CONST_OCT
    (318) constant -> . INT_CONST_HEX
    (319) constant -> . INT_CONST_BIN
    (320) constant -> . INT_CONST_CHAR
    (321) constant -> . FLOAT_CONST
    (322) constant -> . HEX_FLOAT_CONST
    (323) constant -> . CHAR_CONST
    (324) constant -> . WCHAR_CONST
    (325) constant -> . U8CHAR_CONST
    (326) constant -> . U16CHAR_CONST
    (327) constant -> . U32CHAR_CONST
    (328) unified_string_literal -> . STRING_LITERAL
    (329) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (330) unified_wstring_literal -> . WSTRING_LITERAL
    (331) unified_wstring_literal -> . U8STRING_LITERAL
    (332) unified_wstring_literal -> . U16STRING_LITERAL
    (333) unified_wstring_literal -> . U32STRING_LITERAL
    (334) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL
    (335) unified_wstring_literal -> . unified_wstring_literal U8STRING_LITERAL
    (336) unified_wstring_literal -> . unified_wstring_literal U16STRING_LITERAL
    (337) unified_wstring_literal -> . unified_wstring_literal U32STRING_LITERAL

    PPPRAGMA        shift and go to state 15
    _PRAGMA         shift and go to state 16
    ID              shift and go to state 233
    CASE            shift and go to state 234
    DEFAULT         shift and go to state 235
    IF              shift and go to state 237
    SWITCH          shift and go to state 240
    WHILE           shift and go to state 241
    DO              shift and go to state 242
    FOR             shift and go to state 243
    GOTO            shift and go to state 244
    BREAK           shift and go to state 245
    CONTINUE        shift and go to state 246
    RETURN          shift and go to state 247
    _STATIC_ASSERT  shift and go to state 18
    LBRACE          shift and go to state 121
    SEMI            reduce using rule 340 (empty -> .)
    LPAREN          shift and go to state 238
    PLUSPLUS        shift and go to state 153
    MINUSMINUS      shift and go to state 154
    SIZEOF          shift and go to state 156
    _ALIGNOF        shift and go to state 157
    AND             shift and go to state 150
    TIMES           shift and go to state 147
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149
    NOT             shift and go to state 160
    LNOT            shift and go to state 161
    OFFSETOF        shift and go to state 165
    INT_CONST_DEC   shift and go to state 166
    INT_CONST_OCT   shift and go to state 167
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 169
    INT_CONST_CHAR  shift and go to state 170
    FLOAT_CONST     shift and go to state 171
    HEX_FLOAT_CONST shift and go to state 172
    CHAR_CONST      shift and go to state 173
    WCHAR_CONST     shift and go to state 174
    U8CHAR_CONST    shift and go to state 175
    U16CHAR_CONST   shift and go to state 176
    U32CHAR_CONST   shift and go to state 177
    STRING_LITERAL  shift and go to state 139
    WSTRING_LITERAL shift and go to state 178
    U8STRING_LITERAL shift and go to state 179
    U16STRING_LITERAL shift and go to state 180
    U32STRING_LITERAL shift and go to state 181

    expression_opt                 shift and go to state 236
    pragmacomp_or_statement        shift and go to state 586
    pppragma_directive_list        shift and go to state 369
    statement                      shift and go to state 370
    pppragma_directive             shift and go to state 371
    labeled_statement              shift and go to state 225
    expression_statement           shift and go to state 226
    compound_statement             shift and go to state 227
    selection_statement            shift and go to state 228
    iteration_statement            shift and go to state 229
    jump_statement                 shift and go to state 230
    static_assert                  shift and go to state 232
    unified_string_literal         shift and go to state 143
    brace_open                     shift and go to state 128
    expression                     shift and go to state 239
    empty                          shift and go to state 357
    assignment_expression          shift and go to state 248
    conditional_expression         shift and go to state 249
    unary_expression               shift and go to state 250
    binary_expression              shift and go to state 145
    postfix_expression             shift and go to state 152
    unary_operator                 shift and go to state 155
    cast_expression                shift and go to state 146
    primary_expression             shift and go to state 158
    identifier                     shift and go to state 162
    constant                       shift and go to state 163
    unified_wstring_literal        shift and go to state 164

state 585

    (231) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .

    ID              reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    CASE            reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    DEFAULT         reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    IF              reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    SWITCH          reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    WHILE           reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    DO              reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    FOR             reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    GOTO            reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    BREAK           reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    CONTINUE        reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    RETURN          reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    _PRAGMA         reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    _STATIC_ASSERT  reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    LBRACE          reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    CONST           reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    RESTRICT        reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    VOLATILE        reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    _ATOMIC         reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    AUTO            reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    REGISTER        reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    STATIC          reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    EXTERN          reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    _THREAD_LOCAL   reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    INLINE          reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    _NORETURN       reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    _ALIGNAS        reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    TYPEID          reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    ENUM            reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    VOID            reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    _BOOL           reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    CHAR            reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    SHORT           reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    INT             reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    LONG            reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    FLOAT           reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    DOUBLE          reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    _COMPLEX        reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    SIGNED          reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    __INT128        reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    LPAREN          reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    STRUCT          reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    UNION           reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    SIZEOF          reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    _ALIGNOF        reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    AND             reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    TIMES           reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    PLUS            reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    MINUS           reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    NOT             reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    LNOT            reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_CHAR  reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    U8CHAR_CONST    reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    U16CHAR_CONST   reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    U32CHAR_CONST   reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    U8STRING_LITERAL reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    U16STRING_LITERAL reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    U32STRING_LITERAL reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    SEMI            reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    RBRACE          reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    ELSE            reduce using rule 231 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)


state 586

    (230) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .

    ID              reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    CASE            reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    DEFAULT         reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    IF              reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    SWITCH          reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    WHILE           reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    DO              reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    FOR             reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    GOTO            reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    BREAK           reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    CONTINUE        reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    RETURN          reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    _PRAGMA         reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    _STATIC_ASSERT  reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    LBRACE          reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    CONST           reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    RESTRICT        reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    VOLATILE        reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    _ATOMIC         reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    AUTO            reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    REGISTER        reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    STATIC          reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    EXTERN          reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    _THREAD_LOCAL   reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    INLINE          reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    _NORETURN       reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    _ALIGNAS        reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    TYPEID          reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    ENUM            reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    VOID            reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    _BOOL           reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    CHAR            reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    SHORT           reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    INT             reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    LONG            reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    FLOAT           reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    DOUBLE          reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    _COMPLEX        reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    SIGNED          reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    __INT128        reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    LPAREN          reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    STRUCT          reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    UNION           reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    SIZEOF          reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    _ALIGNOF        reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    AND             reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    TIMES           reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    PLUS            reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    MINUS           reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    NOT             reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    LNOT            reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_CHAR  reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    U8CHAR_CONST    reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    U16CHAR_CONST   reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    U32CHAR_CONST   reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    U8STRING_LITERAL reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    U16STRING_LITERAL reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    U32STRING_LITERAL reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    SEMI            reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    RBRACE          reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    ELSE            reduce using rule 230 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for _ATOMIC in state 21 resolved as shift
WARNING: shift/reduce conflict for _ATOMIC in state 22 resolved as shift
WARNING: shift/reduce conflict for _ATOMIC in state 23 resolved as shift
WARNING: shift/reduce conflict for _ATOMIC in state 27 resolved as shift
WARNING: shift/reduce conflict for CONST in state 34 resolved as shift
WARNING: shift/reduce conflict for RESTRICT in state 34 resolved as shift
WARNING: shift/reduce conflict for VOLATILE in state 34 resolved as shift
WARNING: shift/reduce conflict for _ATOMIC in state 34 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 34 resolved as shift
WARNING: shift/reduce conflict for REGISTER in state 34 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 34 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 34 resolved as shift
WARNING: shift/reduce conflict for TYPEDEF in state 34 resolved as shift
WARNING: shift/reduce conflict for _THREAD_LOCAL in state 34 resolved as shift
WARNING: shift/reduce conflict for INLINE in state 34 resolved as shift
WARNING: shift/reduce conflict for _NORETURN in state 34 resolved as shift
WARNING: shift/reduce conflict for _ALIGNAS in state 34 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 50 resolved as shift
WARNING: shift/reduce conflict for CONST in state 71 resolved as shift
WARNING: shift/reduce conflict for RESTRICT in state 71 resolved as shift
WARNING: shift/reduce conflict for VOLATILE in state 71 resolved as shift
WARNING: shift/reduce conflict for _ATOMIC in state 71 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 71 resolved as shift
WARNING: shift/reduce conflict for REGISTER in state 71 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 71 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 71 resolved as shift
WARNING: shift/reduce conflict for TYPEDEF in state 71 resolved as shift
WARNING: shift/reduce conflict for _THREAD_LOCAL in state 71 resolved as shift
WARNING: shift/reduce conflict for INLINE in state 71 resolved as shift
WARNING: shift/reduce conflict for _NORETURN in state 71 resolved as shift
WARNING: shift/reduce conflict for _ALIGNAS in state 71 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 72 resolved as shift
WARNING: shift/reduce conflict for _ATOMIC in state 101 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 323 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 553 resolved as shift
WARNING: reduce/reduce conflict in state 34 resolved using rule (type_specifier -> atomic_specifier)
WARNING: rejected rule (empty -> <empty>) in state 34
WARNING: reduce/reduce conflict in state 71 resolved using rule (type_specifier -> atomic_specifier)
WARNING: rejected rule (empty -> <empty>) in state 71
WARNING: reduce/reduce conflict in state 371 resolved using rule (pppragma_directive_list -> pppragma_directive)
WARNING: rejected rule (statement -> pppragma_directive) in state 371
WARNING: reduce/reduce conflict in state 480 resolved using rule (pppragma_directive_list -> pppragma_directive_list pppragma_directive)
WARNING: rejected rule (statement -> pppragma_directive) in state 480
WARNING: reduce/reduce conflict in state 554 resolved using rule (pppragma_directive_list -> pppragma_directive)
WARNING: rejected rule (statement -> pppragma_directive) in state 554
